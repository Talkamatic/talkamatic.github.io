{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting started","text":"<p>Welcome to the Talkamatic documentation. The site you just entered describes:</p> <ul> <li>the foundation of our technologies, most notably the Dialog formalism that models our entire dialog universe</li> <li>some assistance for dialog designers, a tutorial and some publicly available code examples among other things</li> <li>API definitions, whether you integrate the TDM Pipeline into your software stack, build your own NLU or create your own domain-specific service doesn't matter, it's all there</li> </ul> <p>Additionally, there's further illustrated reading about TDM wrapped into a PDF here.</p>"},{"location":"formalism/","title":"Dialog Formalism","text":"<p>The Dialog Formalism is a formal language for expressing semantics and domain knowledge within the framework of issue-based dialog management (Larsson, 2002)<sup>1</sup> based on the information state approach (Larsson, Traum, 2000)<sup>2</sup>, (Traum, Larsson, 2003)<sup>3</sup>, which is the foundation of TDM.</p> <p>For readers familiar with logic, the Dialog Formalism is closely related to first-order predicate logic.</p> <p>Some of the constructs of the Dialog Formalism are described below, with corresponding example expressions.</p>"},{"location":"formalism/#semantics","title":"Semantics","text":"<p>The Dialog Formalism covers semantics, constructs that occur in language, regardless of the actual language.</p>"},{"location":"formalism/#predicates","title":"Predicates","text":"<p>Predicates are used to formalise the meanings of nouns, verbs and adjectives.</p> <p>They typically correspond to slots in form-based (slot-filling) dialog management.</p> <p>Example: <code>selected_contact</code></p>"},{"location":"formalism/#individuals","title":"Individuals","text":"<p>Individuals can be arguments of predicates, which corresponds to being values of slots in form-based dialog management. It also aligns with the term \"entity\" used in many other contexts.</p> <p>In TDM, <code>yes</code> and <code>no</code> are modelled as individuals, even if they are not individuals in the concrete sense, but this allows them to be used in answers.</p> <p>Examples:</p> <ul> <li><code>contact_john</code>, which would correspond to <code>John</code> in natural language.</li> <li><code>yes</code></li> <li><code>no</code></li> </ul>"},{"location":"formalism/#propositions","title":"Propositions","text":"<p>A proposition expresses something that can be true or false, can be believed to be true, or can be taken as a fact. Propositions have a predicate, a polarity (positive or negative), an arity (nullary or unary) and optionally an argument (an individual, typically).</p> <p>Negative polarity is expressed using the negation operator <code>~</code> as prefix.</p>"},{"location":"formalism/#nullary-proposition","title":"Nullary proposition","text":"<p>A nullary proposition has no argument.</p> <p>Examples:</p> <ul> <li><code>need_visa</code> expresses that a visa is needed.</li> <li><code>~need_visa</code> expresses that a visa is not needed.</li> </ul>"},{"location":"formalism/#unary-propositions","title":"Unary propositions","text":"<p>A unary proposition takes an individual as an argument.</p> <p>Examples:</p> <ul> <li><code>selected_contact(contact_john)</code> expresses that the selected contact is John.</li> <li><code>~selected_contact(contact_john)</code> expresses that the selected contact is not John.</li> </ul>"},{"location":"formalism/#goal-propositions","title":"Goal propositions","text":"<p>A goal proposition expresses that a particular goal should be targeted. It has the form <code>goal(G)</code> where G is a goal.</p> <p>Examples:</p> <p><code>goal(perform(call))</code> expresses that the goal of performing <code>call</code> should be targeted. <code>goal(resolve(?X.phone_number(X)))</code> expresses that the goal of resolving <code>?X.phone_number(X)</code> should be targeted.</p>"},{"location":"formalism/#actions","title":"Actions","text":"<p>An action is something that can be performed.</p> <p>Example: <code>call</code></p>"},{"location":"formalism/#questions","title":"Questions","text":"<p>A question is something that can be asked, answered and resolved. Its expression begins with the question operator <code>?</code>.</p>"},{"location":"formalism/#yes-no-questions","title":"Yes-no questions","text":"<p>A yes-no question is a question that can be answered with a yes or no.</p> <p>Examples:</p> <ul> <li><code>?need_visa</code> expresses a question regarding whether a visa is needed.</li> <li><code>?selected_contact(contact_john)</code> expresses a question regarding whether the selected contact is John.</li> </ul>"},{"location":"formalism/#wh-questions","title":"WH questions","text":"<p>A WH question is a question about what, when, where etc. It is expressed as a lambda abstraction.</p> <p>Example: <code>?X.selected_contact(X)</code> expresses a question about which contact to select.</p>"},{"location":"formalism/#alternative-questions","title":"Alternative questions","text":"<p>An alternative question is a question containing multiple alternative answers expressed as a set of propositions.</p> <p>Example: <code>?set([number_to_call(home), number_to_call(mobile)])</code> expresses a question about whether to call the home or mobile number.</p>"},{"location":"formalism/#knowledge-precondition-questions","title":"Knowledge precondition questions <p>A knowledge precondition question is a question about whether the the answer to a question is known.</p> <p>Example: <code>?know_answer(?X.contact_to_call_first_name(X))</code> expresses a question about whether the first name of the contact to call is known.</p>","text":""},{"location":"formalism/#moves","title":"Moves","text":"<p>(Dialog) moves reflect the meaning and function of something that is communicated in a dialog. Utterances spoken by the user or system correspond to sequences of moves. TDM supports many different kinds of dialog moves, the most common of which are described below.</p>"},{"location":"formalism/#ask-moves","title":"Ask moves <p>An ask move represents the act of asking a question. It has the form <code>ask(Q)</code> where <code>Q</code> is a question.</p> <p>Example: <code>ask(?X.selected_contact(X))</code></p>","text":""},{"location":"formalism/#request-moves","title":"Request moves <p>A request move represents the act of requesting an action that needs to be performed. It has the form <code>request(A)</code> where <code>A</code> is an action.</p> <p>Example: <code>request(call)</code></p>","text":""},{"location":"formalism/#answer-moves","title":"Answer moves <p>An answer move represents the act of answering a question. It has the form <code>answer(A)</code> where <code>A</code> can be a proposition (in a so called propositional answer) or an individual (in a so called sortal answer). The individual of a sortal answer combines with a question to form a proposition; for example, the question <code>?x.selected_name(x)</code> combined with the individual <code>contact_john</code> forms the proposition <code>selected_name(contact_john)</code>.</p> <p>An utterance is classified as realizing an answer-move only if its content, or part of the content, is taken to be a relevant answer to some question available in the domain. The available questions are encoded in dialogue plans in the domain knowledge resource, either as issues to be resolved by a plan or as issues to be raised or resolved as part of a plan.</p> <p>Examples:</p> <ul> <li><code>answer(contact_john)</code></li> <li><code>answer(selected_contact(contact_john))</code></li> <li><code>answer(yes)</code></li> <li><code>answer(no)</code></li> </ul>","text":""},{"location":"formalism/#icm-moves","title":"ICM moves <p>ICM stands for Interactive Communication Management, and ICM moves are automatically generated by TDM (1) for grounding - making sure system and user and perceiving, understanding and accepting each others' utterances, and (2) to signal dialogue structure (such as entering or exiting from a subdialogue).</p> <p>ICM moves related to grounding have the form <code>icm:Level*Polarity(:Arg)</code> where <code>Level</code> is <code>acc</code> (acceptance), <code>und</code> (contextual understanding), <code>sem</code> (semantic/non-contextual understanding) or <code>per</code> (perception); <code>Polarity</code> is <code>pos</code> (positive), <code>neg</code> (negative) or <code>int</code> (interrogative); and <code>Arg</code> is an optional argument which might be a proposition, an individual,  a question or a string.</p> <p>ICM moves related to dialogue structure  have the form <code>icm:Type(:Arg)</code> where <code>Type</code> is <code>loadplan</code>, <code>reraise</code>, or <code>accommodate</code>.</p> <p>Examples:</p> <ul> <li><code>icm:acc*pos</code> : signals acceptance (\"Okay\")</li> <li><code>icm:und*pos:selected_contact(contact_john)</code> : signals understanding (\"You want to call John\")</li> <li><code>icm:und*int:selected_contact(contact_john)</code> : checking if understanding is correct (\"Do you want to call John?\")</li> <li><code>icm:und*neg</code> : signals lack of contextual understanding (\"I don't quite understand\")</li> <li><code>icm:sem*pos:contact_john</code> : signals partial understanding (\"John.\")</li> <li><code>icm:sem*neg</code> : signals lack of understanding (\"I don't understand\")</li> <li><code>icm:per*pos:\"Call John\"</code> : signals perception (\"I heard you say 'Call John'\")</li> <li> <p><code>icm:per*neg</code> : signals lack of perception (\"I didn't hear.\")</p> </li> <li> <p><code>icm:loadplan</code> : signals loading a new dialogue plan (\"Let's see.\")</p> </li> <li><code>icm:reraise</code> : signals reraising of a question (\"So.\")</li> <li><code>icm:reraise:make_call</code> : signals reraising of a goal (\"Returning to making a call.\")</li> <li><code>icm:accommodate:make_call</code> : signals accommodating a goal (\"Alright, you want to make a call.\")</li> </ul>","text":""},{"location":"formalism/#domain-knowledge","title":"Domain knowledge","text":"<p>In addition to semantics, the Dialog Formalism also covers domain knowledge such as goals and (the contents of) plans.</p>"},{"location":"formalism/#goals","title":"Goals","text":"<p>A goal expresses an action to perform or a question to resolve, as elaborated below.</p>"},{"location":"formalism/#perform-goals","title":"Perform goals <p>A perform goal has the form <code>perform(A)</code> where A is an action.</p> <p>Example: <code>perform(call)</code> expresses the goal of performing the action <code>call</code>.</p>","text":""},{"location":"formalism/#resolve-goals","title":"Resolve goals <p>A resolve goal has the form <code>resolve(Q)</code> where Q is a question.</p> <p>Example: <code>resolve(?X.phone_number(X))</code> expresses the goal of resolving the question <code>?X.phone_number(X)</code>.</p>","text":""},{"location":"formalism/#plan-items","title":"Plan items","text":"<p>For every goal, there is a corresponding plan for how the goal can be fulfilled. Plans are however not fully expressed in the dialog formalism, but instead covered by the XML domain format of dialog domain descriptions. Individual plan items, the pieces that the plan consists of and each an instruction to TDM, can be expressed though. This section describes some of the most common items.</p>"},{"location":"formalism/#findout","title":"Findout <p>A <code>findout</code> item expresses an instruction to find the answer to a question, e.g. by asking the user or asking a service.</p> <p>Example: <code>findout(?X.selected_contact(X))</code></p>","text":""},{"location":"formalism/#bind","title":"Bind <p>The <code>bind(Q)</code> construction, where <code>Q</code> is a question, lets the system understand answers to a question <code>Q</code> that it does not ask explicitly. This makes it possible to take optional and unrequested parameters that the user provides into consideration.</p> <p>For example, if <code>bind(?x.price-class(x))</code> is in a plan in a travel agency domain, the system will understand something like \"I would like to travel business class\", but it will not ask e.g. \"What price class did you have in mind?\".</p>","text":""},{"location":"formalism/#invoke-service-action","title":"Invoke service action <p>An <code>invoke_service_action</code> expresses an action to be performed by a service.</p> <p>Example: <code>invoke_service_action(Call, {preconfirm=interrogative, postconfirm=True, downdate_plan=False})</code></p>","text":""},{"location":"formalism/#invoke-service-query","title":"Invoke service query <p>An <code>invoke_service_query</code> expresses an instruction to find the answer to a question by asking a service.</p> <p>Example: <code>invoke_service_query(?X.phone_number(X))</code></p>   <ol> <li> <p>Larsson, S. (2002). Issue-based dialogue management. Department of Linguistics, University of Gothenburg.\u00a0\u21a9</p> </li> <li> <p>Larsson, S., &amp; Traum, D. R. (2000). Information state and dialogue management in the TRINDI dialogue move engine toolkit. Natural language engineering, 6(3-4), 323-340.\u00a0\u21a9</p> </li> <li> <p>Traum, D. R., &amp; Larsson, S. (2003). The information state approach to dialogue management. In Current and new directions in discourse and dialogue (pp. 325-353). Springer, Dordrecht.\u00a0\u21a9</p> </li> </ol>","text":""},{"location":"ibdm/","title":"Issue-based Dialogue Management","text":"<p>The goal of all practical dialogue is to communicate information which is useful in some activity. This means that conversational goals should describe missing information, and to fulfil a conversational goal, what we need to do is to communicate the missing information. Issues, or questions, are essentially entities specifying certain pieces of as-yet-unavailable information. That is, conversational goals can to a large extent be modelled as questions.</p> <p>The issue-based approach to dialogue management has proven very useful for implementing important mechanisms dealing with general (cross-domain) aspects of dialogue, such as inquiry-oriented dialogue interactions, dealing with multiple simultaneous tasks, sharing information between tasks, grounding, interactive communication management, question accommodation, belief revision, action-oriented dialogue, and negotiative dialogue.</p>"},{"location":"api-definitions/nlg_api/","title":"NLG API","text":"<p>This document describes version 1.0 of the API for Natural Language Generation (NLG) components, enabling 3<sup>rd</sup> party NLGs to integrate with the TDM pipeline. It covers how the TDM pipeline sends requests to the NLG, and how it expects responses to come back.</p> <p>The endpoint that the TDM pipeline calls to reach the NLG is configurable on the pipeline side, but it's recommended to accept requests on the root URL, e.g: <code>http://nlg/</code>.</p>"},{"location":"api-definitions/nlg_api/#request","title":"Request","text":"<p>When the TDM pipeline needs to generate what the system is saying, it sends a request to the NLG. The request contains moves from the dialog manager.</p> <p>Example:</p> <pre><code>{\n  \"version\": \"1.0\",\n  \"moves\": [\n    {\"semantic_expression\": \"icm:acc*pos\"},\n    {\"semantic_expression\": \"ask(?X.selected_contact(X))\"}\n  ]\n}\n</code></pre> <p>The following members are required:</p> <ul> <li><code>version</code>: The version that the consumer is expecting served. This is used to detect compatibility problems.</li> <li><code>moves</code>: A list of Move objects.</li> </ul>"},{"location":"api-definitions/nlg_api/#response","title":"Response","text":"<p>The NLG generates a natural language utterance. It can either succeed its generation, or fail if it doesn't cover the moves sent to it.</p>"},{"location":"api-definitions/nlg_api/#general-example","title":"General example","text":"<pre><code>{\n  \"status\": \"success\",\n  ...\n}\n</code></pre> <p>All responses need to contain the following members:</p> <ul> <li><code>status</code>: <code>success</code> if the NLG successfully generated an utterance, <code>fail</code> if it failed and <code>error</code> if an error happened unexpectedly.</li> </ul>"},{"location":"api-definitions/nlg_api/#success","title":"Success","text":"<p>When the NLG succeeds in generating its utterance, use the <code>success</code> response.</p> <pre><code>{\n  \"status\": \"success\",\n  \"utterance\": \"Who do you want to call?\"\n}\n</code></pre> <p>When <code>status</code> is <code>success</code>, the following members need to be present:</p> <ul> <li><code>utterance</code>: A string with the generated utterance.</li> </ul>"},{"location":"api-definitions/nlg_api/#failure","title":"Failure","text":"<p>When the NLG fails to generate an utterance, for instance because one of the moves sent to it isn't covered, use the <code>fail</code> response.</p> <pre><code>{\n  \"status\": \"fail\"\n}\n</code></pre>"},{"location":"api-definitions/nlg_api/#error","title":"Error","text":"<p>When an error occurs unexpectedly, use the <code>error</code> response.</p> <pre><code>{\n  \"status\": \"error\",\n  \"description\": \"A helpful description of the error.\"\n}\n</code></pre> <p>When <code>status</code> is <code>error</code>, the following members need to be present:</p> <ul> <li><code>message</code>: A string with a helpful message.</li> <li><code>code</code> (optional): A numeric code identifying the error, if applicable.</li> </ul>"},{"location":"api-definitions/nlu_api/","title":"NLU API","text":"<p>This document describes the API for NLUs, enabling 3<sup>rd</sup> party NLUs to integrate with the TDM pipeline. It covers how the TDM pipeline sends requests to the NLU, and how it expects responses to come back. The endpoint that the TDM pipeline calls to reach the NLU is configurable on the pipeline side, but it's recommended to accept requests on the root URL, e.g: <code>http://nlu/</code>.</p>"},{"location":"api-definitions/nlu_api/#request","title":"Request","text":"<p>When the TDM pipeline needs to understand what a user has said, it sends a request to the NLU. The request contains natural language input consisting of either hypotheses with the <code>speech</code> modality, or a single utterance with the <code>text</code> modality.</p> <p>See the natural language input object.</p> <p>Example:</p> <pre><code>{\n  \"modality\": \"speech\",\n  \"hypotheses\": [\n    {\n      \"utterance\": \"I want chinese\",\n      \"confidence\": 0.86\n    },\n  ]\n}\n</code></pre>"},{"location":"api-definitions/nlu_api/#response","title":"Response","text":"<p>The NLU's output must be converted into semantic input containing <code>interpretations</code> and <code>entities</code>.</p> <p>See the semantic input object.</p> <p>Example: <pre><code>{\n  \"interpretations\": [\n    {\n      \"utterance\": \"I want to have chinese food\",\n      \"modality\": \"speech\",\n      \"moves\": [\n        {\n          \"perception_confidence\": 0.86,\n          \"understanding_confidence\": 0.92215,\n          \"ddd\": \"my_restaurants\",\n          \"semantic_expression\": \"request(restaurant_search)\"\n        },\n        {\n          \"perception_confidence\": 0.86,\n          \"understanding_confidence\": 0.98532,\n          \"ddd\": \"my_restaurants\",\n          \"semantic_expression\": \"answer(cuisine_chinese)\"\n        }\n      ]\n    },\n    {\n      \"utterance\": \"I want to have chinese food\",\n      \"modality\": \"speech\",\n      \"moves\": [\n        {\n          \"perception_confidence\": 0.86,\n          \"understanding_confidence\": 0.5234,\n          \"ddd\": \"my_restaurants\",\n          \"semantic_expression\": \"request(restaurant_search)\"\n        }\n      ]\n    }\n  ],\n  \"entities\": [\n    {\n      \"name\": \"cuisine_chinese\",\n      \"sort\": \"cuisine\",\n      \"natural_language_form\": \"chinese\",\n      \"ddd\": \"my_restaurants\"\n    }\n  ]\n}\n</code></pre></p>"},{"location":"api-definitions/pipeline_api/","title":"Pipeline API","text":"<p>This document describes API version 3.4 for HTTP frontends, enabling frontends to integrate with TDM over HTTP. It covers e.g. how input from the user and output from TDM are communicated between TDM and the client.</p>"},{"location":"api-definitions/pipeline_api/#important-concepts","title":"Important concepts","text":"<p>This section describes some concepts that are important to understand and comply with when integrating TDM in a dialog system.</p>"},{"location":"api-definitions/pipeline_api/#requests-and-responses","title":"Requests and responses","text":"<p>TDM serves an HTTP server and responds to requests done by the client. The client is the consumer of the API outlined in this document.</p> <p>The client invokes TDM with an HTTP request to the interaction endpoint, e.g. <code>http://localhost:9090/interact</code>, using the POST method and a JSON body. The client should expect the status code to be 200 OK. For other status codes, the client should report an error to the user.</p> <p>The request body always contains a version number, specifying the version of the HTTP API format.</p> <p>The exact format of the request and the response depends on the type of request as described in the separate sections below.</p>"},{"location":"api-definitions/pipeline_api/#turn-taking","title":"Turn taking","text":"<p>Turn taking is a vital part of dialog between humans, read for instance the Wikipedia article. Since TDM is based on research on human-human dialog, turn taking is a central concept here too.</p> <p>The TDM client is responsible for managing turn-taking on behalf of the machine, because it's the component that is closest to the human, in the human-machine dialog that TDM enables. Since the machine is intended to assist the human, the human decides the pace, the turn taking, of the conversation. In spoken dialog, turn taking happens in close collaboration with the spoken output of the system, which means that the system's turn management needs to happen as close to this component, the text-to-speech component (TTS), as possible.</p> <p>TDM enables intuitive turn taking by instructing its client how to deal with the user input that it's range of sensors can pick up. The instructions are straightforward and revolve around passivity. If the user is passive, for instance doesn't know what to say, for a given amount of time, the client sends TDM a passivity request, which lets the system take the next turn instead of the user.</p> <p>The user should be considered passive when not doing anything related to the dialog. If the user however takes some action (although not completing its turn just yet), for instance by typing (if it's a text interface) or talking (if it's a spoken interface), the user should be considered active and the passivity request should not be sent to TDM. Instead the user should be allowed to complete its turn, resulting in an input request.</p> <p>TDM instructs its client about how much time of passivity that should pass before sending the passivity request in the <code>output.expected_passivity</code> field of the response.</p> <p>For instance, if TDM responds with:</p> <pre><code>{\n  \"output\": {\n    ...\n    \"expected_passivity\": 1.0\n  },\n  ...\n}\n</code></pre> <p>then the client should send a passivity request when the user has been passive for 1 second. The 1 second should start counting when the system utterance has reached the user, which in a spoken interface means when the TTS finished speaking TDM's utterance.</p> <p>Note that sometimes TDM does not have anything to say when the user becomes passive (<code>\"expected_passivity\": null</code>), and sometimes it just needs to progress the conversation immediately after saying something (<code>\"expected_passivity\": 0.0</code>).</p> <p>Read the details about how to interpret the <code>expected_passivity</code> value in the response format section.</p>"},{"location":"api-definitions/pipeline_api/#errors","title":"Errors","text":"<p>When an error occurs in TDM during a request, for instance due to incomplete turn management, the response contains the <code>\"error\"</code> field. It's important to note that this could mean that the session stops. If it has stopped, further requests on the same session will report errors that the provided session ID is unknown.</p>"},{"location":"api-definitions/pipeline_api/#start-session-requests","title":"Start session requests","text":"<p>When a new session should be started, the client issues a <code>start_session</code> request. The response contains initial output from TDM and a session ID that can be used in subsequent requests. For more details, see the response format.</p> <p>If a session ID is provided together with the <code>start_session</code> request, an error is given. The integrity of the session is however maintained.</p>"},{"location":"api-definitions/pipeline_api/#request","title":"Request","text":"<p>Example:</p> <pre><code>{\n  \"version\": \"3.4\",\n  \"session\": {},\n  \"request\": {\n    \"start_session\": {}\n  }\n}\n</code></pre> <p>The <code>session</code> object can contain frontend-specific session data to be used in dialog or by services. For more details, see the session object.</p> <p>The <code>start_session</code> object may contain the following optional members:</p> <ul> <li><code>ddd_set</code>: A string specifying a DDD set for the session. If omitted, a default DDD set configured by the backend is used.</li> </ul> <p>The <code>start_session</code> request may be issued on its own, so that the system will start the conversation; or combined with <code>natural_language_input</code>, <code>semantic_input</code> and <code>event</code> requests to start the conversation from there.</p> <p>Example when combined with <code>natural_language_input</code>:</p> <pre><code>{\n  \"version\": \"3.4\",\n  \"request\": {\n    \"start_session\": {},\n    \"natural_language_input\": {...}\n  }\n}\n</code></pre>"},{"location":"api-definitions/pipeline_api/#response","title":"Response","text":"<p>See response format.</p>"},{"location":"api-definitions/pipeline_api/#natural-language-input-requests","title":"Natural language input requests","text":"<p>When the client detects natural language input from the user, it issues a request and receives output from TDM. The request can contain either hypotheses with the <code>speech</code> modality, or a single utterance with the <code>text</code> modality.</p>"},{"location":"api-definitions/pipeline_api/#request_1","title":"Request","text":"<p>Speech input example:</p> <pre><code>{\n  \"version\": \"3.4\",\n  \"session\": {\n    \"session_id\": \"0000-abcd-1111-efgh\"\n  },\n  \"request\": {\n    \"natural_language_input\": {\n      \"modality\": \"speech\",\n      \"hypotheses\": [\n        {\n          \"utterance\": \"call John\",\n          \"confidence\": 0.81\n        },\n        {\n          \"utterance\": \"calling John\",\n          \"confidence\": 0.65\n        },\n        {\n          \"utterance\": \"call him John\",\n          \"confidence\": 0.31\n        }\n      ]\n    }\n  }\n}\n</code></pre> <p>Text input example:</p> <pre><code>{\n  \"version\": \"3.4\",\n  \"session\": {\n    \"session_id\": \"0000-abcd-1111-efgh\"\n  },\n  \"request\": {\n    \"natural_language_input\": {\n      \"modality\": \"text\",\n      \"utterance\": \"I'm searching for flights from London to Paris tomorrow\"\n    }\n  }\n}\n</code></pre> <p>The <code>session</code> object can contain frontend-specific session data to be used in dialog or by services. For more details, see the session object</p> <p>See the natural language input object for more details.</p> <p>The <code>natural_language_input</code> request may be combined with the <code>start_session</code> request when a session does not yet exist, but may not be combined with other requests.</p> <p>Example: <pre><code>{\n  \"version\": \"3.4\",\n  \"request\": {\n    \"start_session\": {},\n    \"natural_language_input\": {...}\n  }\n}\n</code></pre></p>"},{"location":"api-definitions/pipeline_api/#response_1","title":"Response","text":"<p>See response format.</p>"},{"location":"api-definitions/pipeline_api/#semantic-input-requests","title":"Semantic input requests","text":"<p>When the client has user input on a semantic format, as a user move, it should issue the <code>semantic_input</code> request.</p> <p>Semantic in this case means that the user input does not need to be interpreted; the user move is already known. This is useful when an external natural language understanding (NLU) component has already interpreted the input; when the user presses a button in a GUI; or for instance when the user makes a gesture which is interpreted as a user move.</p>"},{"location":"api-definitions/pipeline_api/#request_2","title":"Request","text":"<pre><code>{\n  \"version\": \"3.4\",\n  \"session\": {\n    \"session_id\": \"0000-abcd-1111-efgh\"\n  },\n  \"request\": {\n    \"semantic_input\": {\n      \"interpretations\": [\n        {\n          \"utterance\": \"call John\",\n          \"modality\": \"speech\",\n          \"moves\": [\n            {\n              \"perception_confidence\": 0.81,\n              \"understanding_confidence\": 0.92215,\n              \"ddd\": \"phone\",\n              \"semantic_expression\": \"request(call)\"\n            },\n            {\n              \"perception_confidence\": 0.81,\n              \"understanding_confidence\": 0.98532,\n              \"ddd\": \"phone\",\n              \"semantic_expression\": \"answer(contact_john)\"\n            }\n          ]\n        },\n        {\n          \"utterance\": \"calling John\",\n          \"modality\": \"speech\",\n          \"moves\": [\n            {\n              \"perception_confidence\": 0.65,\n              \"understanding_confidence\": 0.5234,\n              \"ddd\": \"phone\",\n              \"semantic_expression\": \"request(call)\"\n            },\n            {\n              \"perception_confidence\": 0.65,\n              \"understanding_confidence\": 0.98532,\n              \"ddd\": \"phone\",\n              \"semantic_expression\": \"answer(contact_john)\"\n            }\n          ]\n        },\n        {\n          \"utterance\": \"call him John\",\n          \"modality\": \"speech\",\n          \"moves\": [\n            {\n              \"perception_confidence\": 0.31,\n              \"understanding_confidence\": 0.2216,\n              \"ddd\": \"phone\",\n              \"semantic_expression\": \"request(call)\"\n            },\n            {\n              \"perception_confidence\": 0.31,\n              \"understanding_confidence\": 0.98532,\n              \"ddd\": \"phone\",\n              \"semantic_expression\": \"answer(contact_john)\"\n            }\n          ]\n        },\n        {\n          \"utterance\": \"call him John\",\n          \"modality\": \"speech\",\n          \"moves\": [\n            {\n              \"perception_confidence\": 0.31,\n              \"understanding_confidence\": 0.10126,\n              \"ddd\": \"phone\",\n              \"semantic_expression\": \"ask(?X.phone_number(X))\"\n            },\n            {\n              \"perception_confidence\": 0.31,\n              \"understanding_confidence\": 0.98532,\n              \"ddd\": \"phone\",\n              \"semantic_expression\": \"answer(contact_john)\"\n            }\n          ]\n        }\n      ],\n      \"entities\": [\n        {\n          \"name\": \"contact_john\",\n          \"sort\": \"contact\",\n          \"natural_language_form\": \"John\",\n          \"ddd\": \"phone\"\n        }\n      ]\n    }\n  }\n}\n</code></pre> <p>The <code>session</code> object can contain frontend-specific session data to be used in dialog or by services. For more details, see the session object.</p> <ul> <li><code>interpretations</code>: A list of interpretation objects. TDM will use confidence scores and the context of the current state of the session to decide which interpretation to act upon.</li> <li><code>entities</code>: (optional) A list of entity objects. TDM can use these entities in interpretations and for natural language generation.</li> </ul> <p>See the semantic input object for more details.</p> <p>The <code>semantic_input</code> request may be combined with the <code>start_session</code> request when a session does not yet exist, but may not be combined with other requests.</p> <p>Example:</p> <pre><code>{\n  \"version\": \"3.4\",\n  \"request\": {\n    \"start_session\": {},\n    \"semantic_input\": {...}\n  }\n}\n</code></pre>"},{"location":"api-definitions/pipeline_api/#response_2","title":"Response","text":"<p>See response format.</p>"},{"location":"api-definitions/pipeline_api/#passivity-requests","title":"Passivity requests","text":"<p>When the client detects user passivity, it issues a request and receives output from TDM.</p>"},{"location":"api-definitions/pipeline_api/#request_3","title":"Request","text":"<p>Example:</p> <pre><code>{\n  \"version\": \"3.4\",\n  \"session\": {\n    \"session_id\": \"0000-abcd-1111-efgh\"\n  },\n  \"request\": {\n    \"passivity\": {}\n  }\n}\n</code></pre> <p>The <code>session</code> object can contain frontend-specific session data to be used in dialog or by services. For more details, see the session object.</p> <p>The <code>passivity</code> request may not be combined with other requests in the same call.</p>"},{"location":"api-definitions/pipeline_api/#response_3","title":"Response","text":"<p>See response format.</p>"},{"location":"api-definitions/pipeline_api/#event-requests","title":"Event requests","text":"<p>When the client detects that an event pertaining to a relevant DDD has occurred, it should issue an event notification request, and receives output from TDM.</p>"},{"location":"api-definitions/pipeline_api/#request_4","title":"Request","text":"<p>Example:</p> <pre><code>{\n  \"version\": \"3.4\",\n  \"session\": {\n    \"session_id\": \"0000-abcd-1111-efgh\"\n  },\n  \"request\": {\n    \"event\": {\n      \"name\": \"IncomingCall\",\n      \"status\": \"started\",\n      \"parameters\": {\n        \"caller\": \"contact_12345\"\n      }\n    }\n  }\n}\n</code></pre> <p>The <code>session</code> object can contain frontend-specific session data to be used in dialog or by services. For more details, see the session object.</p> <p>The <code>event</code> object contains the following members:</p> <ul> <li><code>name</code>: A string corresponding to the name of the event, specified as an action in the service interface.</li> <li><code>status</code>: Either <code>started</code> or <code>ended</code>.</li> <li><code>parameters</code>: A map of key-value pairs pertaining to the event, corresponding to the parameters specified for the action in the service interface. The key is a string matching the parameter's predicate, and the value is a string containing the ID of the value (e.g. a number or a string depending on the sort).</li> </ul> <p>The <code>event</code> request may be combined with the <code>start_session</code> request when a session does not yet exist, but may not be combined with other requests.</p> <p>Example:</p> <pre><code>{\n  \"version\": \"3.4\",\n  \"request\": {\n    \"start_session\": {},\n    \"event\": {...}\n  }\n}\n</code></pre>"},{"location":"api-definitions/pipeline_api/#response_4","title":"Response","text":"<p>See response format.</p>"},{"location":"api-definitions/pipeline_api/#response-format","title":"Response format","text":"<p>The response format differs when the request was successful compared to when it encountered an error.</p>"},{"location":"api-definitions/pipeline_api/#successful-request","title":"Successful request","text":"<p>The TDM response from a successful request typically contains an output utterance and other relevant information. Example:</p> <pre><code>{\n  \"version\": \"3.4\",\n  \"session\": {\n    \"session_id\": \"0000-abcd-1111-efgh\"\n  },\n  \"output\": {\n    \"moves\": [\"ask(?X.selected_contact(X))\"],\n    \"utterance\": \"Who do you want to call?\",\n    \"expected_passivity\": 5.0,\n    \"actions\": []\n  },\n  \"nlu_result\": {\n    \"selected_utterance\": \"call John\",\n    \"confidence\": 0.88\n  },\n  \"context\": {\n    \"active_ddd\": \"my_ddd\",\n    \"available_ddds\": [\"my_ddd\", \"another_ddd\"],\n    \"facts\": {},\n    \"language\": \"eng\",\n    \"goal\": \"perform(call)\",\n    \"plan\": [\"findout(?X.selected_contact(X))\"],\n    \"facts_being_grounded\": {},\n    \"selected_hypothesis\": {\n      \"utterance\": \"call John\",\n      \"confidence\": 0.88\n    },\n    \"selected_interpretation\": [{\n      \"ddd\": \"send_to_frontend\",\n      \"understanding_confidence\": \"0.749\",\n      \"perception_confidence\": \"0.88\",\n      \"semantic_expression\": \"request(call)\"\n    }],\n    \"expected_input\": {\n      \"alternatives\": [\n        {\"semantic_expression\": \"answer(contact_john)\"},\n        {\"semantic_expression\": \"answer(contact_lisa)\"}\n      ]\n    }\n  }\n}\n</code></pre> <p>The <code>session</code> object is always provided and contains the same data that was provided in the request. Unlike requests however, it always contains:</p> <ul> <li><code>session_id</code>: The ID of the current session.</li> </ul> <p>The <code>output</code> object is provided unless an error has occurred and has the following members:</p> <ul> <li><code>moves</code>: The moves made by the system this turn. This is a list of move expressions in the dialog formalism, where the moves should be uttered in the listed order. Moves here are similar to the <code>semantic_expression</code> field of move objects.</li> <li><code>utterance</code>: A string representing the output utterance from the system and should be realized by the client (e.g. by speaking it or displaying it as text).</li> <li><code>expected_passivity</code>: If not <code>null</code>, the value is a number corresponding to the number of seconds of user passivity after which the client is expected to make a passivity request. If the value is 0.0, the passivity notification request should be issued immediately after having realized the system output. If the value is <code>null</code>, this means that TDM doesn't expect the user to have anything to say right now. For a speech-driven application, this probably means that the ASR should not be automatically activated when receiving this, but that the user should push to interact or similar.</li> <li><code>actions</code>: A list of action invocation objects, which needs to be invoked by the client. TDM assumes that the actions will succeed and reports them accordingly.</li> </ul> <p>The <code>nlu_result</code> object is provided for natural language input requests, unless an error has occurred. It has the following members:</p> <ul> <li><code>selected_utterance</code>: The utterance selected as the best candidate among the list of hypotheses.</li> <li><code>confidence</code>: A number representing the joint confidence of the input and the NLU processing.</li> </ul> <p>The <code>context</code> object is provided unless an error has occurred and contains the following members:</p> <ul> <li><code>active_ddd</code>: The name of the currently active DDD.</li> <li><code>available_ddds</code>: The DDDs available in the current DDD set.</li> <li><code>facts</code>: Information gathered during the conversation (see facts object).</li> <li><code>language</code>: ID of the current language.</li> <li><code>goal</code>: Currently active goal, expressed as a goal in the dialog formalism.</li> <li><code>plan</code>: Remaining items on the current plan, represented by a list of plan items in the dialog formalism.</li> <li><code>facts_being_grounded</code>: Information that the system is currently grounding with the user, represented as a list of facts objects.</li> <li><code>selected_hypothesis</code>: The natural language hypothesis that the system decided to act on. If the system turn was requested with a natural language input request, this corresponds to one of the hypothesis objects that were part of it. This field is <code>null</code> if a hypothesis could not be determined.</li> <li><code>selected_interpretation</code>: The semantic interpretation that the system decided to act on. If the system turn was requested with a semantic input request, this corresponds to one of the interpretation objects that were part of it. This field is <code>null</code> if an interpretation could not be determined.</li> <li><code>expected_input</code>: An expected input object, containing alternatives that TDM considers expected by the user the next turn. This field is <code>null</code> if TDM does not expect input, or if it doesn't know what input to expect.</li> </ul> <p>A <code>warnings</code> field is provided if warnings have been issued, as a list of strings, one string per warning. This can for instance happen when TDM is updated to a new version of this frontend API and the previous version is deprecated. In such cases, update your request formats to comply with the warning and avoid potential future errors:</p>"},{"location":"api-definitions/pipeline_api/#request-that-encountered-an-error","title":"Request that encountered an error","text":"<p>The TDM response when an error was encountered in the request contains an error description.</p> <pre><code>{\n  \"version\": \"3.4\",\n  \"session\": {\n    \"session_id\": \"0000-abcd-1111-efgh\"\n  },\n  \"error\": {\n    \"description\": \"An exception was encountered when processing the request\"\n  }\n}\n</code></pre> <p>An <code>error</code> object is provided if an error has occurred. In such cases, an error should be reported to the user by the client, and the session should not be resumed with further requests. The <code>error</code> field has the following members:</p> <ul> <li><code>description</code>: A human readable technical description of the error.</li> </ul>"},{"location":"api-definitions/pipeline_api/#session-object","title":"Session object","text":"<p>A session object can contain frontend-specific session data. The data is forwarded as is to all service calls on the HTTP API for services. That way, the data can be used in service calls directly; or influence the dialog, for instance by being retrieved through service queries. Note that session data is not automatically stored or attached to the session within TDM. It is returned in the response and can be injected in future requests. If specific data should be available to all service calls on a session, the data needs to be injected in every request on that session, or the DDD needs to retrieve it into the dialog state, for instance by a service query. For all requests except start session, a <code>session_id</code> is required and used to identify to which session the request is being made. For start session requests however, the <code>session_id</code> is disallowed and instead generated by TDM. It should be retrieved from the response.</p> <p>Example for start session request:</p> <pre><code>{\n  \"session\": {\n    \"my_frontend\": {\n      \"user_id\": \"123-abc-456-def\",\n      \"position\": {\n        \"latitude\": \"57.699188\",\n        \"longitude\": \"11.948313\"\n      }\n    }\n  }\n}\n</code></pre> <p>Example otherwise:</p> <pre><code>{\n  \"session\": {\n    \"session_id\": \"0000-abcd-1111-efgh\",\n    \"my_frontend\": {\n      \"user_id\": \"123-abc-456-def\",\n      \"position\": {\n        \"latitude\": \"57.699188\",\n        \"longitude\": \"11.948313\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"api-definitions/pipeline_api/#output-object","title":"Output object","text":"<p>The <code>output</code> object contains the following members:</p> <ul> <li><code>moves</code>: The moves made by the system this turn. This is a list of move expressions in the dialog formalism. Moves here are similar to the <code>semantic_expression</code> field of move objects.</li> <li><code>utterance</code>: A string representing the output utterance from the system and should be realized by the client (e.g. by speaking it or displaying it as text).</li> <li><code>expected_passivity</code>: If not null, the value is a number corresponding to the number of seconds of user passivity after which the client is expected to make a passivity request. If the value is 0.0, the passivity notification request should be issued immediately after having realized the system output.</li> <li><code>actions</code>: A list of action invocation objects, which needs to be invoked by the client. TDM assumes that the actions will succeed and reports them accordingly.</li> </ul>"},{"location":"api-definitions/pipeline_api/#nlu-results-object","title":"NLU results object","text":"<p>The <code>nlu_result</code> object contains the following members:</p> <ul> <li><code>selected_utterance</code>: The utterance selected as the best candidate amoung the list of natural language input hypotheses.</li> <li><code>confidence</code>: A number representing the joint confidence of the input and the NLU processing.</li> </ul>"},{"location":"api-definitions/pipeline_api/#context-object","title":"Context object","text":"<p>The <code>context</code> object contains the following members:</p> <ul> <li><code>active_ddd</code>: The name of the currently active DDD.</li> <li><code>facts</code>: Information gathered during the conversation (see facts object).</li> <li><code>language</code>: ID of the current language.</li> <li><code>goal</code>: Currently active goal, expressed as a goal proposition in the dialog formalism.</li> <li><code>plan</code>: Remaining items on the current plan, represented by a list of plan items in the dialog formalism.</li> <li><code>facts_being_grounded</code>: Information that the system is currently grounding with the user, represented as a list of facts objects.</li> <li><code>selected_hypothesis</code>: The natural language hypothesis that the system decided to act on. If the system turn was requested with a natural language input request, this corresponds to one of the hypothesis objects that were part of it. This field is <code>null</code> if a hypothesis could not be determined.</li> <li><code>selected_interpretation</code>: The semantic interpretation that the system decided to act on. If the system turn was requested with a semantic input request, this corresponds to one of the interpretation objects that were part of it. This field is <code>null</code> if an interpretation could not be determined.</li> <li><code>expected_input</code>: An expected input object, containing alternatives that TDM considers expected by the user the next turn. This field is <code>null</code> if TDM does not expect input, or if it doesn't know what input to expect.</li> </ul>"},{"location":"api-definitions/pipeline_api/#action-invocation-object","title":"Action invocation object","text":"<p>An action invocation object contains information about an action to be invoked by the client. The object has the following members:</p> <ul> <li><code>name</code> is a string corresponding to the action's name in <code>service_interface.xml</code>.</li> <li><code>parameters</code> contains values for all parameters that are specified for the method in <code>service_interface.xml</code>. If a parameter is unknown, its value is <code>null</code>. Otherwise it's an object containing:<ul> <li><code>sort</code>: ID of the predicate's sort as defined in the ontology.</li> <li><code>value</code>: ID of the value. For the sorts <code>integer</code> and <code>real</code>, the ID is a number. For other sorts, e.g. <code>string</code>, <code>datetime</code> and custom sorts, the ID is a string.</li> <li><code>grammar_entry</code>: Natural-language representation of the value.</li> </ul> </li> </ul> <p>Example:</p> <pre><code>{\n  \"name\": \"call\",\n  \"parameters\": {\n    \"selected_contact\": {\n      \"sort\": \"contact\",\n      \"value\": \"contact_john\",\n      \"grammar_entry\": \"John\"\n    }\n  }\n}\n</code></pre>"},{"location":"api-definitions/pipeline_api/#facts-object","title":"Facts object","text":"<p>The <code>facts</code> field contains a map of key-value pairs for information gathered during the conversation, e.g. from the user. The map may be empty.</p> <p>The key is a string matching a predicate as defined in the ontology. The value is an object with the following members:</p> <ul> <li><code>sort</code>: ID of the predicate's sort as defined in the ontology.</li> <li><code>value</code>: ID of the value (e.g. a number or a string depending on the sort). For predicates of sort <code>datetime</code>, the ID is an ISO 8601 string.</li> <li><code>grammar_entry</code>: Natural-language representation of the value.</li> </ul> <p>Example:</p> <pre><code>{\n  \"facts\": {\n    \"departure\": {\n      \"sort\": \"city\",\n      \"value\": \"city_012345\",\n      \"grammar_entry\": \"London\"\n    },\n    \"destination\": {\n      \"sort\": \"city\",\n      \"value\": \"city_012346\",\n      \"grammar_entry\": \"Newcastle\"\n    }\n  }\n}\n</code></pre>"},{"location":"api-definitions/pipeline_api/#expected-input-object","title":"Expected input object","text":"<p>The expected input object contains alternatives that TDM considers expected by the user the next turn. They can for instance be used to add quick-answer buttons to a GUI or chat client.</p> <p>The object has the following members:</p> <ul> <li><code>alternatives</code>: A list of alternative objects.</li> </ul> <p>If TDM asks a yes-no question, it expects the yes or no answer:</p> <pre><code>{\n  \"alternatives\": [\n    {\"semantic_expression\": \"answer(yes)\"},\n    {\"semantic_expression\": \"answer(no)\"}\n  ]\n}\n</code></pre> <p>If TDM asks an alternative question or a wh-question where the alternatives are known, the expected input object either contains answer moves with unary propositions:</p> <pre><code>{\n  \"alternatives\": [\n    {\"semantic_expression\": \"answer(selected_contact(contact_john))\"},\n    {\"semantic_expression\": \"answer(selected_contact(contact_lisa))\"}\n  ]\n}\n</code></pre> <p>... or request and ask moves:</p> <pre><code>{\n  \"alternatives\": [\n    {\"semantic_expression\": \"request(call)\"},\n    {\"semantic_expression\": \"ask(?X.phone_number(X))\"}\n  ]\n}\n</code></pre>"},{"location":"api-definitions/pipeline_api/#alternative-object","title":"Alternative object","text":"<p>An alternative object contains information about the moves that the user is expected to take the next turn. It contains the following members:</p> <ul> <li><code>semantic_expression</code>: A semantic expression of the expected move, expressed in the dialog formalism.</li> </ul>"},{"location":"api-definitions/service_api/","title":"Service API","text":"<p>This document describes API version 1.1 for HTTP services. It needs to be implemented by services invoked by TDM over HTTP. Services are used by DDDs to invoke actions, invoke queries, recognize entities, and to validate parameters.</p> <p>TDM invokes service methods with an HTTP request to the endpoint specified in <code>service_interface.xml</code>, using the POST method and a JSON body. It expects the status code to be 200 OK. (For other status codes, TDM reports an error to the user.)</p> <p>The request body always contains a version number, specifying the version of the service integration format. The service can use the version in the request to validate that the service implementation is compatible with the request. The service also returns a version number in the response body, corresponding to the version of this API used when implementing the service. If the service returns a version number that is not compatible with the request, TDM reports an error to the user.</p> <p>Responses from services adhere to the JSend specification. See response format for a general description.</p> <p>The exact format of the request and the response depends on the service method and is described below.</p>"},{"location":"api-definitions/service_api/#action-requests","title":"Action requests","text":""},{"location":"api-definitions/service_api/#request","title":"Request","text":"<p>Below is an example of a request body for an action called <code>SetTemperature</code>, invoked when the user has requested to set the temperature to 23 degrees:</p> <pre><code>{\n  \"version\": \"1.1\",\n  \"session\": {\n    \"session_id\": \"0000-abcd-1111-efgh\"\n  },\n  \"request\": {\n    \"type\": \"action\",\n    \"name\": \"SetTemperature\",\n    \"parameters\": {\n      \"degrees\": {\n        \"sort\": \"integer\",\n        \"value\": 23,\n        \"grammar_entry\": \"23\"\n      }\n    }\n  },\n  \"context\": {\n    \"active_ddd\": \"MyDDD\",\n    \"facts\": {\n      \"degrees\": {\n        \"sort\": \"integer\",\n        \"value\": 23,\n        \"grammar_entry\": \"23\"\n      }\n    },\n    \"language\": \"eng\",\n    \"invocation_id\": \"2222-ijkl-3333-mnop\"\n  }\n}\n</code></pre> <p>Format for <code>request</code>: see Request object.</p> <p>Format for <code>session</code>: see Session object.</p> <p>Format for <code>context</code>: see Context object.</p>"},{"location":"api-definitions/service_api/#response","title":"Response","text":"<p>Actions invoked over HTTP can either succeed or fail with an expected reason. Below is the expected response body for the request above, when successful:</p> <pre><code>{\n  \"status\": \"success\",\n  \"data\": {\n    \"version\": \"1.1\"\n  }\n}\n</code></pre> <p>Format for <code>status</code> and <code>data</code>: see Response format.</p> <p>But say that someone tries to set the temperature of a refrigerator to 23 degrees, which is more than it can handle. If there's a failure reason <code>temperature_too_high</code> declared in <code>service_interface.xml</code>, the service can fail expectedly with:</p> <pre><code>{\n  \"status\": \"fail\",\n  \"data\": {\n    \"version\": \"1.1\",\n    \"reason\": \"temperature_too_high\"\n  }\n}\n</code></pre> <p>Format for <code>status</code> and <code>data</code>: see Response format.</p> <p>The <code>data</code> object additionally contains these action specific members:</p> <ul> <li><code>reason</code> matching the failure that occurred. It needs to match one of the failure reasons declared for this action in <code>service_interface.xml</code>.</li> </ul>"},{"location":"api-definitions/service_api/#query-requests","title":"Query requests","text":"<p>Queries are invoked by TDM to retrieve information from a service, e.g. in order to be able to respond to a question from a user, or to fetch alternatives for alternative questions.</p>"},{"location":"api-definitions/service_api/#request_1","title":"Request","text":"<p>Below is an example of a request body for a query called <code>current_temperature</code> with the parameter <code>location</code>, invoked when the user has asked for the temperature in London:</p> <pre><code>{\n  \"version\": \"1.1\",\n  \"session\": {\n    \"session_id\": \"0000-abcd-1111-efgh\"\n  },\n  \"request\": {\n    \"type\": \"query\",\n    \"name\": \"current_temperature\",\n    \"parameters\": {\n      \"location\": {\n        \"sort\": \"city\",\n        \"value\": \"city_012345\",\n        \"grammar_entry\": \"London\"\n      }\n    },\n    \"min_results\": 1,\n    \"max_results\": 1\n  },\n  \"context\": {\n    \"active_ddd\": \"MyDDD\",\n    \"facts\": {\n      \"location\": {\n        \"sort\": \"city\",\n        \"value\": \"city_012345\",\n        \"grammar_entry\": \"London\"\n      }\n    },\n    \"language\": \"eng\",\n    \"invocation_id\": \"2222-ijkl-3333-mnop\"\n  }\n}\n</code></pre> <p>Format for <code>request</code>: see Request object.</p> <p>The <code>request</code> object additionally contains these query specific members:</p> <ul> <li><code>min_results</code> specifies the minimum number of results that the service should return as a non-negative integer. If the service returns fewer results than specified by <code>min_results</code>, TDM reports an error to the user.</li> <li><code>max_results</code> specifies the maximum number of results that the service should return. <code>max_results</code> is either a positive integer, or <code>null</code> meaning that there is no upper bound. If the service returns more results than specified by <code>max_results</code>, TDM reports an error to the user.</li> </ul> <p>Format for <code>session</code>: see Session object.</p> <p>Format for <code>context</code>: see Context object.</p>"},{"location":"api-definitions/service_api/#response_1","title":"Response","text":"<p>Below is an example of a response body for the request above, when the current temperature in London is 17 degrees:</p> <pre><code>{\n  \"status\": \"success\",\n  \"data\": {\n    \"version\": \"1.1\",\n    \"result\": [\n      {\n        \"value\": 17,\n        \"confidence\": 1.0,\n        \"grammar_entry\": null\n      }\n    ]\n  }\n}\n</code></pre> <p>General format for responses: see Response format.</p> <p><code>data</code> additionally contains these members specific to queries:</p> <ul> <li><code>result</code>: contains a list result items. Each result item is an object with the following members:<ul> <li><code>value</code> can be either a number, string or <code>null</code>, depending on the query's predicate. For predicates of sort <code>integer</code> or <code>real</code>, a number is expected. For predicates of sort <code>datetime</code>, an ISO 8601 string is expected. For predicates of a custom sort, a string is expected, corresponding to the name of the individual. For dynamic sorts, the value <code>null</code> is supported, in which case a grammar entry is required.</li> <li><code>confidence</code> should normally be set to 1.0. However, when the information is uncertain - e.g. when making a prediction from a user model - <code>confidence</code> can be set to a value from 0.0 to 1.0.</li> <li><code>grammar_entry</code> can be set to specify a natural-language represention of the result. This is required for dynamic sorts, when <code>value</code> is <code>null</code>.</li> </ul> </li> </ul>"},{"location":"api-definitions/service_api/#additional-query-example-multiple-results","title":"Additional query example: Multiple results","text":"<p>Below is an example of a request and response for a query called <code>selected_contact</code> which is used to determine whether a single contact can be identified based on a first and last name. In the example, only the first name is known, and the service returns two matching contacts.</p> <p>Request:</p> <pre><code>{\n  \"version\": \"1.1\",\n  \"session\": {\n    \"session_id\": \"0000-abcd-1111-efgh\"\n  },\n  \"request\": {\n    \"type\": \"query\",\n    \"name\": \"selected_contact\",\n    \"parameters\": {\n      \"selected_first_name\": {\n        \"sort\": \"first_name\",\n        \"value\": \"fist_name_john\",\n        \"grammar_entry\": \"John\"\n      },\n      \"selected_last_name\": null\n    },\n    \"min_results\": 0,\n    \"max_results\": null\n  },\n  \"context\": {\n    \"active_ddd\": \"MyDDD\",\n    \"facts\": {\n      \"selected_first_name\": {\n        \"sort\": \"first_name\",\n        \"value\": \"fist_name_john\",\n        \"grammar_entry\": \"John\"\n      }\n    },\n    \"language\": \"eng\",\n    \"invocation_id\": \"2222-ijkl-3333-mnop\"\n  }\n}\n</code></pre> <p>Response:</p> <pre><code>{\n  \"status\": \"success\",\n  \"data\": {\n    \"version\": \"1.1\",\n    \"result\": [\n      {\n        \"value\": \"contact_john_johnson\",\n        \"confidence\": 1.0,\n        \"grammar_entry\": \"John Johnson\"\n      },\n      {\n        \"value\": \"contact_john_thompson\",\n        \"confidence\": 1.0,\n        \"grammar_entry\": \"John Thompson\"\n      }\n    ]\n  }\n}\n</code></pre> <p>Also note that for this request example, the service may return an empty list of results if no matching contacts were found for the given parameters.</p>"},{"location":"api-definitions/service_api/#entity-recognizer-requests","title":"Entity recognizer requests","text":"<p>Entity recognizers are invoked by TDM to identify entities in user utterances.</p>"},{"location":"api-definitions/service_api/#request_2","title":"Request","text":"<p>Below is an example of a request body for an entity recognition invocation when the user has said \"what is the temperature in London\":</p> <pre><code>{\n  \"version\": \"1.1\",\n  \"session\": {\n    \"session_id\": \"0000-abcd-1111-efgh\"\n  },\n  \"request\": {\n    \"type\": \"entity_recognizer\",\n    \"name\": \"LocationRecognizer\",\n    \"utterance\": \"what is the temperature in London\"\n  },\n  \"context\": {\n    \"active_ddd\": \"MyDDD\",\n    \"facts\": {},\n    \"language\": \"eng\",\n    \"invocation_id\": \"2222-ijkl-3333-mnop\"\n  }\n}\n</code></pre> <p>Format for <code>request</code>: see Request object.</p> <p>The <code>request</code> object additionally contains these members specific to entity recognizers:</p> <ul> <li><code>utterance</code> is the user utterance that should be searched for entities. It's a string.</li> </ul> <p>Format for <code>session</code>: see Session object.</p> <p>Format for <code>context</code>: see Context object.</p>"},{"location":"api-definitions/service_api/#response_2","title":"Response","text":"<p>Below is an example of a response body for the request above:</p> <pre><code>{\n  \"status\": \"success\",\n  \"data\": {\n    \"version\": \"1.1\",\n    \"result\": [\n      {\n        \"grammar_entry\": \"London\",\n        \"sort\": \"city\",\n        \"value\": \"city_012345\"\n      }\n    ]\n  }\n}\n</code></pre> <p>General format for responses: see Response format.</p> <p><code>data</code> additionally contains these members specific to entity recognizers:</p> <ul> <li><code>result</code>: contains a list of zero or more result items. Each result item is an object with the following members:<ul> <li><code>grammar_entry</code>: Natural-language representation of the recognized entity.</li> <li><code>sort</code>: The entity's sort, corresponding to the sort's name in <code>ontology.xml</code>.</li> <li><code>value</code>: ID or semantic representation of the entity if known, otherwise <code>null</code>. For static (non-dynamic) sorts, the <code>value</code> is mandatory and should correspond to the semantic name of an individual.</li> </ul> </li> </ul>"},{"location":"api-definitions/service_api/#validator-requests","title":"Validator requests","text":"<p>Validators are invoked by TDM to determine if information provided by the user is valid. If not, relevant feedback is given to the user.</p>"},{"location":"api-definitions/service_api/#request_3","title":"Request","text":"<p>Below is an example of a request body for a validator called <code>RouteValidator</code> with the parameters <code>departure</code> and <code>destination</code>:</p> <pre><code>{\n  \"version\": \"1.1\",\n  \"session\": {\n    \"session_id\": \"0000-abcd-1111-efgh\"\n  },\n  \"request\": {\n    \"type\": \"validator\",\n    \"name\": \"RouteValidator\",\n    \"parameters\": {\n      \"departure\": {\n        \"sort\": \"city\",\n        \"value\": \"city_012345\",\n        \"grammar_entry\": \"London\"\n      },\n      \"destination\": {\n        \"sort\": \"city\",\n        \"value\": \"city_099998\",\n        \"grammar_entry\": \"Chippinghirst\"\n      }\n    }\n  },\n  \"context\": {\n    \"active_ddd\": \"MyDDD\",\n    \"facts\": {\n      \"departure\": {\n        \"sort\": \"city\",\n        \"value\": \"city_012345\",\n        \"grammar_entry\": \"London\"\n      },\n      \"destination\": {\n        \"sort\": \"city\",\n        \"value\": \"city_099998\",\n        \"grammar_entry\": \"Chippinghirst\"\n      }\n    },\n    \"language\": \"eng\",\n    \"invocation_id\": \"2222-ijkl-3333-mnop\"\n  }\n}\n</code></pre> <p>Format for <code>request</code>: see Request object.</p> <p>Format for <code>session</code>: see Session object.</p> <p>Format for <code>context</code>: see Context object.</p>"},{"location":"api-definitions/service_api/#response_3","title":"Response","text":"<p>Below is an example of a response body for the request above:</p> <pre><code>{\n  \"status\": \"success\",\n  \"data\": {\n    \"version\": \"1.1\",\n    \"is_valid\": false\n  }\n}\n</code></pre> <p>General format for responses: see Response format.</p> <p><code>data</code> additionally contains these validator specific members:</p> <ul> <li><code>is_valid</code>: can be either <code>true</code> or <code>false</code>, specifying whether the combination of parameters is valid or not.</li> </ul>"},{"location":"api-definitions/service_api/#request-object","title":"Request object","text":"<p>In general, the <code>request</code> object contains the following members. It may also contain additional method specific members.</p> <ul> <li><code>type</code> is the method type, e.g. <code>action</code> or <code>query</code>. All methods that can be declared in <code>service_interface.xml</code> are supported. See examples for each of them above.</li> <li><code>name</code> is the method name, as specified in <code>service_interface.xml</code>.</li> <li><code>parameters</code> contains values for all parameters that are specified for the method in <code>service_interface.xml</code>. If a parameter is unknown, its value is <code>null</code>. Otherwise it's an object containing:<ul> <li><code>sort</code>: ID of the predicate's sort as defined in the ontology.</li> <li><code>value</code>: ID of the value. For the sorts <code>integer</code> and <code>real</code>, the ID is a number. For other sorts, e.g. <code>string</code>, <code>datetime</code> and custom sorts, the ID is a string.</li> <li><code>grammar_entry</code>: Natural-language representation of the value.</li> </ul> </li> </ul> <p>Example: <pre><code>{\n  \"request\": {\n    \"type\": \"validator\",\n    \"name\": \"contact_validator\",\n    \"parameters\": {\n      \"selected_first_name\": {\n        \"sort\": \"first_name\",\n        \"value\": \"fist_name_john\",\n        \"grammar_entry\": \"John\"\n      },\n      \"selected_last_name\": null\n    }\n  }\n}\n</code></pre></p>"},{"location":"api-definitions/service_api/#session-object","title":"Session object","text":"<p>The <code>session</code> object contains the following members:</p> <ul> <li><code>session_id</code>: String representing the current TDM session.</li> </ul> <p>Additionally, it contains the same data that was injected in the frontend request to TDM. This way, service calls can utilize frontend-specific session data. For more details, read about the session object in the frontend API docs</p> <p>Example:</p> <pre><code>{\n  \"session\": {\n    \"session_id\": \"0000-abcd-1111-efgh\",\n    \"my_frontend\": {\n      \"user_id\": \"123-abc-456-def\",\n      \"position\": {\n        \"latitude\": \"57.699188\",\n        \"longitude\": \"11.948313\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"api-definitions/service_api/#context-object","title":"Context object","text":"<p>The <code>context</code> object contains the following members:</p> <ul> <li><code>active_ddd</code>: The name of the currently active DDD.</li> <li><code>facts</code>: Information gathered during the conversation (see Facts object).</li> <li><code>language</code>: ID of the current language.</li> <li><code>invocation_id</code>: A unique identifer for the invocation from TDM. This ID can be logged for analytics and issue reporting.</li> </ul>"},{"location":"api-definitions/service_api/#facts-object","title":"Facts object","text":"<p>The <code>facts</code> object contains a map of key-value pairs for information gathered during the conversation, e.g. from the user. The map may be empty.</p> <p>The key is a string matching a predicate as defined in the ontology. The value is an object with the following members:</p> <ul> <li><code>sort</code>: ID of the predicate's sort as defined in the ontology.</li> <li><code>value</code>: ID of the value. For the sorts <code>integer</code> and <code>real</code>, the ID is a number. For other sorts, e.g. <code>string</code>, <code>datetime</code> and custom sorts, the ID is a string.</li> <li><code>grammar_entry</code>: Natural-language representation of the value.</li> </ul> <p>Example: <pre><code>{\n  \"facts\": {\n    \"departure\": {\n      \"sort\": \"city\",\n      \"value\": \"city_012345\",\n      \"grammar_entry\": \"London\"\n    },\n    \"destination\": {\n      \"sort\": \"city\",\n      \"value\": \"city_012346\",\n      \"grammar_entry\": \"Newcastle\"\n    }\n  }\n}\n</code></pre></p>"},{"location":"api-definitions/service_api/#response-format","title":"Response format","text":"<p>All service responses adhere to the JSend specification.</p> <p>In general, responses can have one of three appearances, corresponding to the status of the invocation: <code>success</code>, <code>fail</code> and <code>error</code>. See the examples below.</p> <p>Success: <pre><code>{\n  \"status\": \"success\",\n  \"data\": {\n    \"version\": \"1.1\"\n  }\n}\n</code></pre></p> <p>Successful method invocations need to set their <code>status</code> to <code>success</code>.</p> <p>The <code>data</code> object contains mostly method specific members. All methods need however include:</p> <ul> <li><code>version</code>: the version of the API used to process the request and format the response. If the version is not compatible with the request, TDM reports an error to the user.</li> </ul> <p>Fail: <pre><code>{\n  \"status\": \"fail\",\n  \"data\": {\n    \"version\": \"1.1\"\n  }\n}\n</code></pre></p> <p>Failures cannot be used with queries, entity recognizers or validators, but is supported by actions. If a <code>fail</code> status is not supported or is reported unexpectedly, it is treated as an <code>error</code>. <code>error</code> is however preferred over <code>fail</code> since a helpful message can be provided. TDM will report the error to the user, but will not mention any details.</p> <p>To report a failure, the <code>status</code> need to be set to <code>fail</code>.</p> <p>The <code>data</code> object contains mostly method specific members. All methods need however include:</p> <ul> <li><code>version</code>: the version of the API used to process the request and format the response.</li> </ul> <p>Error: <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Could not communicate with the database.\",\n  \"code\": 135,\n  \"data\": {\n    \"version\": \"1.1\"\n  }\n}\n</code></pre></p> <p>When a service encounters an error, i.e. an exception, the <code>status</code> need to be set to <code>error</code>. TDM will report the error to the user, but will not mention any details.</p> <p><code>message</code> should be a human-readable message, explaining what went wrong. It will be logged but is not exposed to end-users.</p> <p><code>code</code> (optional) is a numeric code identifying the error, if applicable.</p> <p>The <code>data</code> needs to contain:</p> <ul> <li><code>version</code>: the version of the API used to process the request and format the response.</li> </ul>"},{"location":"api-definitions/shared_objects/","title":"Shared objects","text":"<p>This document describes the objects that occur in requests and responses across different APIs. For example, see TDM pipeline API.</p>"},{"location":"api-definitions/shared_objects/#natural-language-input-object","title":"Natural language input object","text":"<p>Speech input example:</p> <pre><code> {\n  \"modality\": \"speech\",\n  \"hypotheses\": [\n    {\n      \"utterance\": \"call John\",\n      \"confidence\": 0.81\n    },\n    {\n      \"utterance\": \"calling John\",\n      \"confidence\": 0.65\n    },\n    {\n      \"utterance\": \"call him John\",\n      \"confidence\": 0.31\n    }\n  ]\n}\n</code></pre> <p>Text input example:</p> <pre><code>{\n  \"modality\": \"text\",\n  \"utterance\": \"I'm searching for flights from London to Paris tomorrow\"\n }\n</code></pre> <p>The natural language input contains the following members:</p> <ul> <li><code>modality</code>: Should be either <code>speech</code> or <code>text</code> depending on how the input was detected.</li> <li><code>hypotheses</code>: A list of hypothesis objects which should be provided if <code>modality</code> is <code>speech</code>; otherwize the field should be omitted.</li> <li><code>utterance</code>: A string containing the utterance if <code>modality</code> is <code>text</code>; otherwize the field should be omitted.</li> </ul>"},{"location":"api-definitions/shared_objects/#hypothesis-object","title":"Hypothesis object","text":"<p>A hypothesis object contains information about what the user is believed to have uttered, consisting of the following members:</p> <ul> <li><code>utterance</code>: A string containing the utterance.</li> <li><code>confidence</code>: A number from 0.0 to 1.0 representing the confidence of the hypothesis.</li> </ul>"},{"location":"api-definitions/shared_objects/#semantic-input-object","title":"Semantic input object","text":"<pre><code>{\n  \"interpretations\": [\n    {\n      \"utterance\": \"call John\",\n      \"modality\": \"speech\",\n      \"moves\": [\n        {\n          \"perception_confidence\": 0.81,\n          \"understanding_confidence\": 0.92215,\n          \"ddd\": \"phone\",\n          \"semantic_expression\": \"request(call)\"\n        },\n        {\n          \"perception_confidence\": 0.81,\n          \"understanding_confidence\": 0.98532,\n          \"ddd\": \"phone\",\n          \"semantic_expression\": \"answer(contact_john)\"\n        }\n      ]\n    },\n    {\n      \"utterance\": \"calling John\",\n      \"modality\": \"speech\",\n      \"moves\": [\n        {\n          \"perception_confidence\": 0.65,\n          \"understanding_confidence\": 0.5234,\n          \"ddd\": \"phone\",\n          \"semantic_expression\": \"request(call)\"\n        },\n        {\n          \"perception_confidence\": 0.65,\n          \"understanding_confidence\": 0.98532,\n          \"ddd\": \"phone\",\n          \"semantic_expression\": \"answer(contact_john)\"\n        }\n      ]\n    },\n    {\n      \"utterance\": \"call him John\",\n      \"modality\": \"speech\",\n      \"moves\": [\n        {\n          \"perception_confidence\": 0.31,\n          \"understanding_confidence\": 0.2216,\n          \"ddd\": \"phone\",\n          \"semantic_expression\": \"request(call)\"\n        },\n        {\n          \"perception_confidence\": 0.31,\n          \"understanding_confidence\": 0.98532,\n          \"ddd\": \"phone\",\n          \"semantic_expression\": \"answer(contact_john)\"\n        }\n      ]\n    },\n    {\n      \"utterance\": \"call him John\",\n      \"modality\": \"speech\",\n      \"moves\": [\n        {\n          \"perception_confidence\": 0.31,\n          \"understanding_confidence\": 0.10126,\n          \"ddd\": \"phone\",\n          \"semantic_expression\": \"ask(?X.phone_number(X))\"\n        },\n        {\n          \"perception_confidence\": 0.31,\n          \"understanding_confidence\": 0.98532,\n          \"ddd\": \"phone\",\n          \"semantic_expression\": \"answer(contact_john)\"\n        }\n      ]\n    }\n  ],\n  \"entities\": [\n    {\n      \"name\": \"contact_john\",\n      \"sort\": \"contact\",\n      \"natural_language_form\": \"John\"\n    }\n  ]\n}\n</code></pre> <p>The semantic input contains the following members:</p> <ul> <li><code>interpretations</code>: A list of interpretation objects. TDM will use confidence scores and the context of the current state of the session to decide which interpretation to act upon.</li> <li><code>entities</code>: (optional) A list of entity objects. TDM can use these entities in interpretations and for natural language generation.</li> </ul> <p>The semantic format is different for each of the supported user moves. See the move object for examples.</p>"},{"location":"api-definitions/shared_objects/#interpretation-object","title":"Interpretation object","text":"<p>An interpretation translates an utterance into one or several semantic moves. An interpretation object contains:</p> <ul> <li><code>utterance</code>: (optional) A string containing the utterance.</li> <li><code>modality</code>: The modality that the user used to provide the original input. One of <code>speech</code>, <code>text</code>, <code>haptic</code>, <code>other</code>.</li> <li><code>moves</code>: A list of move objects.</li> </ul>"},{"location":"api-definitions/shared_objects/#entity-object","title":"Entity object","text":"<p>These entities are needed when entities are not defined in the DDD and can then be used in interpretations and in downstream natural language generation. An entity object contains:</p> <ul> <li><code>name</code>: A string containing the semantic name. This name can be used to reference the entity in interpretations.</li> <li><code>sort</code>: A string with the entity sort name.</li> <li><code>natural_language_form</code>: A string containing the natural language or surface form of the entity.</li> <li><code>ddd</code>: A string with the name of the DDD that the entity belongs to.</li> </ul>"},{"location":"api-definitions/shared_objects/#nlu-move-object","title":"NLU move object","text":"<p>Note</p> <p>Move objects used for NLU differ from those used for NLG.</p> <p>A move object contains information about how a user move was interpreted (see moves). Its members are:</p> <ul> <li><code>ddd</code>: (optional) A string containing the DDD name. For DDD independent moves (e.g. <code>answer(yes)</code> and <code>request(up)</code>), this field may be omitted; in which case the currently active DDD will be used to parse the semantic expression.</li> <li><code>perception_confidence</code>: A float between <code>0.0</code> and <code>1.0</code>, representing the confidence that a spoken utterance actually matches the textual utterance, for instance when a speech-to-text (STT) component turned it into text. If no perception component was used, the confidence should be set to <code>1.0</code>.</li> <li><code>understanding_confidence</code>: A float between <code>0.0</code> and <code>1.0</code>, representing the confidence that the textual utterance actually represents this move, for instance when an NLU component interprets the textual utterance. If no understanding component was used, for instance if the user pressed a button, the confidence should be set to <code>1.0</code>.</li> <li><code>semantic_expression</code>: A semantic expression, representing the move itself. Supported moves are <code>request</code>, <code>ask</code> and <code>answer</code>. See examples below for details.</li> </ul>"},{"location":"api-definitions/shared_objects/#example-of-a-request-move","title":"Example of a <code>request</code> move:","text":"<p>A request move has just one parameter: An action. In this case the <code>call</code> action, which must be defined in the ontology of the <code>phone</code> DDD.</p> <pre><code>{\n  \"ddd\": \"phone\",\n  \"semantic_expression\": \"request(call)\",\n  \"perception_confidence\": 0.65,\n  \"understanding_confidence\": 0.5234\n}\n</code></pre>"},{"location":"api-definitions/shared_objects/#example-of-builtin-request-move","title":"Example of builtin <code>request</code> move:","text":"<p>The builtin and DDD independent actions <code>top</code> and <code>up</code> can be requested without including the DDD name:</p> <pre><code>{\n  \"semantic_expression\": \"request(top)\",\n  \"perception_confidence\": 0.56,\n  \"understanding_confidence\": 0.65305\n}\n</code></pre>"},{"location":"api-definitions/shared_objects/#example-of-ask-moves","title":"Example of <code>ask</code> moves:","text":"<p>An ask move contains a question. Questions are expressed with a leading <code>?</code>. Question in <code>ask</code> moves always contain a predicate that must be defined in the ontology of the DDD. There are two supported types of questions in <code>ask</code> moves: wh-questions (questions about what, when, whom, which etc.) and yes-no questions (that can be answered with a yes or no).</p>"},{"location":"api-definitions/shared_objects/#example-of-an-ask-move-containing-a-wh-question","title":"Example of an <code>ask</code> move containing a wh-question:","text":"<p>Wh-questions are represented in a lambda-like form. In the case below, the question <code>?X.phone_number(X)</code> means that we're asking what someone's phone number is.</p> <pre><code>{\n  \"ddd\": \"phone\",\n  \"semantic_expression\": \"ask(?X.phone_number(X))\",\n  \"perception_confidence\": 0.31,\n  \"understanding_confidence\": 0.10126\n}\n</code></pre>"},{"location":"api-definitions/shared_objects/#example-of-an-ask-move-containing-a-yes-no-question","title":"Example of an <code>ask</code> move containing a yes-no question:","text":"<p>In the case below, the question <code>?missed_calls</code> means that we're asking whether there are any missed calls (without asking e.g. when or from whom).</p> <pre><code>{\n  \"ddd\": \"phone\",\n  \"semantic_expression\": \"ask(?missed_calls)\",\n  \"perception_confidence\": 0.43,\n  \"understanding_confidence\": 0.2432\n}\n</code></pre>"},{"location":"api-definitions/shared_objects/#example-of-a-sortal-answer-move","title":"Example of a sortal <code>answer</code> move:","text":"<p>A sortal answer move has an individual as its parameter. In this case, the individual <code>contact_john</code>, must be defined in the ontology of the <code>phone</code> DDD.</p> <pre><code>{\n  \"ddd\": \"phone\",\n  \"semantic_expression\": \"answer(contact_john)\",\n  \"perception_confidence\": 0.65,\n  \"understanding_confidence\": 0.98532\n}\n</code></pre>"},{"location":"api-definitions/shared_objects/#example-of-a-propositional-answer-move","title":"Example of a propositional <code>answer</code> move:","text":"<p>A propositional <code>answer</code> move has a proposition as its parameter, consisting of a predicate and an individual. In this case, the predicate <code>selected_contact</code>, and the individual <code>contact_john</code>, must be defined in the ontology of the <code>phone</code> DDD.</p> <pre><code>{\n  \"ddd\": \"phone\",\n  \"semantic_expression\": \"answer(selected_contact(contact_john))\",\n  \"perception_confidence\": 0.65,\n  \"understanding_confidence\": 0.71347\n}\n</code></pre>"},{"location":"api-definitions/shared_objects/#example-of-builtin-sortal-answer-move","title":"Example of builtin sortal <code>answer</code> move:","text":"<p>The builtin and DDD independent answers <code>yes</code> and <code>no</code> can be used without including the DDD name:</p> <pre><code>{\n  \"semantic_expression\": \"answer(yes)\",\n  \"perception_confidence\": 0.834,\n  \"understanding_confidence\": 0.71359\n}\n</code></pre>"},{"location":"api-definitions/shared_objects/#nlg-move-object","title":"NLG Move object","text":"<p>Note</p> <p>Move objects used for NLG differ from those used for NLU</p> <p>Example:</p> <pre><code>{\"semantic_expression\": \"ask(?X.selected_contact(X))\"}\n</code></pre> <p>The Move object contains the following members:</p> <ul> <li><code>semantic_expression</code>: A semantic expression of the expected move, expressed in the dialog formalism.</li> </ul>"},{"location":"dialog-domain-description-definition/","title":"Introduction","text":"<p>This part of the documentation describes how each part of a dialog domain description (DDD) is defined.</p> <p>This is work in progress, especially the domain language.</p>"},{"location":"dialog-domain-description-definition/domain/domain/","title":"Introduction","text":"<p>Dummy domain index (for now).</p>"},{"location":"dialog-domain-description-definition/domain/children/always_relevant/","title":"Always Relevant","text":""},{"location":"dialog-domain-description-definition/domain/children/always_relevant/#definition","title":"Definition","text":"<pre><code>&lt;always_relevant/&gt;\n</code></pre> <p>Make sure that a question from the user is always considered relevant in a domain, and its occurrance therefore indicating that the user did understand the previous utterance.</p> Attribute Type Description None"},{"location":"dialog-domain-description-definition/domain/children/always_relevant/#parents","title":"Parents","text":"<ul> <li>&lt;parameters&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/always_relevant/#children","title":"Children","text":"<p>None</p>"},{"location":"dialog-domain-description-definition/domain/children/always_relevant/#behaviour","title":"Behaviour","text":"<p>If the system makes an utterance, and the user asks a question that is considered irrelevant for the current task, the system will not consider that utterance as grounded, and will make it again. Some questions can be deemed to be always relevant, for instance asking about word meanings etc. In that case, one can indicate that that question is always relevant by the following code.</p>"},{"location":"dialog-domain-description-definition/domain/children/always_relevant/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/domain/children/always_relevant/#a-parameter-set-that-indicates-that-asking-a-question-about-a-word-meaning-is-always-relevant","title":"A Parameter Set that Indicates that Asking a Question about a Word Meaning is Always Relevant","text":"<pre><code>  &lt;parameters question_type=\"wh_question\" predicate=\"word_meaning\"&gt;\n    &lt;always_relevant/&gt;\n  &lt;/parameters&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/ask_feature/","title":"Ask Feature","text":""},{"location":"dialog-domain-description-definition/domain/children/ask_feature/#definition","title":"Definition","text":"<pre><code>&lt;ask_feature predicate=\"p\" kpq=\"true\"&gt;\n</code></pre> <p>The element that represents a question about a feature of an individual, that should be asked when using incremental search for finding an individual answer to a question.</p> Attribute Type Description predicate string Required. The predicate must be enumerated in the ontology, and be indicated as <code>feature-of</code> the predicate of the over-arching findout. kpq boolean Optional. Indicates if the question of the ask feature should be asked as a Knowledge Precondition Question"},{"location":"dialog-domain-description-definition/domain/children/ask_feature/#parents","title":"Parents","text":"<ul> <li>&lt;parameters&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/ask_feature/#children","title":"Children","text":"<p>None.</p>"},{"location":"dialog-domain-description-definition/domain/children/ask_feature/#behaviour","title":"Behaviour","text":"<p>An <code>ask\\_feature</code> is used in combination with incremental search. Each <code>ask\\_feature</code>represents a question that should be asked in order to find the answer to the question that is subject to incremental search.</p> <p>\"KPQ\" stands for Knowledge Precondition Question, and asks a question on the form \"Do you know ...\", for instance \"Do you know in what city she lives?\". The question can then be answered with \"Yes\", \"No\" or a resolving answer to the embedded question (\"Gothenburg\", \"London\" etc.).</p>"},{"location":"dialog-domain-description-definition/domain/children/ask_feature/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/domain/children/ask_feature/#a-ask-feature-corresponding-to-the-question-in-what-city-does-the-person-live","title":"A Ask Feature corresponding to the question \"In what city does the person live?\"","text":"<pre><code>&lt;ask_feature predicate=\"person_city\"/&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/ask_feature/#a-kpq-ask-feature-corresponding-to-the-question-do-you-know-in-what-city-the-person-lives","title":"A KPQ Ask Feature corresponding to the question \"Do you know in what city the person lives?\"","text":"<pre><code>&lt;ask_feature predicate=\"person_city\" kpq=\"true\"/&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/assume_issue/","title":"Assume Issue","text":""},{"location":"dialog-domain-description-definition/domain/children/assume_issue/#definition","title":"Definition","text":"<pre><code>&lt;assume_issue type=\"question_type\" predicate=\"p\"&gt;\n</code></pre> <p>The plan item that assumes that a question is relevant to the user. Defines a question that should be assumed.</p> Attribute Type Description type string Optional. The type can take one of the values <code>wh_question</code> or <code>yn_question</code>, but defaults to <code>wh_question</code>. predicate string Required. This attribute specifies the predicate of the raised question."},{"location":"dialog-domain-description-definition/domain/children/assume_issue/#parents","title":"Parents","text":"<ul> <li>&lt;plan&gt;</li> <li>&lt;postplan&gt;</li> <li>&lt;then&gt;</li> <li>&lt;else&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/assume_issue/#children","title":"Children","text":"<p>None.</p>"},{"location":"dialog-domain-description-definition/domain/children/assume_issue/#behaviour","title":"Behaviour","text":"<p>Using the  element has exactly the same effect as if the user would have asked the question. The element defines a question through its attributes. The issue (or question) that is assumed, must have a resolve-goal in the domain file.</p>"},{"location":"dialog-domain-description-definition/domain/children/assume_issue/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/domain/children/assume_issue/#assume-issue-entry-for-assuming-the-issue-about-the-departure-time-which-is-the-resolve-goal-of-another-plan","title":"Assume-issue entry for assuming the issue about the departure time (which is the resolve goal of another plan):","text":"<pre><code>&lt;assume_issue type=\"wh_question\" predicate=\"flight_departure\"/&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/assume_shared/","title":"Assume Shared","text":""},{"location":"dialog-domain-description-definition/domain/children/assume_shared/#definition","title":"Definition","text":"<pre><code>&lt;assume_shared&gt;\n  &lt;proposition predicate=\"p\" value=\"a\"/&gt;\n&lt;/assume_shared&gt;\n</code></pre> <p>Assumes the common knowledge between the system and the user of a predicate and assigns to it a specific value.</p> Attribute Type Description None. - -"},{"location":"dialog-domain-description-definition/domain/children/assume_shared/#parents","title":"Parents","text":"<ul> <li>&lt;plan&gt;</li> <li>&lt;then&gt;</li> <li>&lt;else&gt;</li> <li>&lt;postplan&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/assume_shared/#children","title":"Children","text":"<ul> <li>&lt;proposition&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/assume_shared/#behaviour","title":"Behaviour","text":"<p>The &lt;assume_shared/&gt; element adds the proposition to the facts that the system believe are shared between the user and the system. Any &lt;findout&gt; with this predicate in &lt;proposition&gt; will be considered as answered by the system with the specified value.</p>"},{"location":"dialog-domain-description-definition/domain/children/assume_shared/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/domain/children/assume_shared/#assume-shared-entry-for-assuming-the-fact-that-the-current_recipe-is-sourdough_starter","title":"Assume Shared entry for assuming the fact that the \"current_recipe\" is \"sourdough_starter\":","text":"<pre><code>&lt;assume_shared&gt;\n  &lt;proposition predicate=\"current_recipe\" value=\"sourdough_starter\"/&gt;\n&lt;/assume_shared&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/assume_system_belief/","title":"Assume System Belief","text":""},{"location":"dialog-domain-description-definition/domain/children/assume_system_belief/#definition","title":"Definition","text":"<pre><code>&lt;assume_system_belief&gt;\n  &lt;proposition predicate=\"p\" value=\"a\"/&gt;\n&lt;/assume_system_belief&gt;\n</code></pre> <p>The plan item that assumes a proposition. The proposition will be a part of the system's private beliefs.</p> Attribute Type Description None. - -"},{"location":"dialog-domain-description-definition/domain/children/assume_system_belief/#parents","title":"Parents","text":"<ul> <li>&lt;plan&gt;</li> <li>&lt;postplan&gt;</li> <li>&lt;then&gt;</li> <li>&lt;else&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/assume_system_belief/#children","title":"Children","text":"<ul> <li>&lt;proposition&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/assume_system_belief/#behaviour","title":"Behaviour","text":"<p>Using the  element has the effect of adding the assumed proposition to the private beliefs of the system. This means that it is available as an answer to a question, or as a parameter to a service call. Assumptions will not be validated by user defined validators, and only propositions over individuals already known to the system can be made (e.g. static individuals).</p>"},{"location":"dialog-domain-description-definition/domain/children/assume_system_belief/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/domain/children/assume_system_belief/#assume_system_belief-element-for-assuming-that-the-user-is-an-adult","title":"Assume_System_Belief element for assuming that the user is an adult","text":"<pre><code>&lt;assume_system_belief&gt;\n  &lt;proposition predicate=\"user_age_category\" value=\"adult\"/&gt;\n&lt;/assume_system_belief&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/assume_system_belief/#resolve-goal-utilising-assume_system_belief-element-for-assuming-the-answer-to-the-question","title":"Resolve goal utilising assume_system_belief element for assuming the answer to the question","text":"<pre><code>&lt;goal type=\"resolve\" question_type=\"wh_question\" predicate=\"quantity_of_water\"&gt;\n  &lt;plan&gt;\n    &lt;assume_system_belief&gt;\n      &lt;proposition predicate=\"quantity_of_water\" value=\"20\"/&gt;\n    &lt;/assume_system_belief&gt;\n  &lt;/plan&gt;\n&lt;/goal&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/background/","title":"Background","text":""},{"location":"dialog-domain-description-definition/domain/children/background/#definition","title":"Definition","text":"<pre><code>&lt;background predicate=\"p\"/&gt;\n</code></pre> <p>Defining that a predicate should be used as background when asking or answering a question.</p> Attribute Type Description Predicate String The predicate over which the proposition used as background is defined."},{"location":"dialog-domain-description-definition/domain/children/background/#parents","title":"Parents","text":"<ul> <li>&lt;parameters&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/background/#children","title":"Children","text":"<p>None</p>"},{"location":"dialog-domain-description-definition/domain/children/background/#behaviour","title":"Behaviour","text":"<p>The background parameters are passed to generation, so that it can be given as background to asking or answering a question.</p> <p>NB! The order in which the background elements are defined decides the order of the background in the generated utterance. In other words it overrides the predicates in the slot definitions in the grammar.</p>"},{"location":"dialog-domain-description-definition/domain/children/background/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/domain/children/background/#background-elements-for-unit-and-ingredient","title":"Background elements for unit and ingredient","text":"<p>Background defined in order to be able to answer the question about quantity and ingredient in the following way: \"You need 500 grams of flour\".</p> <pre><code>  &lt;parameters predicate=\"ingredient_quantity\"&gt;\n    &lt;background predicate=\"unit\"/&gt;\n    &lt;background predicate=\"selected_ingredient\"/&gt;\n  &lt;/parameters&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/bind/","title":"Bind","text":""},{"location":"dialog-domain-description-definition/domain/children/bind/#definition","title":"Definition","text":"<pre><code>&lt;bind question_type=\"type\" predicate=\"p\"&gt;\n</code></pre> <p>The element defines a question that can be answered by the user, but will not be asked by the system.</p> Attribute Type Description question_type string Optional. Defaults to <code>wh_question</code>, but can be one of <code>goal</code>, <code>wh_question</code>, <code>alt_question</code> or <code>yn_question</code>. predicate string Optional. Required if question_type is <code>wh_question</code> or <code>yn_question</code>."},{"location":"dialog-domain-description-definition/domain/children/bind/#parents","title":"Parents","text":"<ul> <li>&lt;plan&gt;</li> <li>&lt;postplan&gt;</li> <li>&lt;then&gt;</li> <li>&lt;else&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/bind/#children","title":"Children","text":"<ul> <li>&lt;alt&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/bind/#behaviour","title":"Behaviour","text":"<p>The element defines a question that can be answered by the user, but will not be asked by the system, thereby `binding' that answer to the goal in question. This makes it possible to take into consideration optional and unrequested parameters.</p> <p>This is only valid as long as the plan element is still in the plan. When executed, the plan element is removed from the plan. This means that the element should always be placed last in the plan, unless the developer wishes to remove the <code>bind</code> element during execution of the plan.</p>"},{"location":"dialog-domain-description-definition/domain/children/bind/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/domain/children/bind/#binding-a-wh-question-about-price-range-eg-in-a-travel-booking-application","title":"Binding a WH question about price range (e.g. in a travel booking application)","text":"<pre><code>  &lt;bind type=\"wh_question\" predicate=\"price-class\"/&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/change_ddd/","title":"Change DDD","text":""},{"location":"dialog-domain-description-definition/domain/children/change_ddd/#definition","title":"Definition","text":"<pre><code>&lt;change_ddd name=\"some_ddd_name\"/&gt;\n</code></pre> <p>The plan item that makes the system switch to another DDD.</p> Attribute Type Description name string The name of the DDD that we should switch to."},{"location":"dialog-domain-description-definition/domain/children/change_ddd/#parents","title":"Parents","text":"<ul> <li>&lt;plan&gt;</li> <li>&lt;postplan&gt;</li> <li>&lt;then&gt;</li> <li>&lt;else&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/change_ddd/#children","title":"Children","text":"<p>None</p>"},{"location":"dialog-domain-description-definition/domain/children/change_ddd/#behaviour","title":"Behaviour","text":"<p>The result of changing domain is that TDM will not remember the previous plan and goals, any non integrated moves will be lost, and the requested domain will be loaded.</p>"},{"location":"dialog-domain-description-definition/domain/children/change_ddd/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/domain/children/change_ddd/#change-to-the-ddd-navigation","title":"Change to the DDD <code>navigation</code>","text":"<pre><code>&lt;change_ddd name=\"navigation\"/&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/conditions/","title":"Conditions","text":""},{"location":"dialog-domain-description-definition/domain/children/conditions/#definitions","title":"Definitions","text":"<pre><code>    &lt;has_shared_value predicate=\"p\"/&gt;\n    &lt;has_private_value predicate=\"p\"/&gt;\n    &lt;has_shared_or_private_value predicate=\"p\"/&gt;\n    &lt;is_shared_commitment predicate=\"p\" value=\"x\"/&gt;\n    &lt;is_private_belief predicate=\"p\" value=\"x\"/&gt;\n    &lt;is_private_belief_or_shared_commitment predicate=\"p\" value=\"x\"/&gt;\n    &lt;has_more_items predicate=\"p\"/&gt;\n    &lt;has_more_items iterator=\"i\"/&gt;\n</code></pre> <p>Conditions that evaluate to true depending on what the current beliefs of the system are.</p> Attribute Type Description predicate string Required. The value must me enumerated in the ontology. predicate string Required for the <code>has_*_value</code> conditions. The value must me enumerated in the ontology."},{"location":"dialog-domain-description-definition/domain/children/conditions/#parents","title":"Parents","text":"<ul> <li>&lt;downdate_condition&gt;</li> <li>&lt;if&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/conditions/#children","title":"Children","text":"<ul> <li>None</li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/conditions/#behaviour","title":"Behaviour","text":"<p>The <code>has_*_value</code> conditions evaluate to true if there is a proposition in either shared commitments or in private beliefs or in any of them, depending on the actual condition.</p> <p>The <code>is_*</code> conditions evaluate to true if the proposition specified in the attributes is to be found in in either shared commitments or in private beliefs or in any of them, depending on the actual condition.</p> <p>The <code>has_more_items</code> condition checks if an enumeration &lt;query&gt; or an &lt;iterator&gt;has more items.</p>"},{"location":"dialog-domain-description-definition/domain/children/conditions/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/domain/children/conditions/#is_shared_commitment","title":"<code>is_shared_commitment</code>:","text":"<p>This condition will evaluate to <code>true</code> if it is known by the user and the system that the flight is late.</p> <pre><code>&lt;is_shared_commitment predicate=\"flight_departure\" value=\"late\"/&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/conditions/#is_private_belief","title":"<code>is_private_belief</code>:","text":"<p>This condition will evaluate to <code>true</code> if it is known only by the system that the flight is late.</p> <pre><code>&lt;is_private_belief predicate=\"flight_departure\" value=\"late\"/&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/conditions/#is_private_belief_or_shared_commitment","title":"<code>is_private_belief_or_shared_commitment</code>:","text":"<p>This condition will evaluate to <code>true</code> if it is known, possibly only by the system, whether the flight is late or not.</p> <pre><code>&lt;is_private_belief_or_shared_commitment predicate=\"flight_departure\" value=\"late\"/&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/conditions/#has_shared_value","title":"<code>has_shared_value</code>:","text":"<p>This condition will evaluate to <code>true</code> if it is known by the user and the system whether the flight is late or not.</p> <pre><code>&lt;has_shared_value predicate=\"flight_departure\"/&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/conditions/#has_private_value","title":"<code>has_private_value</code>:","text":"<p>This condition will evaluate to <code>true</code> if it is known by the system but not by the user whether the flight is late or not.</p> <pre><code>&lt;has_private_value predicate=\"flight_departure\"/&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/conditions/#has_shared_or_private_value","title":"<code>has_shared_or_private_value</code>:","text":"<p>This condition will evaluate to <code>true</code> if it is known, possibly only by the system, whether the flight is late or not.</p> <pre><code>&lt;has_shared_or_private_value predicate=\"flight_departure\"/&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/conditions/#has_more_items-query","title":"<code>has_more_items</code>, query:","text":"<p>This condition will evaluate to <code>true</code> if an enumeration query has not yet reached its last element.</p> <pre><code>&lt;has_more_items predicate=\"possible_destination_city\"/&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/conditions/#has_more_items-iterator","title":"<code>has_more_items</code>, iterator:","text":"<p>This condition will evaluate to <code>true</code> if an iterator has not yet reached its last element.</p> <pre><code>&lt;has_more_items iterator=\"nice_destinations_in_mongolia\"/&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/downdate_condition/","title":"Downdate Condition","text":""},{"location":"dialog-domain-description-definition/domain/children/downdate_condition/#definition","title":"Definition","text":"<pre><code>&lt;downdate_condition&gt;\n</code></pre> <p>The element that specifies the conditions for downdating a particular perform goal. Downdating in TDM lingo means that the goal has been fulfilled, and that the plan can be stopped from executing.</p> Attribute Type Description"},{"location":"dialog-domain-description-definition/domain/children/downdate_condition/#parents","title":"Parents","text":"<ul> <li>&lt;goal&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/downdate_condition/#children","title":"Children","text":"<ul> <li>[&lt;has_shared_value&gt;] (/dialog-domain-description-definition/domain/children/conditions)</li> <li>[&lt;has_private_value&gt;] (/dialog-domain-description-definition/domain/children/conditions)</li> <li>[&lt;has_shared_or_private_value&gt;] (/dialog-domain-description-definition/domain/children/conditions)</li> <li>[&lt;is_shared_commitment&gt;] (/dialog-domain-description-definition/domain/children/conditions)</li> <li>[&lt;is_private_belief&gt;] (/dialog-domain-description-definition/domain/children/conditions)</li> <li>[&lt;is_private_belief_or_shared_commitment&gt;] (/dialog-domain-description-definition/domain/children/conditions)</li> <li>&lt;proposition&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/downdate_condition/#behaviour","title":"Behaviour","text":"<p>If the condition embedded in a downdate_condition element evaluates to true, the goal is considered to be fulfilled, and the goal is downdated -- which means that the plan associated with the goal will no longer be running. More than one downdate_condition can be specified for each goal. If more than one condition is present, they will be treated as a logical or: any condition evaluated to true is enough for downdating the goal.</p>"},{"location":"dialog-domain-description-definition/domain/children/downdate_condition/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/domain/children/downdate_condition/#downdate-condition-for-defining-that-once-the-departure-time-of-a-flight-is-known-the-goal-is-considered-to-be-fulfilled","title":"Downdate Condition for defining that once the departure time of a flight is known, the goal is considered to be fulfilled:","text":"<pre><code>&lt;downdate_condition&gt;\n    &lt;has_shared_value predicate=\"flight_departure\"/&gt;\n&lt;/downdate_condition&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/downdate_condition/#downdate-condition-for-defining-that-if-the-flight-departure-is-late-the-goal-is-considered-to-be-fulfilled","title":"Downdate Condition for defining that if the flight departure is late, the goal is considered to be fulfilled:**","text":"<pre><code>&lt;downdate_condition&gt;\n    &lt;is_shared_commitment predicate=\"flight_departure\" value=\"late\"/&gt;\n&lt;/downdate_condition&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/end_turn/","title":"Inform","text":""},{"location":"dialog-domain-description-definition/domain/children/end_turn/#definition","title":"Definition","text":"<pre><code>    &lt;end_turn expected_passivity=\"1.0\"/&gt;\n</code></pre> <p>The plan item that hands turn over to the user, even if TDM has more to say.</p> Attribute Type Description expected_passivity float The value of this attribute defines the number of seconds that TDM should wait for an utterance from the user before continuing the dialogue."},{"location":"dialog-domain-description-definition/domain/children/end_turn/#parents","title":"Parents","text":"<ul> <li>plan&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/end_turn/#children","title":"Children","text":"<p>None</p>"},{"location":"dialog-domain-description-definition/domain/children/end_turn/#behaviour","title":"Behaviour","text":"<p>The <code>&lt;end_turn/&gt;</code> element makes the system hand over the turn to the system even if TDM has more things to say. The client will then wait for the number of seconds specified in the <code>expected_passivity</code> attribute, before continuing the dialogue. This is not intended for changing the expected passivity value in cases when the turn is handed to the user according to the DME logic, but only for handing over the turn where it shouldn't happen otherwise.</p> <p>Note that TDM may generate utterances that are not a direct consequence of an item of the plan. This means that the turn is not guaranteed to be handed over to the user at a particular moment in the dialogue, only that turn is handed over when that plan item is processed.</p>"},{"location":"dialog-domain-description-definition/domain/children/end_turn/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/domain/children/end_turn/#end-turn-with-the-expected-passivity-of-one-second","title":"End turn with the expected passivity of one second","text":"<pre><code>&lt;end_turn expected_passivity=\"1.0\"/&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/findout/","title":"Findout","text":""},{"location":"dialog-domain-description-definition/domain/children/findout/#definition","title":"Definition","text":"<pre><code>&lt;findout question_type=\"type\" predicate=\"p\"&gt;\n</code></pre> <p>The element defines a question that should be answered, either by the user, or by some service connected to TDM capable of answering it.</p> Attribute Type Description question_type string Optional. Defaults to <code>wh_question</code>, but can be one of <code>goal</code>, <code>wh_question</code>, <code>alt_question</code> or <code>yn_question</code>. predicate string Optional. Required if question_type is <code>wh_question</code> or <code>yn_question</code>. allow_answer_from_pcom string Optional. Defaults to <code>false</code>. If set to <code>true</code>, this allows TDM to recycle an old answer that the user has previously provided."},{"location":"dialog-domain-description-definition/domain/children/findout/#parents","title":"Parents","text":"<ul> <li>&lt;plan&gt;</li> <li>&lt;postplan&gt;</li> <li>&lt;then&gt;</li> <li>&lt;else&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/findout/#children","title":"Children","text":"<ul> <li>&lt;alt&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/findout/#behaviour","title":"Behaviour","text":""},{"location":"dialog-domain-description-definition/domain/children/findout/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/domain/children/findout/#a-findout-to-ask-the-user-what-they-want-to-do","title":"A findout to ask the user what they want to do","text":"<pre><code>  &lt;findout type=\"goal\"/&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/findout/#a-findout-for-a-wh-question-which-colour-would-you-like","title":"A findout for a WH question, \"which colour would you like?\"","text":"<pre><code>  &lt;findout type=\"wh_question\" predicate=\"colour\"/&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/findout/#a-findout-for-a-yesno-question-would-you-like-some-fries-with-that","title":"A findout for a Yes/No question, \"Would you like some fries with that?\"","text":"<pre><code>  &lt;findout type=\"yn_question\" predicate=\"side_order_fries\"/&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/findout/#a-findout-for-a-wh-question-what-is-your-destination-where-the-answer-can-be-recycled-from-old-answers","title":"A findout for a WH question, \"What is your destination?\", where the answer can be recycled from old answers","text":"<pre><code>  &lt;findout type=\"wh_question\" predicate=\"destination\" allow_answer_from_pcom=\"true\"/&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/findout/#a-findout-for-an-alt-question-would-you-like-to-calculate-the-monthly-payment-or-would-you-like-to-know-the-interest-rate","title":"A findout for an alt question, \"Would you like to calculate the monthly payment or would you like to know the interest rate?\"","text":"<pre><code>&lt;findout type=\"alt_question\"&gt;\n    &lt;alt&gt;\n        &lt;resolve type=\"wh_question\" predicate=\"monthly_payment\"/&gt;\n    &lt;/alt&gt;\n    &lt;alt&gt;\n        &lt;resolve type=\"wh_question\" predicate=\"interest_rate\"/&gt;\n    &lt;/alt&gt;\n&lt;/findout&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/findout/#a-findout-for-a-yesno-question-should-i-connect-you","title":"A findout for a yes/no question, \"Should I connect you?\"","text":"<pre><code>&lt;findout type=\"yn_question\"&gt;\n    &lt;perform action=\"do_call_contact_from_history\"/&gt;\n&lt;/findout&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/forget/","title":"Forget","text":""},{"location":"dialog-domain-description-definition/domain/children/forget/#definition","title":"Definition","text":"<pre><code>&lt;forget predicate=\"some_predicate\"/&gt;\n</code></pre> <p>or</p> <pre><code>&lt;forget&gt;\n    &lt;proposition predicate=\"some_predicate\" value=\"some_indvidual\"/&gt;\n&lt;/forget&gt;\n</code></pre> <p>The plan item that makes the system forget either a particular proposition or all propositions of a certain predicate.</p> Attribute Type Description predicate string The predicate of the proposition(s) that should be forgotten."},{"location":"dialog-domain-description-definition/domain/children/forget/#parents","title":"Parents","text":"<ul> <li>&lt;plan&gt;</li> <li>&lt;postplan&gt;</li> <li>&lt;then&gt;</li> <li>&lt;else&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/forget/#children","title":"Children","text":"<ul> <li>&lt;proposition&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/forget/#behaviour","title":"Behaviour","text":"<p>If a predicate is given as an attribute of the element and the element has no children, all propositions of that predicate will be forgotten. If the element has a propositional child, that proposition will be forgotten.</p>"},{"location":"dialog-domain-description-definition/domain/children/forget/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/domain/children/forget/#forget-all-propositions-of-the-predicate-colour","title":"Forget all propositions of the predicate <code>colour</code>","text":"<pre><code>&lt;forget predicate=\"colour\"/&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/forget/#examples_1","title":"Examples","text":""},{"location":"dialog-domain-description-definition/domain/children/forget/#forget-the-proposition-that-has-the-predicate-means_of_transport-and-the-value-train","title":"Forget the proposition that has the predicate <code>means_of_transport</code> and the value <code>train</code>","text":"<pre><code>&lt;forget&gt;\n    &lt;proposition predicate=\"means_of_transport\" value=\"train\"/&gt;\n&lt;/forget&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/forget_all/","title":"Forget All","text":""},{"location":"dialog-domain-description-definition/domain/children/forget_all/#definition","title":"Definition","text":"<pre><code>&lt;forget_all/&gt;\n</code></pre> <p>The plan item that makes the system forget all and start from the beginning.</p> Attribute Type Description None."},{"location":"dialog-domain-description-definition/domain/children/forget_all/#parents","title":"Parents","text":"<ul> <li>&lt;plan&gt;</li> <li>&lt;postplan&gt;</li> <li>&lt;then&gt;</li> <li>&lt;else&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/forget_all/#children","title":"Children","text":"<p>None.</p>"},{"location":"dialog-domain-description-definition/domain/children/forget_all/#behaviour","title":"Behaviour","text":"<p>Forget All makes the system forget all and restart.</p> <ul> <li>The plan is cleared</li> <li>The system beliefs are cleared</li> <li>The shared commitments (what the system thinks that the system and the user have agreed upon) are cleared</li> <li>The goals stack is emptied</li> <li>The \"top\" goal is pushed on the goals stack</li> <li>Any traces of previous utterances are cleared</li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/forget_all/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/domain/children/forget_all/#forget-all_1","title":"Forget All","text":"<pre><code>&lt;forget_all/&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/forget_shared/","title":"Forget Shared","text":""},{"location":"dialog-domain-description-definition/domain/children/forget_shared/#definition","title":"Definition","text":"<pre><code>&lt;forge_shared predicate=\"some_predicate\"/&gt;\n</code></pre> <p>or</p> <pre><code>&lt;forget_shared&gt;\n    &lt;proposition predicate=\"some_predicate\" value=\"some_indvidual\"/&gt;\n&lt;/forget_shared&gt;\n</code></pre> <p>The plan item that makes the system forget shared commitments that consist of either a particular proposition or all propositions of a certain predicate. This means no changes to the system's beliefs i.e. all propositions in private beliefs remain.</p> Attribute Type Description predicate string The predicate of the proposition(s) that should be forgotten."},{"location":"dialog-domain-description-definition/domain/children/forget_shared/#parents","title":"Parents","text":"<ul> <li>&lt;plan&gt;</li> <li>&lt;postplan&gt;</li> <li>&lt;then&gt;</li> <li>&lt;else&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/forget_shared/#children","title":"Children","text":"<ul> <li>&lt;proposition&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/forget_shared/#behaviour","title":"Behaviour","text":"<p>If a predicate is given as an attribute of the element and the element has no children, all propositions of that predicate will be forgotten from shared commitments. If the element has a propositional child, that proposition will be forgotten.</p>"},{"location":"dialog-domain-description-definition/domain/children/forget_shared/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/domain/children/forget_shared/#forget-all-propositions-of-the-predicate-colour","title":"Forget all propositions of the predicate <code>colour</code>","text":"<pre><code>&lt;forget_shared predicate=\"colour\"/&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/forget_shared/#examples_1","title":"Examples","text":""},{"location":"dialog-domain-description-definition/domain/children/forget_shared/#forget-the-proposition-that-has-the-predicate-means_of_transport-and-the-value-train","title":"Forget the proposition that has the predicate <code>means_of_transport</code> and the value <code>train</code>","text":"<pre><code>&lt;forget_shared&gt;\n    &lt;proposition predicate=\"means_of_transport\" value=\"train\"/&gt;\n&lt;/forget_shared&gt;&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/get_done/","title":"Get Done","text":""},{"location":"dialog-domain-description-definition/domain/children/get_done/#definition","title":"Definition","text":"<pre><code>&lt;get_done action=\"alpha\"&gt;\n</code></pre> <p>The element defines an action that the system should request the user to carry out.</p> Attribute Type Description action string Required. The action that is requested from the user."},{"location":"dialog-domain-description-definition/domain/children/get_done/#parents","title":"Parents","text":"<ul> <li>&lt;plan&gt;</li> <li>&lt;postplan&gt;</li> <li>&lt;then&gt;</li> <li>&lt;else&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/get_done/#children","title":"Children","text":"<ul> <li>&lt;alt&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/get_done/#behaviour","title":"Behaviour","text":"<p>This plan item is considered as finished when the user has reported that the action is done.</p>"},{"location":"dialog-domain-description-definition/domain/children/get_done/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/domain/children/get_done/#a-get_done-to-request-that-the-user-adds-water","title":"A get_done to request that the user adds water","text":"<pre><code>  &lt;get_done action=\"add_water\"/&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/hint/","title":"Hint","text":""},{"location":"dialog-domain-description-definition/domain/children/hint/#definition","title":"Definition","text":"<pre><code>&lt;hint&gt;\n</code></pre> <p>Defining a hint that should be given to the user in case they answer <code>icm:acc*neg</code> to a particular question.</p> Attribute Type Description None"},{"location":"dialog-domain-description-definition/domain/children/hint/#parents","title":"Parents","text":"<ul> <li>&lt;parameters&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/hint/#children","title":"Children","text":"<ul> <li>&lt;inform&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/hint/#behaviour","title":"Behaviour","text":"<p>The <code>hint</code> parameter in a parameter set is presented to the user in case they reply to a question with an <code>icm:acc*neg</code> move, before the question is asked again. If there are more than one <code>hint</code> defined, they will be given in order, and when the last hint is reached, that hint will be repeated until the user answers the question. The children of a hint element can be any plan item, but it is recommended that the <code>inform</code> plan item is used, as this is the only one thoroughly tested.</p>"},{"location":"dialog-domain-description-definition/domain/children/hint/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/domain/children/hint/#two-hint-elements-for-wh-question","title":"Two hint elements for wh-question","text":"<p>Code for giving two hints to the user if they say that they don't know the ingredient quantity wh-question.</p> <pre><code>  &lt;parameters predicate=\"ingredient_quantity\"&gt;\n    &lt;hint&gt;\n      &lt;inform insist=\"true\"&gt;\n          &lt;proposition predicate=\"helpful_information\" value=\"ingredient_quantity_hint_1\"/&gt;\n      &lt;/inform&gt;\n    &lt;/hint&gt;\n    &lt;hint&gt;\n      &lt;inform insist=\"true\"&gt;\n          &lt;proposition predicate=\"helpful_information\" value=\"ingredient_quantity_hint_2\"/&gt;\n      &lt;/inform&gt;\n    &lt;/hint&gt;\n  &lt;/parameters&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/hint/#single-hint-element-for-yesno-question","title":"Single hint element for yes/no-question","text":"<p>Code for giving single hint to the user if they say that they don't know the added water yes/no-question.</p> <pre><code>  &lt;parameters question_type=\"yn_question\" predicate=\"added_water\"&gt;\n    &lt;hint&gt;\n      &lt;inform insist=\"true\"&gt;\n          &lt;proposition predicate=\"helpful_information\" value=\"added_water_hint\"/&gt;\n      &lt;/inform&gt;\n    &lt;/hint&gt;\n  &lt;/parameters&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/if/","title":"If Then Else","text":""},{"location":"dialog-domain-description-definition/domain/children/if/#definition","title":"Definition","text":"<pre><code>&lt;if&gt;\n    &lt;proposition .../&gt;\n    &lt;then&gt;\n        ...\n    &lt;/then&gt;\n    &lt;else&gt;\n    ...\n    &lt;/else&gt;\n&lt;/if&gt;\n</code></pre> <p>An if then else element for branching plans. The <code>if</code> element can be used recursively. Both the <code>then</code> and <code>else</code> elements are optional (but to be meaningful at least one is needed).</p>"},{"location":"dialog-domain-description-definition/domain/children/if/#parents","title":"Parents","text":"<ul> <li>&lt;plan&gt;</li> <li>&lt;postplan&gt;</li> <li>&lt;then&gt;</li> <li>&lt;else&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/if/#children","title":"Children","text":"<ul> <li>&lt;proposition&gt;</li> <li>&lt;has_private_value&gt;</li> <li>&lt;has_more_items&gt;</li> <li>&lt;has_shared_or_private_value&gt;</li> <li>&lt;has_shared_value&gt;</li> <li>&lt;is_private_belief&gt;</li> <li>&lt;is_private_belief_or_shared_commitment&gt;</li> <li>&lt;is_shared_commitment&gt;</li> <li>&lt;then&gt;/&lt;else&gt;<ul> <li>&lt;assume_issue&gt;</li> <li>&lt;assume_shared&gt;</li> <li>&lt;assume_system_belief&gt;</li> <li>&lt;bind&gt;</li> <li>&lt;end_turn&gt;</li> <li>&lt;findout&gt;</li> <li>&lt;forget&gt;</li> <li>&lt;forget_shared&gt;</li> <li>&lt;forget_all&gt;</li> <li>&lt;get_done&gt;</li> <li>&lt;hint&gt;</li> <li>&lt;if&gt;</li> <li>&lt;inform&gt;</li> <li>&lt;invoke_service_action&gt;</li> <li>&lt;invoke_service_query&gt;</li> <li>&lt;jumpto&gt;</li> <li>&lt;log&gt;</li> <li>&lt;raise&gt;</li> <li>&lt;signal_action_completion&gt;</li> <li>&lt;signal_action_failure&gt;</li> </ul> </li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/if/#behaviour","title":"Behaviour","text":""},{"location":"dialog-domain-description-definition/domain/children/if/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/domain/children/if/#ifthenelse-element-for-jumping-to-another-goal-if-there-is-a-proposition-in-commitments-with-a-certain-predicate","title":"If/Then/Else element for jumping to another goal if there is a proposition in commitments with a certain predicate","text":"<pre><code>&lt;if&gt;\n  &lt;has_shared_value predicate=\"sourdough_status\"/&gt;\n  &lt;then&gt;\n    &lt;jumpto action=\"freshen_up_sourdough\"/&gt;\n  &lt;/then&gt;\n  &lt;else&gt;\n    &lt;jumpto action=\"start_sourdough\"/&gt;\n  &lt;/else&gt;\n&lt;/if&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/if/#ifthen-element-for-assuming-the-answer-200-g-if-the-selected-ingredient-is-water","title":"If/Then element for assuming the answer \"200 g\" if the selected ingredient is water","text":"<pre><code>&lt;if&gt;\n  &lt;is_shared_commitment predicate=\"selected_ingredient\" value=\"water_ingredient\"/&gt;\n  &lt;then&gt;\n    &lt;assume_system_belief&gt;\n      &lt;proposition predicate=\"quantity\" value=\"200 g\"/&gt;\n    &lt;/assume_system_belief&gt;\n  &lt;/then&gt;\n&lt;/if&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/if/#ifthen-element-for-assuming-the-answer-200-g-if-the-selected-ingredient-is-water-either-in-commitments-or-in-beliefs","title":"If/Then element for assuming the answer \"200 g\" if the selected ingredient is water (either in commitments or in beliefs)","text":"<pre><code>&lt;if&gt;\n  &lt;proposition predicate=\"selected_ingredient\" value=\"water_ingredient\"/&gt;\n  &lt;then&gt;\n    &lt;assume_system_belief&gt;\n      &lt;proposition predicate=\"quantity\" value=\"200 g\"/&gt;\n    &lt;/assume_system_belief&gt;\n  &lt;/then&gt;\n&lt;/if&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/inform/","title":"Inform","text":""},{"location":"dialog-domain-description-definition/domain/children/inform/#definition","title":"Definition","text":"<pre><code>&lt;inform&gt;\n  &lt;proposition predicate=\"p\" value=\"a\"/&gt;\n&lt;/inform&gt;\n</code></pre> <p>The plan item that informs the user about a proposition.</p> Attribute Type Description insist boolean Optional. If set to <code>false</code>, the system will not try to tell the user, if a proposition of the same predicate (not the same proposition) is already shared with the user. If set to <code>true</code>, the system will try to inform the user, even if a proposition of the same predicate is already shared. The default is <code>false</code> generate_end_turn boolean Optional. If set to <code>true</code>, the system will end the turn after this dialogue move. The length of the expected passivity is set using the <code>expected_passivity</code> attribute. The default is <code>false</code>. expected_passivity float The value of this attribute defines the number of seconds that TDM should wait for an utterance from the user before continuing the dialogue. It defaults to 0.0 seconds."},{"location":"dialog-domain-description-definition/domain/children/inform/#parents","title":"Parents","text":"<ul> <li>&lt;else&gt;</li> <li>&lt;hint&gt;</li> <li>&lt;plan&gt;</li> <li>&lt;postplan&gt;</li> <li>&lt;then&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/inform/#children","title":"Children","text":"<ul> <li>&lt;proposition&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/inform/#behaviour","title":"Behaviour","text":"<p>The <code>&lt;inform/&gt;</code> element makes the system believe a proposition <code>p(a)</code>, and then also assume that the issue of <code>?X.p(X)</code> is under discussion. This means that the system will try to inform the user that <code>p(a)</code>, unless this is already known by the user. It is required that the proposition is of a predicate defined in the ontology (i.e. goal propositions etc... are not supported).</p> <p>The same behaviour can be obtained by the following code: <pre><code>&lt;if&gt;\n  &lt;proposition predicate=\"p\" value=\"a\"/&gt;\n  &lt;else&gt;\n    &lt;assume_system_belief&gt;\n      &lt;proposition predicate=\"p\" value=\"a\"/&gt;\n    &lt;/assume_system_belief&gt;\n    &lt;assume_issue predicate=\"p\"/&gt;\n  &lt;/else&gt;\n&lt;/if&gt;\n</code></pre></p> <p>Setting the attribute <code>insist</code>to true means that TDM will always make the utterance, regardless if a proposition over the same predicate is already known.</p> <p>Setting the attribute <code>generate_end_turn</code> to true means that TDM will generate the equivalent of an <code>&lt;end_turn&gt;</code>element, making sure that the current turn will be ended after this move.</p> <p>NB! If you want to use several inform items in the same plan, make sure that they are referring to different predicates, as they will otherwise interfere with each other.</p>"},{"location":"dialog-domain-description-definition/domain/children/inform/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/domain/children/inform/#inform-element-for-telling-the-user-that-the-first-name-is-charlie","title":"Inform element for telling the user that the first name is \"Charlie\"","text":"<pre><code>&lt;inform&gt;\n    &lt;proposition predicate=\"first_name\" value=\"Charlie\"/&gt;\n&lt;/inform&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/inform/#inform-element-for-telling-the-user-that-the-first-name-is-charlie-followed-by-3-seconds-of-passivity","title":"Inform element for telling the user that the first name is \"Charlie\" followed by 3 seconds of passivity","text":"<pre><code>&lt;inform generate_end_turn=\"true\" expected_passivity=\"3.0\"&gt;\n    &lt;proposition predicate=\"first_name\" value=\"Charlie\"/&gt;\n&lt;/inform&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/inform/#inform-element-for-telling-the-user-that-the-first-name-is-charlie-followed-by-a-00-second-passivity","title":"Inform element for telling the user that the first name is \"Charlie\" followed by a 0.0 second passivity.","text":"<pre><code>&lt;inform generate_end_turn=\"true\"&gt;\n    &lt;proposition predicate=\"first_name\" value=\"Charlie\"/&gt;\n&lt;/inform&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/invoke_domain_query/","title":"Invoke Domain Query","text":""},{"location":"dialog-domain-description-definition/domain/children/invoke_domain_query/#definition","title":"Definition","text":"<pre><code>&lt;invoke_domain_query type=\"wh_question\" predicate=\"p\"/&gt;\n</code></pre> <p>Calls for an query to be sent to the domain. Currently only works for unary propositions.</p> Attribute Type Description predicate string Required if type=\"wh_question\". This attribute specifies the predicate of the question sent to the domain."},{"location":"dialog-domain-description-definition/domain/children/invoke_domain_query/#parents","title":"Parents","text":"<ul> <li>&lt;plan&gt;</li> <li>&lt;postplan&gt;</li> <li>&lt;then&gt;</li> <li>&lt;else&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/invoke_domain_query/#children","title":"Children","text":"<p>None</p>"},{"location":"dialog-domain-description-definition/domain/children/invoke_domain_query/#behaviour","title":"Behaviour","text":"<p>An  element calls for a query to be sent to the currently active domain, which will invoke the query defined in &lt;query&gt;.</p>"},{"location":"dialog-domain-description-definition/domain/children/invoke_domain_query/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/domain/children/invoke_domain_query/#invoke-domain-query-for-getting-the-price-of-a-trip","title":"Invoke domain query for getting the price of a trip.","text":"<pre><code>&lt;invoke_domain_query type=\"wh_question\" predicate=\"price\"/&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/invoke_service_action/","title":"Invoke Service Action","text":""},{"location":"dialog-domain-description-definition/domain/children/invoke_service_action/#definition","title":"Definition","text":"<pre><code>&lt;invoke-service-action name=\"alpha\"&gt;\n</code></pre> <p>Calls for an action to be performed by a service.</p> Attribute Type Description name string Required. The name of the Action as defined in the Service Interface. preconfirm string Optional. Can be set to  \"assertive\" or \"interrogative\". If defined, causes system to ask for a  confirmation from the user before performing the action. postconfirm boolean Optional. If set to `True', causes the system to report on the status of the action downdate_plan boolean Optional. If set to `True', causes the system to regard the action as done once the device has been called to carry out the action."},{"location":"dialog-domain-description-definition/domain/children/invoke_service_action/#parents","title":"Parents","text":"<ul> <li>&lt;plan&gt;</li> <li>&lt;postplan&gt;</li> <li>&lt;then&gt;</li> <li>&lt;else&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/invoke_service_action/#children","title":"Children","text":"<p>None.</p>"},{"location":"dialog-domain-description-definition/domain/children/invoke_service_action/#behaviour","title":"Behaviour","text":"<p>An  element calls for an action to be performed by a service. The action needs to be defined by the Service Interface.</p> <p>If defined, the  `preconfirm' attribute causes system to give the user the opportunity to confirm (or abort) an action before  it is performed. Can be set to  \"assertive\" (e.g., \"Do you want to call John\") or \"interrogative\" (e.g. \"I will call John\"), depending on whether the preconfirmation should take the form of an assertion (which the user can respond, but if they do not, the system will go ahead and perform the action) or a question (requiring an answer from the user). The natural language form of the preconfirmation is defined in the grammar, see Preconfirm. The natural language form can be configured to include parameters of the action.</p> <p>If set to <code>True', the</code>postconfirm' attribute causes the system to report on the status of the action after calling on the device to carry out the action. The natural language form of the postconfirmation is defined in the grammar, see Report.</p> <p>If set to `True', the 'downdate_plan' element causes the system to regard the action as done once the device has been called to carry out the action. Otherwise, it will not regard the action as done until it has been explicitly reported to be done. The latter may be useful for actions that need to succeed.</p>"},{"location":"dialog-domain-description-definition/domain/children/invoke_service_action/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/domain/children/invoke_service_action/#invoke-service-action-entry-for-calling-a-person-first-confirming-that-the-parameters-are-correct-and-reporting-again-when-the-call-has-been-made","title":"Invoke service action entry for calling a person, first confirming that the parameters are correct, and reporting again when the call has been made:","text":"<pre><code>&lt;invoke_service_action name=\"Call\" preconfirm=interrogative postconfirm=True downdate_plan=False/&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/invoke_service_query/","title":"Invoke Service Query","text":""},{"location":"dialog-domain-description-definition/domain/children/invoke_service_query/#definition","title":"Definition","text":"<pre><code>&lt;invoke_service_query type=\"wh_question\" predicate=\"p\"/&gt;\n</code></pre> <pre><code>&lt;invoke_service_query type=\"yn_question\"&gt;\n  &lt;proposition predicate=\"p\"&gt;\n&lt;/invoke_service_query&gt;\n</code></pre> <p>Calls for an query to be sent to a service.</p> Attribute Type Description type string Optinal. Defaults to <code>wh_question</code>, but can be one of <code>wh_question</code> or <code>yn_question</code>. predicate string Required if type=\"wh_question\". This attribute specifies the predicate of the question sent to the service."},{"location":"dialog-domain-description-definition/domain/children/invoke_service_query/#parents","title":"Parents","text":"<ul> <li>&lt;plan&gt;</li> <li>&lt;postplan&gt;</li> <li>&lt;then&gt;</li> <li>&lt;else&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/invoke_service_query/#children","title":"Children","text":"<ul> <li>&lt;proposition&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/invoke_service_query/#behaviour","title":"Behaviour","text":"<p>An  element calls for a query to be sent to a service, which (if successful) returns an answer.</p> <p>The answer first becomes known to the system, and if the system knows the answer and the question is a goal question, this will trigger the system providing the answer to the user.</p>"},{"location":"dialog-domain-description-definition/domain/children/invoke_service_query/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/domain/children/invoke_service_query/#invoke-service-query-for-getting-the-price-of-a-trip","title":"Invoke service query for getting the price of a trip.","text":"<pre><code>&lt;invoke_service_query type=\"wh_question\" predicate=\"price\"/&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/invoke_service_query/#invoke-service-query-for-checking-if-a-person-needs-a-visa","title":"Invoke service query for checking if a person needs a visa.","text":"<pre><code>&lt;invoke_service_query type=\"yn_question\"&gt;\n  &lt;proposition predicate=\"need_visa\"/&gt;\n&lt;/invoke_service_query&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/iterate/","title":"Iterate","text":""},{"location":"dialog-domain-description-definition/domain/children/iterate/#definition","title":"Definition","text":"<pre><code>&lt;iterate iterator=\"identifier\"/&gt;\n</code></pre> <p>Iterate over the propositions enumerated in the &lt;iterator&gt;.</p> Attribute Type Description iterator string The name of the iterator referenced."},{"location":"dialog-domain-description-definition/domain/children/iterate/#parents","title":"Parents","text":"<ul> <li>&lt;plan&gt;</li> <li>&lt;postplan&gt;</li> <li>&lt;then&gt;</li> <li>&lt;else&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/iterate/#children","title":"Children","text":"<p>None</p>"},{"location":"dialog-domain-description-definition/domain/children/iterate/#behaviour","title":"Behaviour","text":"<p>An  element will make TDM assume one proposition at a time from the propositions enumerated in the &lt;iterator&gt; referenced. When the iteration is finished, testing the &lt;condition&gt; <code>has_more_items</code> will return <code>false</code>. If iteration continues, the test will return <code>true</code> until iteration is again finished.</p>"},{"location":"dialog-domain-description-definition/domain/children/iterate/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/domain/children/iterate/#iterate-over-nice-destinations","title":"iterate over nice destinations","text":"<pre><code>&lt;iterate iterator=\"nice_destinations\"/&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/iterate/#examples_1","title":"Examples","text":""},{"location":"dialog-domain-description-definition/domain/children/iterate/#iterate-over-nice-destinations_1","title":"iterate over nice destinations","text":"<p>If destination is paris, inform that we'll see the eiffel tower. When the iteration is done, we'll exit the plan.</p> <pre><code>    &lt;plan&gt;\n      &lt;iterate iterator=\"nice_destinations\"/&gt;\n      &lt;if&gt;\n        &lt;proposition predicate=\"destination\" value=\"paris\"/&gt;\n        &lt;then&gt;\n          &lt;inform insist=\"true\"&gt;\n            &lt;proposition predicate=\"info\" value=\"we'll see the eiffel tower\"/&gt;\n          &lt;/inform&gt;\n        &lt;/then&gt;\n      &lt;/if&gt;\n      &lt;if&gt;\n        &lt;has_more_items iterator=\"nice_destinations\"/&gt;\n        &lt;else&gt;\n          &lt;signal_action_completion/&gt;\n        &lt;/else&gt;\n      &lt;/if&gt;\n    &lt;/plan&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/log/","title":"Log","text":""},{"location":"dialog-domain-description-definition/domain/children/log/#definition","title":"Definition","text":"<pre><code>&lt;log message=\"This is a log message\"&gt;\n</code></pre> <p>The plan item logs a message on DEBUG level.</p> Attribute Type Description message string Required. The value of the message attribute is currently the only thing that is logged."},{"location":"dialog-domain-description-definition/domain/children/log/#parents","title":"Parents","text":"<ul> <li>&lt;plan&gt;</li> <li>&lt;postplan&gt;</li> <li>&lt;then&gt;</li> <li>&lt;else&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/log/#children","title":"Children","text":"<p>None</p>"},{"location":"dialog-domain-description-definition/domain/children/log/#behaviour","title":"Behaviour","text":"<p>Using the  element will log the message on debug level. The log entry will contain the following: <pre><code>{\n    \"message\": \"This is a log message\",\n    \"event\": \"Executing &lt;log&gt; element in domain.xml\"\n}\n</code></pre></p>"},{"location":"dialog-domain-description-definition/domain/children/log/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/domain/children/log/#log-element-for-logging-a-string","title":"Log element for logging a string:","text":"<pre><code>&lt;log message=\"This is a log message\"&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/once/","title":"Once","text":""},{"location":"dialog-domain-description-definition/domain/children/once/#definition","title":"Definition","text":"<pre><code>&lt;once&gt;\n...\n&lt;/once&gt;\n</code></pre> <p>A part of a dialogue plan, consisting of a sequence of plan items, which is run only once.</p>"},{"location":"dialog-domain-description-definition/domain/children/once/#parents","title":"Parents","text":"<ul> <li>&lt;plan&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/once/#children","title":"Children","text":"<ul> <li>&lt;assume_issue&gt;</li> <li>&lt;assume_shared&gt;</li> <li>&lt;assume_system_belief&gt;</li> <li>&lt;bind&gt;</li> <li>&lt;findout&gt;</li> <li>&lt;forget&gt;</li> <li>&lt;forget_all&gt;</li> <li>&lt;get_done&gt;</li> <li>&lt;if&gt;</li> <li>&lt;inform&gt;</li> <li>&lt;invoke_service_action&gt;</li> <li>&lt;invoke_service_query&gt;</li> <li>&lt;jumpto&gt;</li> <li>&lt;log&gt;</li> <li>&lt;raise&gt;</li> <li>&lt;signal_action_completion&gt;</li> <li>&lt;signal_action_failure&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/once/#behaviour","title":"Behaviour","text":"<p>The plan items inside this element will be run only once. After the \"once\" element has been run, TDM will keep track of it and make sure that it isn't run again until the session is restarted or until a &lt;forget_all&gt; item is executed.</p> <p>There is nothing that prohibits using the once element inside another once element, but it is not intended, and the consequences are unknown.</p>"},{"location":"dialog-domain-description-definition/domain/children/once/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/domain/children/once/#plan-for-asking-a-sequence-of-questions-and-getting-the-price-of-a-trip","title":"Plan for asking a sequence of questions and getting the price of a trip.","text":"<pre><code>&lt;plan&gt;\n  &lt;once&gt;\n    &lt;inform&gt;\n      &lt;proposition predicate=\"info\" value=\"Listen carefully! I will say this only once!\"/&gt;\n    &lt;/inform&gt;\n  &lt;/once&gt;\n  &lt;inform&gt;\n    &lt;proposition predicate=\"other_info\" value=\"I will say this any time I get the chance!\"/&gt;\n  &lt;/inform&gt;\n&lt;/plan&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/plan/","title":"Plan","text":""},{"location":"dialog-domain-description-definition/domain/children/plan/#definition","title":"Definition","text":"<pre><code>&lt;plan&gt;\n...\n&lt;/plan&gt;\n</code></pre> <p>A dialogue plan, consisting of a sequence of plan items.</p>"},{"location":"dialog-domain-description-definition/domain/children/plan/#parents","title":"Parents","text":"<ul> <li>&lt;goal&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/plan/#children","title":"Children","text":"<ul> <li>&lt;assume_issue&gt;</li> <li>&lt;assume_shared&gt;</li> <li>&lt;assume_system_belief&gt;</li> <li>&lt;bind&gt;</li> <li>&lt;findout&gt;</li> <li>&lt;forget&gt;</li> <li>&lt;forget_all&gt;</li> <li>&lt;get_done&gt;</li> <li>&lt;if&gt;</li> <li>&lt;inform&gt;</li> <li>&lt;invoke_service_action&gt;</li> <li>&lt;invoke_service_query&gt;</li> <li>&lt;jumpto&gt;</li> <li>&lt;log&gt;</li> <li>&lt;once&gt;</li> <li>&lt;raise&gt;</li> <li>&lt;signal_action_completion&gt;</li> <li>&lt;signal_action_failure&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/plan/#behaviour","title":"Behaviour","text":"<p>To resolve questions, or perform actions, TDM executes a dialogue plan. In some cases the plan is equivalent to a form with slots and values that need to be filled, after which the requested action can be carried out, or the asked question can be answered by the system. However, dialogue plans are more powerful than forms in the kinds of dialogue behaviours they can produce.</p>"},{"location":"dialog-domain-description-definition/domain/children/plan/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/domain/children/plan/#plan-for-asking-a-sequence-of-questions-and-getting-the-price-of-a-trip","title":"Plan for asking a sequence of questions and getting the price of a trip.","text":"<pre><code>&lt;plan&gt;\n  &lt;findout type=\"wh_question\" predicate=\"means_of_transport\"/&gt;\n  &lt;findout type=\"wh_question\" predicate=\"dest_city\"/&gt;\n  &lt;findout type=\"wh_question\" predicate=\"dept_city\"/&gt;\n  &lt;findout type=\"wh_question\" predicate=\"dept_month\"/&gt;\n  &lt;findout type=\"wh_question\" predicate=\"dept_day\"/&gt;\n  &lt;findout type=\"wh_question\" predicate=\"class\"/&gt;\n  &lt;invoke_service_query type=\"wh_question\" predicate=\"price\"/&gt;\n&lt;/plan&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/postplan/","title":"Postplan","text":""},{"location":"dialog-domain-description-definition/domain/children/postplan/#definition","title":"Definition","text":"<pre><code>&lt;postplan&gt;\n...\n&lt;/postplan&gt;\n</code></pre> <p>A sequence of plan elements for bookeeping actions after a goal has been resolved, performed or downdated.</p>"},{"location":"dialog-domain-description-definition/domain/children/postplan/#parents","title":"Parents","text":"<ul> <li>&lt;goal&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/postplan/#children","title":"Children","text":"<ul> <li>&lt;assume_issue&gt;</li> <li>&lt;assume_shared&gt;</li> <li>&lt;assume_system_belief&gt;</li> <li>&lt;bind&gt;</li> <li>&lt;findout&gt;</li> <li>&lt;forget&gt;</li> <li>&lt;forget_all&gt;</li> <li>&lt;forget_shared&gt;</li> <li>&lt;get_done&gt;</li> <li>&lt;if&gt;</li> <li>&lt;inform&gt;</li> <li>&lt;invoke_service_action&gt;</li> <li>&lt;invoke_service_query&gt;</li> <li>&lt;jumpto&gt;</li> <li>&lt;log&gt;</li> <li>&lt;raise&gt;</li> <li>&lt;signal_action_completion&gt;</li> <li>&lt;signal_action_failure&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/postplan/#behaviour","title":"Behaviour","text":"<p>Immediately after a system goal has been fulfilled, the contents of a potential <code>postplan</code> element will be added to the plan in TDM. This is intended for bookkeeping tasks like assuming and forgetting propositions, possibly jumping to other plans etc.</p>"},{"location":"dialog-domain-description-definition/domain/children/postplan/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/domain/children/postplan/#postplan-for-forgetting-all-propositions-of-the-predicate-attraction","title":"Postplan for forgetting all propositions of the predicate <code>attraction</code>","text":"<pre><code>&lt;postplan&gt;\n    &lt;forget predicate=\"attraction\"/&gt;\n&lt;/postplan&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/postplan/#postplan-for-keeping-track-of-that-a-certain-plan-has-been-executed","title":"Postplan for keeping track of that a certain plan has been executed","text":"<pre><code>&lt;postplan&gt;\n    &lt;assume_system_belief predicate=\"enrollment_done\" value=\"true\"/&gt;\n&lt;/postplan&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/proposition/","title":"Proposition","text":""},{"location":"dialog-domain-description-definition/domain/children/proposition/#definition","title":"Definition","text":"<pre><code>&lt;proposition predicate=\"p\" value=\"a\"&gt;\n</code></pre> <p>The element that represents a proposition, consisting of a predicate on an individual.</p> Attribute Type Description predicate string Required. The value must be enumerated in the ontology. value string Required. The value must be known to TDM e.g. by being a static individual enumerated in the ontology."},{"location":"dialog-domain-description-definition/domain/children/proposition/#parents","title":"Parents","text":"<ul> <li>&lt;assume_shared&gt;</li> <li>&lt;assume_system_belief&gt;</li> <li>&lt;forget&gt;</li> <li>&lt;forget_shared&gt;</li> <li>&lt;has_shared_value&gt;</li> <li>&lt;has_private_value&gt;</li> <li>&lt;has_shared_or_private_value&gt;</li> <li>&lt;if&gt;</li> <li>&lt;is_shared_commitment&gt;</li> <li>&lt;is_private_belief&gt;</li> <li>&lt;is_private_belief_or_shared_commitment&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/proposition/#children","title":"Children","text":"<p>None.</p>"},{"location":"dialog-domain-description-definition/domain/children/proposition/#behaviour","title":"Behaviour","text":"<p>The proposition is used in conditional constructs in the domain language, in conditions, for assuming etc.</p>"},{"location":"dialog-domain-description-definition/domain/children/proposition/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/domain/children/proposition/#proposition-for-the-colour-blue","title":"Proposition for the colour blue:","text":"<pre><code>&lt;proposition predicate=\"color\" value=\"blue\"/&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/raise/","title":"Raise","text":""},{"location":"dialog-domain-description-definition/domain/children/raise/#definition","title":"Definition","text":"<pre><code>&lt;raise question_type=\"type\" predicate=\"p\"&gt;\n</code></pre> <p>Defines a question that should be asked. In contrast with findout, the question does not have to be answered. In contrast with bind, the question is explicitly asked.</p> Attribute Type Description question_type string Optional. Defaults to <code>wh_question</code>, but can be one of <code>goal</code>, <code>wh_question</code>, <code>alt_question</code> or <code>yn_question</code>. predicate string Optional. Required if question_type is <code>wh_question</code> or <code>yn_question</code>. allow_answer_from_pcom string Optional. Defaults to <code>false</code>. If set to <code>true</code>, this allows TDM to recycle an old answer that the user has previously provided."},{"location":"dialog-domain-description-definition/domain/children/raise/#parents","title":"Parents","text":"<ul> <li>&lt;plan&gt;</li> <li>&lt;postplan&gt;</li> <li>&lt;then&gt;</li> <li>&lt;else&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/raise/#children","title":"Children","text":"<ul> <li>&lt;alt&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/raise/#behaviour","title":"Behaviour","text":"<p>Defines a question that should be asked by the system, but not necessarily answered. Can be used for optional parameters.</p>"},{"location":"dialog-domain-description-definition/domain/children/raise/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/domain/children/raise/#a-raise-to-ask-the-user-what-they-want-to-do","title":"A raise to ask the user what they want to do","text":"<pre><code>  &lt;raise type=\"goal\"/&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/raise/#a-raise-about-a-wh-question-which-colour-would-you-like","title":"A raise about a WH question, \"which colour would you like?\"","text":"<pre><code>  &lt;raise type=\"wh_question\" predicate=\"colour\"/&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/raise/#a-raise-about-a-yesno-question-would-you-like-some-fries-with-that","title":"A raise about a Yes/No question, \"Would you like some fries with that?\"","text":"<pre><code>  &lt;raise type=\"yn_question\" predicate=\"side_order_fries\"/&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/raise/#a-raise-about-an-alt-question-would-you-like-to-calculate-the-monthly-payment-or-would-you-like-to-know-the-interest-rate","title":"A raise about an alt question, \"Would you like to calculate the monthly payment or would you like to know the interest rate?\"","text":"<pre><code>&lt;raise type=\"alt_question\"&gt;\n    &lt;alt&gt;\n        &lt;resolve type=\"wh_question\" predicate=\"monthly_payment\"/&gt;\n    &lt;/alt&gt;\n    &lt;alt&gt;\n        &lt;resolve type=\"wh_question\" predicate=\"interest_rate\"/&gt;\n    &lt;/alt&gt;\n&lt;/findout&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/service_query/","title":"Background","text":""},{"location":"dialog-domain-description-definition/domain/children/service_query/#definition","title":"Definition","text":"<pre><code>&lt;service_query predicate=\"p\"/&gt;\n</code></pre> <p>Defining that a service query to be used for incremental search.</p> Attribute Type Description Predicate String The predicate for the query that will provide the incremental search with results."},{"location":"dialog-domain-description-definition/domain/children/service_query/#parents","title":"Parents","text":"<ul> <li>&lt;parameters&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/service_query/#children","title":"Children","text":"<p>None</p>"},{"location":"dialog-domain-description-definition/domain/children/service_query/#behaviour","title":"Behaviour","text":"<p>If the parent parameter set is configured for incremental search, and if the \"source\" attribute of that parameter set is set to \"service\", then this element defines the service query that will provide the incremental search with results.</p>"},{"location":"dialog-domain-description-definition/domain/children/service_query/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/domain/children/service_query/#service-query","title":"Service query:","text":"<p>Service query for <code>available_contact_from_api</code>:</p> <pre><code>    &lt;service_query predicate=\"available_contact_from_api\"/&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/service_query/#parameter-set-with-service-query","title":"Parameter set with service query:","text":"<pre><code>    &lt;parameters question_type=\"wh_question\" predicate=\"contact_retrieved_from_api\" graphical_type=\"list\"\n              source=\"service\" incremental=\"true\" max_spoken_alts=\"5\" max_reported_hit_count=\"15\"\n              on_zero_hits_action=\"mitigate_zero_hits_from_api\"\n              on_too_many_hits_action=\"mitigate_too_many_hits_from_api\"&gt;\n    &lt;service_query predicate=\"available_contact_from_api\"/&gt;\n    &lt;ask_feature predicate=\"name_of_contact\"/&gt;\n    &lt;ask_feature predicate=\"postal_area_of_contact\" kpq=\"true\"/&gt;\n    &lt;ask_feature predicate=\"street_name_of_contact\" kpq=\"true\"/&gt;\n    &lt;ask_feature predicate=\"age_of_contact\" kpq=\"true\"/&gt;\n  &lt;/parameters&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/signal_action_completion/","title":"Signal_Action_Completion","text":""},{"location":"dialog-domain-description-definition/domain/children/signal_action_completion/#definition","title":"Definition","text":"<pre><code>&lt;signal_action_completion/&gt;\n</code></pre> <p>The plan item that will make a perform plan stop running.</p> Attribute Type Description postconfirm boolean Optional. The attribute decides if a report move (see below) should be generated when the plan is downdated. If set to <code>false</code>,  no report move is generated. Defaults to <code>true</code>."},{"location":"dialog-domain-description-definition/domain/children/signal_action_completion/#parents","title":"Parents","text":"<ul> <li>&lt;plan&gt;</li> <li>&lt;postplan&gt;</li> <li>&lt;then&gt;</li> <li>&lt;else&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/signal_action_completion/#children","title":"Children","text":"<p>None.</p>"},{"location":"dialog-domain-description-definition/domain/children/signal_action_completion/#behaviour","title":"Behaviour","text":"<p>The <code>&lt;signal_action_completion/&gt;</code> will make TDM treat the perform goal of the current plan as fulfilled. This means that the remains of the plan (if any) will not be executed, and that a report move indicating success (<code>report(action_status(some_action, done))</code>) will be output.</p>"},{"location":"dialog-domain-description-definition/domain/children/signal_action_completion/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/domain/children/signal_action_completion/#signal_action_completion-element","title":"Signal_Action_Completion element","text":"<pre><code>&lt;signal_action_completion/&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/signal_action_completion/#signal_action_completion-without-post-confirmation-of-the-goal","title":"Signal_Action_Completion without post confirmation of the goal","text":"<pre><code>&lt;signal_action_completion postconfirm=\"false\"/&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/signal_action_completion/#signal_action_completion-with-explicit-post-confirmation-of-the-goal","title":"Signal_Action_Completion with explicit post confirmation of the goal","text":"<pre><code>&lt;signal_action_completion postconfirm=\"true\"/&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/signal_action_completion/#examples_1","title":"Examples","text":""},{"location":"dialog-domain-description-definition/domain/children/signal_action_completion/#perform-goal-with-signal_action_completion-element","title":"Perform goal with signal_action_completion element","text":"<pre><code>&lt;goal type=\"perform\" action=\"action_that_always_succeed\"&gt;\n    &lt;plan&gt;\n        ...\n        &lt;signal_action_completion/&gt;\n    &lt;/plan&gt;\n&lt;/goal&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/signal_action_failure/","title":"Signal_Action_Failure","text":""},{"location":"dialog-domain-description-definition/domain/children/signal_action_failure/#definition","title":"Definition","text":"<pre><code>&lt;signal_action_failure reason=\"failure_reason\"/&gt;\n</code></pre> <p>The plan item that will make a perform plan stop running, indicating failure through the output of a <code>\"report(action_status(some_action, aborted(failure_reason)))\"</code> move.</p> Attribute Type Description None. - -"},{"location":"dialog-domain-description-definition/domain/children/signal_action_failure/#parents","title":"Parents","text":"<ul> <li>&lt;plan&gt;</li> <li>&lt;postplan&gt;</li> <li>&lt;then&gt;</li> <li>&lt;else&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/children/signal_action_failure/#children","title":"Children","text":"<p>None.</p>"},{"location":"dialog-domain-description-definition/domain/children/signal_action_failure/#behaviour","title":"Behaviour","text":"<p>The <code>&lt;signal_action_failure/&gt;</code> will make TDM treat the perform goal of the current plan as failed. This means that the remains of the plan (if any) will not be executed, and that a report move indicating failure (see above) will be output.</p> <p>The failure reason is a string, which doesn't need to be declared in any way.</p>"},{"location":"dialog-domain-description-definition/domain/children/signal_action_failure/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/domain/children/signal_action_failure/#signal_action_failure-element-indicating-the-failure-reason-of-no_money","title":"Signal_Action_Failure element indicating the failure reason of \"no_money\"","text":"<pre><code>&lt;signal_action_failure reason=\"no_money\"/&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/children/signal_action_failure/#examples_1","title":"Examples","text":""},{"location":"dialog-domain-description-definition/domain/children/signal_action_failure/#goal-that-will-always-fail-with-the-reason-phone_not_avalable","title":"Goal that will always fail with the reason \"phone_not_avalable\"","text":"<pre><code>&lt;goal type=\"perform\" action=\"action_that_always_fail\"&gt;\n    &lt;plan&gt;\n        &lt;signal_action_failure reason=\"phone_not_available\"/&gt;\n    &lt;/plan&gt;\n&lt;/goal&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/elements/dependency/","title":"Dependency","text":""},{"location":"dialog-domain-description-definition/domain/elements/dependency/#definition","title":"Definition","text":"<pre><code>  &lt;dependency type=\"wh_question\" predicate=\"depending_predicate\"&gt;\n    &lt;question type=\"wh_question\" predicate=\"predicate_depended_upon\"/&gt;\n  &lt;/dependency&gt;\n</code></pre> <p>The element defines dependency from one question to the other.</p> Attribute Type Description type string Question type. This can be a wh-question or other questions. predicate string This is the predicate of the question which depends on the contained question."},{"location":"dialog-domain-description-definition/domain/elements/dependency/#parents","title":"Parents","text":"<ul> <li>&lt;domain&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/elements/dependency/#children","title":"Children","text":"<ul> <li>&lt;question&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/elements/dependency/#behaviour","title":"Behaviour","text":"<p>In practice, the use of this element makes TDM see the two questions as related to each other, so that a question about the predicate depended upon is seen as relevant when the user is being asked about the depending predicate. This means that TDM will not see this as a topic switch.</p>"},{"location":"dialog-domain-description-definition/domain/elements/dependency/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/domain/elements/dependency/#a-dependency-declaration-that-states-that-some_predicate-is-dependent-on-explanation_of_word","title":"A dependency declaration that states that <code>some_predicate</code> is dependent on <code>explanation_of_word</code>.","text":"<pre><code>  &lt;dependency type=\"wh_question\" predicate=\"some_predicate\"&gt;\n    &lt;question type=\"wh_question\" predicate=\"explanation_of_word\"/&gt;\n  &lt;/dependency&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/elements/goal/","title":"Parameters","text":""},{"location":"dialog-domain-description-definition/domain/elements/goal/#definition","title":"Definition","text":"<pre><code>&lt;goal type=\"...\" ...&gt;\n</code></pre> Attribute Type Description type string Required. Needs to be one of <code>resolve</code> or <code>perform</code> . action string Optional. Needed if the type is <code>perform</code>. The action needs to be declared in <code>ontology.xml</code>. question_type string Optional. Needed if the type is <code>resolve</code>, and defaults to <code>wh_question</code> Needs to be one of <code>wh_question</code> or <code>yn_question</code>. In case of an <code>yn_question</code> the goal needs a <code>proposition</code> child. predicate string Optional. Needed if the type is <code>wh_question</code>. The predicate needs to be declared in <code>ontology.xml</code>. accommodate_without_feedback boolean Optional.  Indicates whether the default system behavior to give feedback when accommodating the goal, e.g. uttering \"Book a travel\" in response to \"From London to Paris tomorrow\", should be disabled. reraise_on_resume boolean Optional. Indicates whether the default system behavior to give feedback when reraising the goal, e.g. \"Returning to booking a travel\", should be disabled. restart_on_completion boolean Optional. Indicates if the goal should be restarted immediately after completion. This can be handy when a dialogue system is designed to perform a single task again and again. max_answers integer Optional. Defines the maximum number of answers that the system can give, when the user asks a question about several alternatives at once, e.g. \"How old are they?\" By default, max_answers has the value 1, meaning that user questions about several alternatives are not supported. alternatives_predicate string Optional. If max_answers&gt;1, alternatives_predicate is required and provides the name of predicate that distinguishes the alternatives, e.g. \"person\" if the question concerns several persons."},{"location":"dialog-domain-description-definition/domain/elements/goal/#parents","title":"Parents","text":"<ul> <li>&lt;domain&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/elements/goal/#children","title":"Children","text":"<ul> <li>&lt;proposition&gt;</li> <li>&lt;plan&gt;</li> <li>&lt;downdate_condition&gt;</li> <li>&lt;postplan&gt;</li> <li>&lt;preferred&gt;</li> <li>&lt;superaction&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/elements/goal/#behaviour","title":"Behaviour","text":"<p>The element defines a goal, including the plan to achieve the goal. This is the basic building block of a DDD. It defines a goal, which must be of one of the types perform or resolve. A perform goal indicates that something should be performed, while a resolve goal indicates that a question should be answered. Although there is nothing preventing the plan of a perform goal to actually answer a question, it is considered good practice to leave that to resolve goals.</p>"},{"location":"dialog-domain-description-definition/domain/elements/goal/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/domain/elements/goal/#a-perform-goal-that-will-quietly-be-restarted","title":"A perform goal that will quietly be restarted","text":"<pre><code>  &lt;goal type=\"perform\" action=\"adjust_temperature\" reraise_on_resume=\"false\"&gt;\n    &lt;plan&gt;\n      &lt;findout type=\"wh_question\" predicate=\"desired_temperature\"/&gt;\n      &lt;invoke_service_query type=\"wh_question\" predicate=\"current_temperature\"/&gt;\n      &lt;invoke_service_action name=\"SetTemperature\" postconfirm=\"true\"/&gt;\n    &lt;/plan&gt;\n  &lt;/goal&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/elements/iterator/","title":"Parameters","text":""},{"location":"dialog-domain-description-definition/domain/elements/iterator/#definition","title":"Definition","text":"<pre><code>&lt;iterator name=\"an_iterator_identifier\"&gt;\n</code></pre> Attribute Type Description name string The identifier of this iterator <p>An iterator is an element which makes TDM assume propositions in order, one at a time.</p>"},{"location":"dialog-domain-description-definition/domain/elements/iterator/#parents","title":"Parents","text":"<ul> <li>&lt;domain&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/elements/iterator/#behaviour","title":"Behaviour","text":""},{"location":"dialog-domain-description-definition/domain/elements/iterator/#enumeration","title":"Enumeration","text":"<p>The propositions contained in the <code>&lt;enumerate&gt;</code> element, will be assumed, one at a time using the plan item &lt;iterate&gt;. It is possible to check if an enumeration has more items by using the &lt;condition&gt; <code>has_more_items</code>.</p> <p>It is also possible to add a <code>limit</code> attribute to the <code>enumerate</code> element, which makes the <code>has_more_items</code> element evaluate true only for the <code>limit</code> first elements.</p>"},{"location":"dialog-domain-description-definition/domain/elements/iterator/#random-enumeration","title":"Random Enumeration","text":"<p>By using the <code>randomize=\"true\"</code> attribute of the <code>&lt;enumerate&gt;</code> element, propositions will be enumerated in random order.</p> <p>See also &lt;query&gt;</p>"},{"location":"dialog-domain-description-definition/domain/elements/iterator/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/domain/elements/iterator/#an-iterator-that-will-iterate-blue-items","title":"An iterator that will iterate blue items","text":"<p>If called four times, all items will be enumerated, in order of definition. A fifth call would restart with the first item.</p> <pre><code>  &lt;iterator name=\"blue_item\"&gt;\n    &lt;enumerate&gt;\n        &lt;proposition predicate=\"car_colour\" value=\"blue\"/&gt;\n        &lt;proposition predicate=\"bike_colour\" value=\"blue\"/&gt;\n        &lt;proposition predicate=\"house_colour\" value=\"blue\"/&gt;\n        &lt;proposition predicate=\"sky_colour\" value=\"blue\"/&gt;\n    &lt;/enumerate&gt;\n  &lt;/query&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/elements/iterator/#an-iterator-that-will-iterate-over-the-four-seasons-in-random-order","title":"An iterator that will iterate over the four seasons in random order","text":"<p>If called four times, all seasons will be enumerated, in order of definition. This could also be achieved using a domain  &lt;query&gt;.</p> <pre><code>  &lt;iterator name=\"season\"&gt;\n    &lt;enumerate randomize=\"true\"&gt;\n        &lt;proposition predicate=\"favourite_season\" value=\"spring\"/&gt;\n        &lt;proposition predicate=\"favourite_season\" value=\"summer\"/&gt;\n        &lt;proposition predicate=\"favourite_season\" value=\"autumn\"/&gt;\n        &lt;proposition predicate=\"favourite_season\" value=\"winter\"/&gt;\n    &lt;/enumerate&gt;\n  &lt;/query&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/elements/iterator/#a-query-that-will-enumerate-some-propositions-in-random-order","title":"A query that will enumerate some propositions in random order","text":"<pre><code>  &lt;iterator name=\"random_stuff\"&gt;\n    &lt;enumerate randomize=\"true\"&gt;\n        &lt;proposition predicate=\"favourite_season\" value=\"spring\"/&gt;\n        &lt;proposition predicate=\"favourite_city\" value=\"berlin\"/&gt;\n        &lt;proposition predicate=\"favourite_show\" value=\"flying_circus\"/&gt;\n        &lt;proposition predicate=\"first_name\" value=\"john\"/&gt;\n    &lt;/enumerate&gt;\n  &lt;/query&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/elements/iterator/#a-query-that-will-enumerate-two-random-propositions","title":"A query that will enumerate two random propositions","text":"<pre><code>  &lt;iterator name=\"random_stuff\"&gt;\n    &lt;enumerate randomize=\"true\" limit=\"2\"&gt;\n        &lt;proposition predicate=\"favourite_season\" value=\"spring\"/&gt;\n        &lt;proposition predicate=\"favourite_city\" value=\"berlin\"/&gt;\n        &lt;proposition predicate=\"favourite_show\" value=\"flying_circus\"/&gt;\n        &lt;proposition predicate=\"first_name\" value=\"john\"/&gt;\n    &lt;/enumerate&gt;\n  &lt;/query&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/elements/parameters/","title":"Parameters","text":""},{"location":"dialog-domain-description-definition/domain/elements/parameters/#definition","title":"Definition","text":"<pre><code>&lt;parameters question_type=\"type\" predicate=\"p\"&gt;\n</code></pre> <p>The element defines parameters to a particular question.</p> Attribute Type Description verbalize boolean Optional. Describes whether a question should be verbalized or not by the system. incremental boolean Optional. If set to true, the question is subject to \"incremental search\", i.e. that the answer to the question is specified step-by-step by the user graphical_type string Optional. For historical reasons, the graphical type of a question must be set to \"list\" for incremental search to work. allow_goal_accommodation boolean Optional. max_spoken_alts integer Optional. The maximum number of possible answers the the question that are read out to the user. Used in connection with incremental search. max_reported_hit_count integer Optional. The maximum number of hits that are reported to the user. Used in connection with incremental search. source string Optional. One of the values \"domain\" or \"service\" is expected. Used in connection with incremental search. It defines the source of the possible hits. If set to \"service\", then the child \"service_query\" must be defined. If set to \"domain\", all possible individuals defined in the ontology is used. on_zero_hits_action string Optional. Used in connection with incremental search. If the number of hits is zero, then this action will be carried out, and its corresponding plan will be executed. on_too_many_hits_action string Optional. Used in connection with incremental search. If the number of hits after all the ask_features has been asked, and this attribute is set, then this action will be carried out, and its corresponding plan will be executed."},{"location":"dialog-domain-description-definition/domain/elements/parameters/#parents","title":"Parents","text":"<ul> <li>&lt;domain&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/elements/parameters/#children","title":"Children","text":"<ul> <li>&lt;ask_feature&gt;</li> <li>&lt;background&gt;</li> <li>&lt;hint&gt;</li> <li>&lt;service_query&gt;</li> <li>&lt;always_relevant&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/elements/parameters/#behaviour","title":"Behaviour","text":""},{"location":"dialog-domain-description-definition/domain/elements/parameters/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/domain/elements/parameters/#a-parameter-set-designed-to-do-incremental-search-for-a-person","title":"A parameter set designed to do incremental search for a person.","text":"<p>The question that is supposed to get an answer from a findout is the WH-question over the predicate \"person\". The parameter source is set to service, which means that a http service query will be used to find possible answers to the question. Incremental search is activated. The maximum number of hits that will be reported to the user is 10.</p> <pre><code>  &lt;parameters question_type=\"wh_question\" predicate=\"person\" graphical_type=\"list\"\n              source=\"service\" incremental=\"true\" max_reported_hit_count=\"10\"&gt;\n    &lt;ask_feature predicate=\"person_name\"/&gt;\n    &lt;ask_feature predicate=\"person_city\" kpq=\"true\"/&gt;\n    &lt;ask_feature predicate=\"person_area\"/&gt;\n  &lt;/parameters&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/elements/parameters/#a-parameter-set-designed-to-do-be-able-to-include-parameters-in-an-answer","title":"A parameter set designed to do be able to include parameters in an answer.","text":"<pre><code>  &lt;parameters predicate=\"ingredient_quantity\"&gt;\n    &lt;background predicate=\"unit\"/&gt;\n    &lt;background predicate=\"selected_ingredient\"/&gt;\n  &lt;/parameters&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/elements/parameters/#a-parameter-set-that-includes-a-hint-for-answering-a-particular-question","title":"A parameter set that includes a hint for answering a particular question.","text":"<p>If a user answers \"I don't know\" to a particular question, the hint defined using this element will be executed. The recommended child element of a hint is inform.</p> <pre><code>  &lt;parameters predicate=\"ingredient_quantity\"&gt;\n    &lt;hint&gt;\n        &lt;inform&gt;\n            &lt;proposition predicate=\"help_information_on_subject\" value=\"hint_on_quantity\"/&gt;\n        &lt;/inform&gt;\n    &lt;/hint&gt;\n  &lt;/parameters&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/elements/parameters/#a-parameter-set-that-includes-a-hint-for-answering-a-particular-yesno-question","title":"A parameter set that includes a hint for answering a particular yes/no question.","text":"<p>If a user answers \"I don't know\" to a particular yes/no question, the hint defined using this element will be executed. The recommended child element of a hint is inform.</p> <pre><code>  &lt;parameters question_type=\"yn_question\" predicate=\"add_sugar\"&gt;\n    &lt;hint&gt;\n        &lt;inform&gt;\n            &lt;proposition predicate=\"help_information_on_subject\" value=\"hint_on_adding_sugar\"/&gt;\n        &lt;/inform&gt;\n    &lt;/hint&gt;\n  &lt;/parameters&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/elements/parameters/#a-parameter-set-that-indicates-that-asking-a-question-about-a-word-meaning-is-always-relevant","title":"A Parameter Set that Indicates that Asking a Question about a Word Meaning is Always Relevant","text":"<pre><code>  &lt;parameters question_type=\"wh_question\" predicate=\"word_meaning\"&gt;\n    &lt;always_relevant/&gt;\n  &lt;/parameters&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/elements/query/","title":"Parameters","text":""},{"location":"dialog-domain-description-definition/domain/elements/query/#definition","title":"Definition","text":"<pre><code>&lt;query predicate=\"some_predicate\"&gt;\n</code></pre> Attribute Type Description predicate string The predicate of the question for which this query is valid <p>Currently this element supports only wh questions.</p>"},{"location":"dialog-domain-description-definition/domain/elements/query/#parents","title":"Parents","text":"<ul> <li>&lt;domain&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/elements/query/#behaviour","title":"Behaviour","text":"<p>A query can be defined in domain.xml in order to be queried using &lt;invoke_domain_query&gt;.</p> <p>There are currently four different, mutually exclusive, types of queries: Implications, Random Selection, Enumeration and Random Enumeration. If there are more than one query defined for a predicate or question it is undefined which one will be applied.</p> <p>See also &lt;iterator&gt;</p>"},{"location":"dialog-domain-description-definition/domain/elements/query/#implications","title":"Implications","text":"<p>This type defines the query in the form of one or more <code>&lt;implication&gt;</code> elements. If the <code>antecedent</code> proposition holds, TDM will assume the <code>consequent</code> proposition. NB! that the implications will need to be exhaustive. If no antecedent matches, there will be an error.</p>"},{"location":"dialog-domain-description-definition/domain/elements/query/#random-selection","title":"Random Selection","text":"<p>By using a <code>&lt;select_at_random&gt;</code> element, propositions formed using the predicate if the query element and the individuals which are the children of this element, will be assumed at random. This means that two consecutive calls to the query may give the same result.</p>"},{"location":"dialog-domain-description-definition/domain/elements/query/#enumeration","title":"Enumeration","text":"<p>By using an <code>&lt;enumerate&gt;</code> element, propositions formed using the predicate if the query element and the individuals which are the children of this element, will be assumed in order. When all the elements have been enumerated, enumeration will restart from the beginning. It is possible to check if an enumeration has more items by using the &lt;condition&gt; <code>has_more_items</code> element.</p>"},{"location":"dialog-domain-description-definition/domain/elements/query/#random-enumeration","title":"Random Enumeration","text":"<p>By using the <code>randomize=\"true\"</code> attribute of the <code>&lt;enumerate&gt;</code> element, propositions will be enumerated in random order.</p>"},{"location":"dialog-domain-description-definition/domain/elements/query/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/domain/elements/query/#a-query-that-will-select-a-greeting-based-on-time-of-the-day","title":"A query that will select a greeting based on time of the day","text":"<p>The example uses implications.</p> <pre><code>&lt;query predicate=\"greeting\"&gt;\n    &lt;implication&gt;\n        &lt;antecedent predicate=\"time_of_day\" value=\"am\"/&gt;\n        &lt;consequent predicate=\"greeting\" value=\"good morning!\"/&gt;\n    &lt;/implication&gt;\n    &lt;implication&gt;\n        &lt;antecedent predicate=\"time_of_day\" value=\"pm\"/&gt;\n        &lt;consequent predicate=\"greeting\" value=\"good evening!\"/&gt;\n    &lt;/implication&gt;\n&lt;/query&gt;&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/elements/query/#a-query-that-will-select-a-direction-at-random","title":"A query that will select a direction at random.","text":"<pre><code>  &lt;query predicate=\"way_to_look_random\"&gt;\n    &lt;select_at_random&gt;\n      &lt;individual value=\"left\"/&gt;\n      &lt;individual value=\"right\"/&gt;\n    &lt;/select_at_random&gt;\n  &lt;/query&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/domain/elements/query/#a-query-that-will-enumerate-the-four-seasons","title":"A query that will enumerate the four seasons","text":"<p>If called four times, all seasons will be enumerated, in order of definition. <pre><code>  &lt;query predicate=\"season_to_consider\"&gt;\n    &lt;enumerate&gt;\n        &lt;individual value=\"spring\"/&gt;\n        &lt;individual value=\"summer\"/&gt;\n        &lt;individual value=\"autumn\"/&gt;\n        &lt;individual value=\"winter\"/&gt;\n    &lt;/enumerate&gt;\n  &lt;/query&gt;\n</code></pre></p>"},{"location":"dialog-domain-description-definition/domain/elements/query/#a-query-that-will-enumerate-the-four-seasons-randomly","title":"A query that will enumerate the four seasons randomly","text":"<p>If called four times, all seasons will be enumerated, but in random order. <pre><code>  &lt;query predicate=\"season_to_consider\"&gt;\n    &lt;enumerate randomize=\"true\"&gt;\n        &lt;individual value=\"spring\"/&gt;\n        &lt;individual value=\"summer\"/&gt;\n        &lt;individual value=\"autumn\"/&gt;\n        &lt;individual value=\"winter\"/&gt;\n    &lt;/enumerate&gt;\n  &lt;/query&gt;\n</code></pre></p>"},{"location":"dialog-domain-description-definition/domain/elements/validator/","title":"Parameters","text":""},{"location":"dialog-domain-description-definition/domain/elements/validator/#definition","title":"Definition","text":"<pre><code>&lt;validator name=\"...\" ...&gt;\n</code></pre> Attribute Type Description name string Required. This CamelCased name is the name of the validator, and will be reflected in the move generated when validation fails."},{"location":"dialog-domain-description-definition/domain/elements/validator/#parents","title":"Parents","text":"<ul> <li>&lt;domain&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/domain/elements/validator/#children","title":"Children","text":"<p>None</p>"},{"location":"dialog-domain-description-definition/domain/elements/validator/#behaviour","title":"Behaviour","text":"<p>The validator will accept the configuration, if all the propostions in the configuration has the prescribed value. The configuration will only be tried if there exists propositions for all predicates in the configuration. If validation fails, TDM will generate an <code>\"icm:acc*neg:rejected(set([&lt;propositions&gt;]), &lt;ValidityName&gt;)</code>.</p>"},{"location":"dialog-domain-description-definition/domain/elements/validator/#examples","title":"Examples","text":"<p>This validator only accepts Karlstad as the destination for any travel.</p> <p><pre><code>  &lt;validator name=\"DestinationValidity\"&gt;\n    &lt;configuration&gt;\n        &lt;proposition predicate=\"destination\" value=\"Karltdad\"/&gt;\n    &lt;/configuration&gt;\n  &lt;/validator&gt;\n</code></pre> A attempt to accept the proposition <code>destination(Ibiza)</code> would result in the following icm: <code>\"icm:acc*neg:rejected(set([destination(Ibiza))]), DestinationValidity)</code></p>"},{"location":"dialog-domain-description-definition/grammar/grammar/","title":"Grammar","text":"<p>Dummy grammar index (for now).</p>"},{"location":"dialog-domain-description-definition/grammar/children/item/","title":"Item","text":""},{"location":"dialog-domain-description-definition/grammar/children/item/#definition","title":"Definition","text":"<pre><code>&lt;item&gt;\n</code></pre> <p>The grammar entry of items. Each item contains a separate phrase that can be used by the system or the user to speak about the parent element.</p>"},{"location":"dialog-domain-description-definition/grammar/children/item/#parents","title":"Parents","text":"<ul> <li>&lt;one-of&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/grammar/children/item/#children","title":"Children","text":"<ul> <li>&lt;slot&gt;</li> <li>&lt;vp&gt;<ul> <li>&lt;infinitive&gt;</li> <li>&lt;imperative&gt;</li> <li>&lt;ing-form&gt;</li> <li>&lt;object&gt;</li> </ul> </li> </ul>"},{"location":"dialog-domain-description-definition/grammar/children/item/#behaviour","title":"Behaviour","text":"<p>In the grammar, &lt;item&gt; is the child of the &lt;one-of&gt; tag. It has no attributes and can contain &lt;slot&gt; tags.</p> <p>Each &lt;item&gt; tag contains one phrase that can be used by the system or user to speak about the parent element that it belongs to. This parent element could be an &lt;action&gt;, a &lt;question&gt;, an &lt;answer&gt;, a &lt;report&gt;, or an &lt;individual&gt;.</p> <p>&lt;item&gt; tags can also contain a &lt;vp&gt; tag, which specifies the verb of an expression in different grammatical moods and inflected forms for use in Grammatical Framework to generate grammatical forms. See &lt;vp&gt; for further information.</p>"},{"location":"dialog-domain-description-definition/grammar/children/item/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/grammar/children/item/#action-example-with-three-types-of-item-tags-basic-with-slot-and-with-vp","title":"Action example with three types of &lt;item&gt; tags: basic, with &lt;slot&gt;, and with &lt;vp&gt;.","text":"<pre><code>&lt;action name=\"set_alarm\"&gt;\n  &lt;one-of&gt;\n    &lt;item&gt;\n      &lt;vp&gt;\n        &lt;infinitive&gt;set&lt;/infinitive&gt;\n        &lt;imperative&gt;set&lt;/imperative&gt;\n        &lt;ing-form&gt;setting&lt;/ing-form&gt;\n        &lt;object&gt;the alarm&lt;/object&gt;\n      &lt;/vp&gt;\n    &lt;/item&gt;\n    &lt;item&gt;set alarm&lt;/item&gt;\n    &lt;item&gt;set the alarm to &lt;slot predicate=\"time_to_set\" type=\"individual\"/&gt;&lt;/item&gt;\n  &lt;/one-of&gt;\n&lt;/action&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/grammar/children/one-of/","title":"One-of","text":""},{"location":"dialog-domain-description-definition/grammar/children/one-of/#definition","title":"Definition","text":"<pre><code>&lt;item&gt;\n</code></pre> <p>The &lt;one-of&gt; grammar entry. Each &lt;one-of&gt; tag contains a set of &lt;item&gt; tags that can be used by the system or the user to speak about the parent element.</p>"},{"location":"dialog-domain-description-definition/grammar/children/one-of/#parents","title":"Parents","text":"<ul> <li>&lt;action&gt; </li> <li>&lt;question&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/grammar/children/one-of/#children","title":"Children","text":"<ul> <li>&lt;item&gt;<ul> <li>&lt;slot&gt;</li> <li>&lt;vp&gt;<ul> <li>&lt;infinitive&gt;</li> <li>&lt;imperative&gt;</li> <li>&lt;ing-form&gt;</li> <li>&lt;object&gt;</li> </ul> </li> </ul> </li> </ul>"},{"location":"dialog-domain-description-definition/grammar/children/one-of/#behaviour","title":"Behaviour","text":"<p>In the grammar, the &lt;one-of&gt; tag is used to provide a number of ways in which the system and the user can speak about actions, questions, answers, reports, and individuals. It is the child of these aforementioned parent elements in the cases where these elements should have more than one possible phrase that can be used to speak about them. It has no attributes.</p> <p>&lt;one-of&gt; tags always contain &lt;item&gt; tags that each contain one phrase that can be used by the system or user to speak about the parent element that it belongs to. This parent element could be an action, a question, an answer, a report, or an individual.</p>"},{"location":"dialog-domain-description-definition/grammar/children/one-of/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/grammar/children/one-of/#action-example-with-three-types-of-item-tags-basic-with-slot-and-with-vp","title":"Action example with three types of &lt;item&gt; tags: basic, with &lt;slot&gt;, and with &lt;vp&gt;.","text":"<pre><code>&lt;action name=\"set_alarm\"&gt;\n  &lt;one-of&gt;\n    &lt;item&gt;\n      &lt;vp&gt;\n        &lt;infinitive&gt;set&lt;/infinitive&gt;\n        &lt;imperative&gt;set&lt;/imperative&gt;\n        &lt;ing-form&gt;setting&lt;/ing-form&gt;\n        &lt;object&gt;the alarm&lt;/object&gt;\n      &lt;/vp&gt;\n    &lt;/item&gt;\n    &lt;item&gt;set alarm&lt;/item&gt;\n    &lt;item&gt;set the alarm to &lt;slot predicate=\"time_to_set\" type=\"individual\"/&gt;&lt;/item&gt;\n  &lt;/one-of&gt;\n&lt;/action&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/grammar/children/slot/","title":"Slot","text":""},{"location":"dialog-domain-description-definition/grammar/children/slot/#definition","title":"Definition","text":"<pre><code>&lt;slot predicate=\"predicate_name\"&gt;\n</code></pre> <p>The grammar entry of the verb phrase (VP) child of the &lt;item&gt; element.</p> Attributes Type Description predicate string Required. Specifies the name of the predicate from which the slot is filled. Predicate names are written using lowercase separated by underscores, e.g. 'current_temperature'."},{"location":"dialog-domain-description-definition/grammar/children/slot/#parents","title":"Parents","text":"<ul> <li>&lt;answer&gt;</li> <li>&lt;report&gt;</li> <li>&lt;validity&gt;</li> </ul> <ul> <li>&lt;item&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/grammar/children/slot/#behaviour","title":"Behaviour","text":"<p>The &lt;slot&gt; element in the grammar occurs inside its various parent tags and serves as a slot for data from the given predicate, which the system gets from the predicate's &lt;question&gt; . Parent elements can contain multiple &lt;slot&gt; elements if necessary. The &lt;slot&gt; attribute <code>predicate</code> indicates which predicate that the slot gets its data from. </p>"},{"location":"dialog-domain-description-definition/grammar/children/slot/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/grammar/children/slot/#slot-inside-item-tags","title":"&lt;slot&gt; inside &lt;item&gt; tags:","text":"<pre><code>&lt;action name=\"browse_restaurants\"&gt;\n   &lt;one-of&gt;\n      ...\n      &lt;item&gt;i want to browse &lt;slot sort=\"type_food\"/&gt; restaurants&lt;/item&gt;\n      &lt;item&gt;browse &lt;slot sort=\"type_food\"/&gt;&lt;/item&gt;\n      &lt;item&gt;i would like to eat &lt;slot sort=\"type_food\"/&gt;&lt;/item&gt;\n      &lt;item&gt;i want &lt;slot sort=\"type_food\"/&gt;&lt;/item&gt;\n      &lt;item&gt;i want to eat &lt;slot sort=\"type_food\"/&gt;&lt;/item&gt;\n      ...\n   &lt;/one-of&gt;\n&lt;/action&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/grammar/children/slot/#multiple-slot-tags-inside-an-answer-tag","title":"Multiple &lt;slot&gt; tags inside an &lt;answer&gt; tag:","text":"<pre><code>&lt;answer predicate=\"next_membership_level\" speaker=\"system\"&gt;you need &lt;slot predicate=\"next_membership_points\" type=\"individual\"/&gt; points to reach &lt;slot predicate=\"next_membership_level\" type=\"individual\"/&gt; level&lt;/answer&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/grammar/children/slot/#slot-inside-a-report-tag","title":"&lt;slot&gt; inside a &lt;report&gt; tag:","text":"<pre><code>&lt;report action=\"AddToBasketDairy\" status=\"ended\"&gt;Ok. We will add &lt;slot predicate=\"selected_dairy\"/&gt; to the order.&lt;/report&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/grammar/children/slot/#slot-inside-a-validity-tag","title":"&lt;slot&gt; inside a &lt;validity&gt; tag:","text":"<pre><code>&lt;validity name=\"CityValidity\"&gt;invalid parameters &lt;slot predicate=\"dest_city\" type=\"individual\"/&gt;&lt;/validity&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/grammar/children/vp/","title":"VP","text":""},{"location":"dialog-domain-description-definition/grammar/children/vp/#definition","title":"Definition","text":"<pre><code>&lt;vp&gt;\n</code></pre> <p>The grammar entry of the verb phrase (VP) child of the &lt;item&gt; element.</p> Attributes Type Description N/A N/A N/A"},{"location":"dialog-domain-description-definition/grammar/children/vp/#parents","title":"Parents","text":"<ul> <li>&lt;item&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/grammar/children/vp/#children","title":"Children","text":"<ul> <li>&lt;infinitive&gt;</li> <li>&lt;imperative&gt;</li> <li>&lt;ing-form&gt;</li> <li>&lt;object&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/grammar/children/vp/#behaviour","title":"Behaviour","text":"<p>The &lt;vp&gt; element in the grammar defines the way in which the system  can speak about a given &lt;item&gt;. It defines a basic utterance for the &lt;item&gt;'s parent element in three grammatical forms: infinitive, imperative, and ing-form  to be used by the NLG  in generating expressions, such as for grounding.</p>"},{"location":"dialog-domain-description-definition/grammar/children/vp/#children_1","title":"Children","text":""},{"location":"dialog-domain-description-definition/grammar/children/vp/#infinitive","title":"<code>&lt;infinitive\\&gt;</code>","text":"<p>Contains the infinitive form of the verb used in the &lt;vp&gt;, e.g. \"make\" from the sentence \"make a reservation\".</p>"},{"location":"dialog-domain-description-definition/grammar/children/vp/#imperative","title":"<code>&lt;imperative\\&gt;</code>","text":"<p>Contains the imperative form of the verb used in the &lt;vp&gt;, e.g. \"make\" from the sentence \"make a reservation\".</p>"},{"location":"dialog-domain-description-definition/grammar/children/vp/#ing-form","title":"<code>&lt;ing-form\\&gt;</code>","text":"<p>Contains the ing-form (gerund)  form of the verb used in the &lt;vp&gt;, e.g. \"making\" from the sentence \"making a reservation\".</p>"},{"location":"dialog-domain-description-definition/grammar/children/vp/#object","title":"<code>&lt;object\\&gt;</code>","text":"<p>Contains the object of the sentence in the &lt;vp&gt;, e.g. \"a reservation\" from the sentence \"make/making a reservation\".</p>"},{"location":"dialog-domain-description-definition/grammar/children/vp/#examples","title":"Examples","text":"<pre><code>&lt;action name=\"make_reservation\"&gt;\n   &lt;one-of&gt;\n     &lt;item&gt;\n        &lt;vp&gt;\n            &lt;infinitive&gt;make&lt;/infinitive&gt;\n            &lt;imperative&gt;make&lt;/imperative&gt;\n            &lt;ing-form&gt;making&lt;/ing-form&gt;\n            &lt;object&gt;a reservation&lt;/object&gt;\n        &lt;/vp&gt;\n     &lt;/item&gt;\n     &lt;item&gt;...&lt;/item&gt;\n   &lt;/one-of&gt;\n&lt;/action&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/grammar/elements/action/","title":"Action","text":""},{"location":"dialog-domain-description-definition/grammar/elements/action/#definition","title":"Definition","text":"<pre><code>&lt;action name=\"action_name\"&gt;\n</code></pre> <p>The grammar entry of an action. Defines how the system and the user can speak about and request actions.</p> Attribute Type Description name string Required. Should match the name of the corresponding action in ontology. The action names in  elements are written using lowercase separated by underscores, e.g. 'set_temperature'."},{"location":"dialog-domain-description-definition/grammar/elements/action/#children","title":"Children","text":"<ul> <li>&lt;one-of&gt;<ul> <li>&lt;item&gt;<ul> <li>&lt;slot&gt;</li> <li>&lt;vp&gt;<ul> <li>&lt;infinitive&gt;</li> <li>&lt;imperative&gt;</li> <li>&lt;ing-form&gt;</li> <li>&lt;object&gt;</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"dialog-domain-description-definition/grammar/elements/action/#behaviour","title":"Behaviour","text":"<p>The &lt;action&gt; element in the grammar defines the way in which the system and users can speak about a given action. The attribute <code>name</code> indicates which action in the ontology the grammar entry is for.</p> <p>An action entry in the grammar should cover the different ways a user could speak about the action, such as different expressions and word choices. These options are given using the &lt;one-of&gt; tag, where each alternative expression is an &lt;item&gt;. &lt;item&gt; tags can contain &lt;vp&gt; or &lt;slot&gt; tags.</p>"},{"location":"dialog-domain-description-definition/grammar/elements/action/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/grammar/elements/action/#action-entry-for-setting-an-alarm-with-three-different-expressions","title":"Action entry for setting an alarm with three different expressions:","text":"<pre><code>&lt;action name=\"set_alarm\"&gt;\n  &lt;one-of&gt;\n    &lt;item&gt;set the alarm&lt;/item&gt;\n    &lt;item&gt;set alarm&lt;/item&gt;\n    &lt;item&gt;alarm&lt;/item&gt;\n  &lt;/one-of&gt;\n&lt;/action&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/grammar/elements/action/#action-entry-containing-expression-with-slot-tag","title":"Action entry containing expression with &lt;slot&gt; tag:","text":"<pre><code>&lt;action name=\"set_alarm\"&gt;\n  &lt;one-of&gt;\n    &lt;item&gt;set the alarm&lt;/item&gt;\n    &lt;item&gt;set alarm&lt;/item&gt;\n    &lt;item&gt;set the alarm to &lt;slot predicate=\"time_to_set\" type=\"individual\"/&gt;&lt;/item&gt;\n  &lt;/one-of&gt;\n&lt;/action&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/grammar/elements/action/#action-entry-containing-expression-with-vp-tag","title":"Action entry containing expression with &lt;vp&gt; tag:","text":"<pre><code>&lt;action name=\"set_alarm\"&gt;\n  &lt;one-of&gt;\n    &lt;item&gt;\n      &lt;vp&gt;\n        &lt;infinitive&gt;set&lt;/infinitive&gt;\n        &lt;imperative&gt;set&lt;/imperative&gt;\n        &lt;ing-form&gt;setting&lt;/ing-form&gt;\n        &lt;object&gt;the alarm&lt;/object&gt;\n      &lt;/vp&gt;\n    &lt;/item&gt;\n    &lt;item&gt;set alarm&lt;/item&gt;\n    &lt;item&gt;set the alarm to &lt;slot predicate=\"time_to_set\" type=\"individual\"/&gt;&lt;/item&gt;\n  &lt;/one-of&gt;\n&lt;/action&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/grammar/elements/answer/","title":"Answer","text":""},{"location":"dialog-domain-description-definition/grammar/elements/answer/#definition","title":"Definition","text":"<pre><code>&lt;answer speaker=\"speaker\" predicate=\"predicate_name\" polarity=\"polarity\"&gt;\n</code></pre> <p>The grammar entry of an answer given by the system or the user.</p> Attributes Type Description speaker string Required. Specifies the speaker of the utterance. Available options: <ul><li>system</li><li>user</li></ul> predicate string Optional. Specifies the name of the predicate to which the grammar entry refers. Predicate names are written using lowercase separated by underscores, e.g. 'current_temperature'. polarity string Optional. Specifies whether an answer has positive or negative polarity. Available options: <ul><li>positive</li><li>negative</li></ul>"},{"location":"dialog-domain-description-definition/grammar/elements/answer/#children","title":"Children","text":"<ul> <li>&lt;one-of&gt;<ul> <li>&lt;item&gt;<ul> <li>&lt;slot&gt;</li> </ul> </li> </ul> </li> </ul>"},{"location":"dialog-domain-description-definition/grammar/elements/answer/#behaviour","title":"Behaviour","text":"<p>The &lt;answer&gt; element in the grammar defines the way in which the system and users can give answers to questions. The attribute <code>polarity</code> specifies whether the answer is positive or negative, the attribute <code>predicate</code> indicates which predicate in the ontology the grammar entry is for, and the attribute <code>speaker</code> specifies the speaker of the answer.</p> <p>An answer entry in the grammar should cover the different ways in which the system and users can answer questions, such as different expressions and word choices. These options are given using the &lt;one-of&gt; tag, where each alternative expression is an &lt;item&gt;, which in turn can contain &lt;slot&gt; tags.</p> <p>System answers can make use of the attribute <code>polarity</code> in situations where a question could have different answers depending on whether the answer is positive or negative. An example of this is the possible answers to the question \"Are there rooms available?\" from a user wanting to book a hotel room.</p>"},{"location":"dialog-domain-description-definition/grammar/elements/answer/#polarity-attribute-choices","title":"<code>polarity</code> attribute choices:","text":""},{"location":"dialog-domain-description-definition/grammar/elements/answer/#positive","title":"Positive","text":"<p>Indicates that an answer about a particular predicate is of positive polarity, e.g. if the user asks whether they are qualified for membership and the answer is \"Yes, you have 50 points and are qualified for membership\". If there is a positive polarity answer for a predicate, there is typically a negative polarity answer present in the grammar as well.</p>"},{"location":"dialog-domain-description-definition/grammar/elements/answer/#negative","title":"Negative","text":"<p>Indicates that an answer about a particular predicate is of negative polarity, e.g. if the user asks whether they are qualified for membership and the answer is \"No, you need 20 points to be qualified for membership\".</p>"},{"location":"dialog-domain-description-definition/grammar/elements/answer/#speaker-attribute-choices","title":"<code>speaker</code> attribute choices:","text":""},{"location":"dialog-domain-description-definition/grammar/elements/answer/#user","title":"User","text":"<p>Indicates that the &lt;answer&gt; element contains possible answers that the user can give the system in response to a system question prompted by a &lt;findout&gt; in domain.xml.</p>"},{"location":"dialog-domain-description-definition/grammar/elements/answer/#system","title":"System","text":"<p>Indicates that the &lt;answer&gt; element contains phrases used by the system to give an answer about the <code>predicate</code> specified. It is prompted by a &lt;invoke_service_query&gt; in domain.xml.</p>"},{"location":"dialog-domain-description-definition/grammar/elements/answer/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/grammar/elements/answer/#user_1","title":"User","text":"<p>This user &lt;answer&gt; entry contains the ways in which a user can answer certain questions in a travel booking DDD, specifically how many passengers of a certain type to add, and the destination city that the user wants to travel to.</p> <pre><code>&lt;answer speaker=\"user\"&gt;\n  &lt;one-of&gt;\n    &lt;item&gt;&lt;slot predicate=\"passenger_quantity_to_add\" type=\"individual\"/&gt; &lt;slot sort=\"passenger_type\"/&gt;&lt;/item&gt;\n    &lt;item&gt;to &lt;slot predicate=\"dest_city\"/&gt;&lt;/item&gt;\n  &lt;/one-of&gt;\n&lt;/answer&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/grammar/elements/answer/#system_1","title":"System","text":"<p>This system &lt;answer&gt; entry contains the phrase the system would use to answer a question from the user about the next membership level and its requirements.</p> <pre><code>&lt;answer predicate=\"next_membership_level\" speaker=\"system\"&gt;you need &lt;slot predicate=\"next_membership_points\" type=\"individual\"/&gt; points to reach &lt;slot predicate=\"next_membership_level\" type=\"individual\"/&gt; level&lt;/answer&gt;\n</code></pre> <p>The following &lt;answer&gt; entries show an example of a positive and a negative polarity answer from the system to a user question concerning the availability of rooms for booking in a hotel. <pre><code>&lt;answer polarity=\"positive\" predicate=\"rooms_available\" speaker=\"system\"&gt;There are rooms available&lt;/answer&gt;\n\n&lt;answer polarity=\"negative\" predicate=\"rooms_available\" speaker=\"system\"&gt;Unfortunately, there are no rooms available to book at this time&lt;/answer&gt;\n</code></pre></p>"},{"location":"dialog-domain-description-definition/grammar/elements/greeting/","title":"Greeting","text":""},{"location":"dialog-domain-description-definition/grammar/elements/greeting/#definition","title":"Definition","text":"<pre><code>&lt;greeting&gt;\n</code></pre> <p>The grammar entry of the system greeting. Defines in what way the system will greet the user.</p>"},{"location":"dialog-domain-description-definition/grammar/elements/greeting/#behaviour","title":"Behaviour","text":"<p>The &lt;greeting&gt; element in the grammar defines the way in which the system greets the user.</p> <p>This grammar entry should only exist once in a DDD and should contain the phrase the system should use when greeting the user at the beginning of the interaction.</p>"},{"location":"dialog-domain-description-definition/grammar/elements/greeting/#examples","title":"Examples","text":"<pre><code>&lt;greeting&gt;Welcome to the Travel Agency!&lt;/greeting&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/grammar/elements/individual/","title":"Individual","text":""},{"location":"dialog-domain-description-definition/grammar/elements/individual/#definition","title":"Definition","text":"<pre><code>&lt;individual name=\"individual_name\"&gt;\n</code></pre> <p>The grammar entry of an individual. Defines how the system and the user can speak about individuals.</p> Attribute Type Description name string Required. Should match the name of the corresponding individual in ontology. The individual names in  elements are written using lowercase separated by underscores, e.g. 'set_temperature'."},{"location":"dialog-domain-description-definition/grammar/elements/individual/#children","title":"Children","text":"<ul> <li>&lt;one-of&gt;<ul> <li>&lt;item&gt;</li> </ul> </li> </ul>"},{"location":"dialog-domain-description-definition/grammar/elements/individual/#behaviour","title":"Behaviour","text":"<p>The &lt;individual&gt; element in the grammar defines the way in which the system and users can speak about a given individual. The attribute <code>name</code> indicates which individual in the ontology the grammar entry is for. Individuals are typically nouns or names of e.g. places, people, etc.</p> <p>An individual entry in the grammar should contain at least one phrase which can be used to refer to the individual in question. It is also possible to specify multiple ways of referring to the same individual. Multiple options, when used, are given using the &lt;one-of&gt; tag, where each alternative expression is an &lt;item&gt;.</p>"},{"location":"dialog-domain-description-definition/grammar/elements/individual/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/grammar/elements/individual/#basic-individual-entry","title":"Basic individual entry.","text":"<pre><code>&lt;individual name=\"london\"&gt;London&lt;/individual&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/grammar/elements/individual/#individual-entry-with-one-of-and-item","title":"Individual entry with &lt;one-of&gt; and &lt;item&gt;.","text":"<pre><code>&lt;individual name=\"united_kingdom\"&gt;\n  &lt;one-of&gt;\n    &lt;item&gt;The UK&lt;/item&gt;\n    &lt;item&gt;United Kingdom&lt;/item&gt;\n    &lt;item&gt;Great Britain&lt;/item&gt;\n  &lt;/one-of&gt;\n&lt;/individual&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/grammar/elements/preconfirm/","title":"Preconfirm","text":""},{"location":"dialog-domain-description-definition/grammar/elements/preconfirm/#definition","title":"Definition","text":"<pre><code>&lt;preconfirm action=\"ActionName\"&gt;\n</code></pre> <p>The grammar entry of preconfirmations for actions. Defines how the system can ask the user for confirmation about performing an action.</p> Attributes Type Description action string Required. Specifies which action the preconfirmation is for. This name should match the corresponding action name in service_interface. The action names in &lt;preconfirm&gt; tags are written according to the PascalCase convention, e.g. 'SetTemperature'."},{"location":"dialog-domain-description-definition/grammar/elements/preconfirm/#children","title":"Children","text":"<ul> <li>&lt;slot&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/grammar/elements/preconfirm/#behaviour","title":"Behaviour","text":"<p>The &lt;preconfirm&gt; element in the grammar ... The attribute <code>action</code> specifies the action for which this entry makes preconfirmation possible. </p> <p>A preconfirm entry in the grammar has one phrase which the system uses to preconfirm with the user whether an action should be performed. Said phrase can contain &lt;slot&gt; tags.</p>"},{"location":"dialog-domain-description-definition/grammar/elements/preconfirm/#examples","title":"Examples","text":"<p><pre><code>&lt;preconfirm action=\"RemoveAlarm\"&gt;remove the alarm&lt;/preconfirm&gt;\n</code></pre> <pre><code>&lt;preconfirm action=\"BookHousing\"&gt;book this hotel&lt;/preconfirm&gt;\n</code></pre></p>"},{"location":"dialog-domain-description-definition/grammar/elements/question/","title":"Question","text":""},{"location":"dialog-domain-description-definition/grammar/elements/question/#definition","title":"Definition","text":"<pre><code>&lt;question speaker=\"speaker\" predicate=\"predicate_name\" type=\"type\"&gt;\n</code></pre> <p>The grammar entry of a question asked by the system or the user.</p> Attributes Type Description speaker string Required. Specifies the speaker of the utterance. Available options: <ul><li>system</li><li>user</li><li>all</li></ul> predicate string Required. Specifies the name of the predicate to which the grammar entry refers. Predicate names are written using lowercase separated by underscores, e.g. 'current_temperature'. type string Required only when speaker is system. Specifies which type of question is asked by the system. Available options: <ul><li>wh_question</li></ul>"},{"location":"dialog-domain-description-definition/grammar/elements/question/#children","title":"Children","text":"<ul> <li>&lt;one-of&gt;<ul> <li>&lt;item&gt;<ul> <li>&lt;slot&gt;</li> <li>&lt;vp&gt;<ul> <li>&lt;infinitive&gt;</li> <li>&lt;imperative&gt;</li> <li>&lt;ing-form&gt;</li> <li>&lt;object&gt;</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"dialog-domain-description-definition/grammar/elements/question/#behaviour","title":"Behaviour","text":"<p>The &lt;question&gt; element in the grammar defines the way in which the system and users can speak about a given question. The attribute <code>predicate</code> indicates which predicate in the ontology that the grammar entry is for, the attribute <code>speaker</code> specifies the speaker of the question, and the attribute <code>type</code> specifies the type of question when <code>speaker</code> is set to <code>system</code>.</p>"},{"location":"dialog-domain-description-definition/grammar/elements/question/#speaker-attribute-choices","title":"<code>speaker</code> attribute choices:","text":""},{"location":"dialog-domain-description-definition/grammar/elements/question/#user","title":"User","text":"<p>Indicates that the &lt;question&gt; element contains possible questions that the user can ask the system in order to resolve a &lt;goal&gt; in domain.xml.</p>"},{"location":"dialog-domain-description-definition/grammar/elements/question/#system","title":"System","text":"<p>Indicates that the &lt;question&gt; element contains a phrase used by the system to ask about the <code>predicate</code> specified. It is prompted by a &lt;findout&gt; in domain.xml.</p>"},{"location":"dialog-domain-description-definition/grammar/elements/question/#all","title":"All","text":"<p>Indicates that the &lt;question&gt; element contains a phrase used by both system and user in questions. Regardless of who is speaking, when asking or talking about a question of the specified <code>predicate</code>, they can use this phrase.</p>"},{"location":"dialog-domain-description-definition/grammar/elements/question/#type-attribute-choices","title":"<code>type</code> attribute choices:","text":""},{"location":"dialog-domain-description-definition/grammar/elements/question/#wh-question","title":"Wh-question","text":"<p>Type of question that starts with or contains wh-words such as 'what', 'when', 'which', 'who', etc..</p>"},{"location":"dialog-domain-description-definition/grammar/elements/question/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/grammar/elements/question/#user_1","title":"User","text":"<p>The user can ask for a phone number as following.</p> <pre><code>&lt;question speaker=\"user\" predicate=\"phone_number_of_contact\"&gt;\n  &lt;one-of&gt;\n    &lt;item&gt;tell me a phone number&lt;/item&gt;\n    &lt;item&gt;what is &lt;slot predicate=\"selected_contact\" type=\"individual\"/&gt;'s number&lt;/item&gt;\n    &lt;item&gt;tell me &lt;slot predicate=\"selected_contact\" type=\"individual\"/&gt;'s number&lt;/item&gt;\n  &lt;/one-of&gt;\n&lt;/question&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/grammar/elements/question/#system_1","title":"System","text":"<p>The system can ask for the name of the individual if the user has not specified it in the question above.</p> <pre><code>&lt;question speaker=\"system\" predicate=\"selected_contact\" type=\"wh_question\"&gt;whose number&lt;/question&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/grammar/elements/question/#all_1","title":"All","text":"<p>Both the user and the system can use this phrase to ask about a phone number.</p> <p>For example, to ask for a phone number, the user can say \"What is the phone number?\". When returning to discussing this question after talking about something else, the system can say \"Returning to the phone number\".</p> <pre><code>&lt;question speaker=\"all\" predicate=\"selected_contact\"&gt;the phone number&lt;/question&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/grammar/elements/report/","title":"Report","text":""},{"location":"dialog-domain-description-definition/grammar/elements/report/#definition","title":"Definition","text":"<pre><code>&lt;report action=\"ActionName\" status=\"status\"&gt;\n</code></pre> <p>The grammar entry of a report given by the system.</p> Attributes Type Description action string Required. Specifies the name of the action the report entry is for. This name should match the corresponding action name in service_interface. The action names in &lt;report&gt; tags are written according to the PascalCase convention, e.g. 'SetTemperature'. In the case of a user report, this name should match an item for which there exists a <code>get_done</code> element. status string Required. Specifies the status of the action the report entry is for. Available options: <ul><li>started</li><li>ended</li><li>failed</li><li>done</li></ul>. The <code>done</code> status is currently the only one supported for user reports reason string Optional, used together with status=\"failed\". Specifies the reason for the failure to perform an action. speaker string Optional, defaults to \"system\"."},{"location":"dialog-domain-description-definition/grammar/elements/report/#children","title":"Children","text":"<ul> <li>&lt;one-of selection=\"...\"&gt;<ul> <li>&lt;item&gt;<ul> <li>&lt;slot&gt;</li> </ul> </li> </ul> </li> </ul>"},{"location":"dialog-domain-description-definition/grammar/elements/report/#behaviour","title":"Behaviour","text":""},{"location":"dialog-domain-description-definition/grammar/elements/report/#system-reports","title":"System Reports","text":"<p>The &lt;report&gt; element in the grammar defines the way in which the system makes reports about actions before or after performing them. The attribute <code>action</code> specifies which action the report is for, and the attribute <code>status</code> specifies the outcome of the performed action.</p> <p>A report action can contain one of more phrases which are used by the system to report the result of the report's specified action. These phrases can also contain &lt;slot&gt; tags. When a &lt;report&gt; element contains multiple phrases, these are specified in &lt;item&gt; tags inside a &lt;one-of&gt; tag. In the case of &lt;report&gt;, these &lt;one-of&gt; tags have an attribute called 'selection' which specifies the order in which the contained items are used.</p> <p>Reports can make use of the attribute <code>reason</code> in situations where the system reports on an action failure that could be due to multiple different reasons. An example of this is a situation where the action \"CancelReservation\" fails as the user is trying to cancel their booking of a hotel room. The reasons could for instance be that the user has no booked hotel room to cancel, or that the user is trying to cancel the reservation less than 24 hours before when this is not allowed.</p>"},{"location":"dialog-domain-description-definition/grammar/elements/report/#user-reports","title":"User Reports","text":"<p>The <code>&lt;report speaker=\"user\"\\&gt;</code> element in the grammar defines the way in which the user informs the system that an action has been performed.</p> <p>Currently this element is only used for generating training data, and cannot be parsed by GF.</p>"},{"location":"dialog-domain-description-definition/grammar/elements/report/#status-attribute-choices","title":"<code>status</code> attribute choices:","text":""},{"location":"dialog-domain-description-definition/grammar/elements/report/#started","title":"Started","text":"<p>Indicates that the report's specified action has been initialized. The report phrase should inform the user about this.</p>"},{"location":"dialog-domain-description-definition/grammar/elements/report/#ended","title":"Ended","text":"<p>Indicates that the report's specified action was successfully completed and has been finalized. The report phrase should inform the user about this.</p>"},{"location":"dialog-domain-description-definition/grammar/elements/report/#failed","title":"Failed","text":"<p>Indicates that the report's specified action was failed and was not completed. The report phrase should inform the user about the action failure and the reasons for said failure.</p>"},{"location":"dialog-domain-description-definition/grammar/elements/report/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/grammar/elements/report/#started_1","title":"Started","text":"<p>This &lt;report&gt; entry contains the phrase the system would use to report to the user that it has started the process of cancelling a booking. In this case, the system lets the user know that it is looking for reservations to cancel.</p> <pre><code>&lt;report action=\"CancelReservation\" status=\"started\"&gt;checking for reservations.&lt;/report&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/grammar/elements/report/#ended_1","title":"Ended","text":"<p>This &lt;report&gt; entry contains the phrase the system would use to report to the user that it has successfully cancelled the user's hotel room reservation.</p> <pre><code>&lt;report action=\"CancelReservation\" status=\"ended\"&gt;your reservation has been cancelled.&lt;/report&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/grammar/elements/report/#failed_1","title":"Failed","text":"<p>The following &lt;report&gt; entries show two examples of reports for cases where the system failed to perform the cancellation of the user's hotel room reservation. The two examples have different reasons for failure, the first being that the user has no booked hotel room to cancel and the second being that the user is trying to cancel a reservation less than 24 hours before the booking begins, when this is not allowed. <pre><code>&lt;report action=\"CancelReservation\" status=\"failed\" reason=\"no_reservation_exists\"&gt;there is no reservation to cancel.&lt;/report&gt;\n\n&lt;report action=\"CancelReservation\" status=\"failed\" reason=\"too_late_to_cancel\"&gt;you cannot cancel your reservation less than 24 hours before your booking begins.&lt;/report&gt;\n</code></pre></p>"},{"location":"dialog-domain-description-definition/grammar/elements/report/#with-one-of","title":"With &lt;one-of&gt;","text":"<p>This &lt;report&gt; entry shows an example of a report with multiple phrases that the system can use. In this case, the report is the result of the user asking the system to tell a joke.</p> <pre><code>&lt;report action=\"Jokes\" status=\"ended\"&gt;\n  &lt;one-of selection=\"cyclic\"&gt;\n    &lt;item&gt;Why don't teddy bears ever order dessert? Because they're always stuffed&lt;/item&gt;\n    &lt;item&gt;What's the difference between snowmen and snow-women? Snowballs&lt;/item&gt;\n    &lt;item&gt;Why can't you trust an atom? Because they make up literally everything&lt;/item&gt;\n    &lt;item&gt;Why did the robot cross the road? It was programmed to be a chicken&lt;/item&gt;\n    &lt;item&gt;Why did the robot go to the shopping mall? It had hardware and software, but it needed underware&lt;/item&gt;\n  &lt;/one-of&gt;\n&lt;/report&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/grammar/elements/report/#user-report-for-performed-action","title":"User Report for performed action","text":"<pre><code>&lt;user_report speaker=\"user\" action=\"add_water\" status=\"done\"&gt;\n  &lt;one-of&gt;\n    &lt;item&gt;I've added the water&lt;/item&gt;\n    &lt;item&gt;The water is there&lt;/item&gt;\n    &lt;item&gt;The water is added&lt;/item&gt;\n    &lt;item&gt;I've poured it&lt;/item&gt;\n  &lt;/one-of&gt;\n&lt;/report&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/grammar/elements/validity/","title":"Validity","text":""},{"location":"dialog-domain-description-definition/grammar/elements/validity/#definition","title":"Definition","text":"<pre><code>&lt;validity name=\"ValidityName\"&gt;\n</code></pre> <p>The grammar entry specifying how the system reports to the user that one or more of their given parameters are invalid. .</p> Attributes Type Description name string Required. Specifies the name of the Validity, which should match the corresponding validator in service_interface. The validity names in &lt;validity&gt; tags are written according to the PascalCase convention, e.g. 'SetTemperature'."},{"location":"dialog-domain-description-definition/grammar/elements/validity/#children","title":"Children","text":"<ul> <li>&lt;slot&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/grammar/elements/validity/#behaviour","title":"Behaviour","text":"<p>The &lt;validity&gt; element in the grammar defines the way in which the system informs users about the parameters they have given being invalid. The attribute <code>name</code> specifies the name of the validator and needs to match the name of the corresponding validator in service_interface.</p> <p>A validity entry in the grammar contains one phrase which the system can use to inform the user of invalid parameters. This phrase can contain &lt;slot&gt; tags.</p>"},{"location":"dialog-domain-description-definition/grammar/elements/validity/#examples","title":"Examples","text":"<pre><code>&lt;validity name=\"HourValidity\"&gt;cannot set the hour to &lt;slot predicate=\"hour_to_set\"/&gt;.&lt;/validity&gt;\n&lt;validity name=\"MinuteValidity\"&gt;cannot set the minute to &lt;slot predicate=\"minute_to_set\"/&gt;.&lt;/validity&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/ontology/ontology/","title":"Ontology","text":""},{"location":"dialog-domain-description-definition/ontology/ontology/#definition","title":"Definition","text":"<pre><code>&lt;ontology name=\"n\"&gt;\n...\n&lt;/ontology&gt;\n</code></pre> <p>An ontology is an inventory of the things one can talk about in an application, consisting of (semantic) sorts, individuals, predicates and actions.</p> Attribute Type Description name string Required. The name of the ontology."},{"location":"dialog-domain-description-definition/ontology/ontology/#parents","title":"Parents","text":"<p>None.</p>"},{"location":"dialog-domain-description-definition/ontology/ontology/#elements","title":"Elements","text":"<ul> <li>&lt;sort&gt;</li> <li>&lt;individual&gt;</li> <li>&lt;predicate&gt;</li> <li>&lt;action&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/ontology/ontology/#children","title":"Children","text":"<p>None.</p>"},{"location":"dialog-domain-description-definition/ontology/ontology/#behaviour","title":"Behaviour","text":"<p>The ontology element is the root element of the ontology file.</p>"},{"location":"dialog-domain-description-definition/ontology/ontology/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/ontology/ontology/#partial-ontology-for-a-phone-application","title":"Partial ontology for a phone application","text":"<pre><code>&lt;ontology name=\"phone\"&gt;\n  &lt;sort name=\"number_type\"/&gt;\n\n  &lt;predicate name=\"number_type_to_call\" sort=\"number_type\"/&gt;\n\n  &lt;action name=\"make_call\"/&gt;\n\n  &lt;individual name=\"mobile\" sort=\"number_type\"/&gt;\n  &lt;individual name=\"home\" sort=\"number_type\"/&gt;\n  &lt;individual name=\"work\" sort=\"number_type\"/&gt;\n&lt;/ontology&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/ontology/elements/action/","title":"Action","text":""},{"location":"dialog-domain-description-definition/ontology/elements/action/#definition","title":"Definition","text":"<pre><code>&lt;action name=\"alpha\"/&gt;\n</code></pre> <p>The <code>action</code> element describes an action in the domain of the application. </p> Attribute Type Description name string Required. The name of the action."},{"location":"dialog-domain-description-definition/ontology/elements/action/#parents","title":"Parents","text":"<ul> <li>&lt;ontology&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/ontology/elements/action/#children","title":"Children","text":"<p>None.</p>"},{"location":"dialog-domain-description-definition/ontology/elements/action/#behaviour","title":"Behaviour","text":"<p>The <code>action</code> element describes an action in the domain of the application. An action could be to show a particular menu, or to carry out a device action.</p> <p>Actions are part of perform goals.</p>"},{"location":"dialog-domain-description-definition/ontology/elements/action/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/ontology/elements/action/#action-to-make-a-call","title":"Action to make a call","text":"<pre><code>&lt;action name=\"make_call\"/&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/ontology/elements/individual/","title":"Individual","text":""},{"location":"dialog-domain-description-definition/ontology/elements/individual/#definition","title":"Definition","text":"<pre><code>&lt;individual name=\"i\" sort=\"s\"/&gt;\n</code></pre> <p>The <code>individual</code> element describes a thing that one can talk about.</p> Attribute Type Description name string Required. The name of the individual. sort string Required. The sort of the individual."},{"location":"dialog-domain-description-definition/ontology/elements/individual/#parents","title":"Parents","text":"<ul> <li>&lt;ontology&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/ontology/elements/individual/#children","title":"Children","text":"<p>None.</p>"},{"location":"dialog-domain-description-definition/ontology/elements/individual/#behaviour","title":"Behaviour","text":"<p>The <code>individual</code> element describes a thing that one can talk about -  an entity in the domain that the ontology is describing.</p> <p>All individuals are of a sort, and all predicates take individuals (of a specific sort) as arguments.</p> <p>Known limitations: Note that individuals cannot be numbers.</p>"},{"location":"dialog-domain-description-definition/ontology/elements/individual/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/ontology/elements/individual/#months","title":"Months","text":"<pre><code>  &lt;individual name=\"january\" sort=\"month\"/&gt;\n  &lt;individual name=\"february\" sort=\"month\"/&gt;\n  &lt;individual name=\"march\" sort=\"month\"/&gt;\n...\n  &lt;individual name=\"december\" sort=\"month\"/&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/ontology/elements/predicate/","title":"Predicate","text":""},{"location":"dialog-domain-description-definition/ontology/elements/predicate/#definition","title":"Definition","text":"<pre><code>&lt;predicate name=\"r\" sort=\"s\"/&gt;\n</code></pre> <p>A predicate ascribes some property to an individual. This individual is the argument of the predicate. A predicate requires its arguments to be of a specific sort. </p> Attribute Type Description name string Required. The name of the predicate. sort string Required. The semantic sort of arguments to the predicate. feature_of string Optional. The predicate of which this predicate is a feature (if any)."},{"location":"dialog-domain-description-definition/ontology/elements/predicate/#parents","title":"Parents","text":"<ul> <li>&lt;ontology&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/ontology/elements/predicate/#children","title":"Children","text":"<p>None.</p>"},{"location":"dialog-domain-description-definition/ontology/elements/predicate/#behaviour","title":"Behaviour","text":"<p>A predicate ascribes some property to an individual. This individual is the argument of the predicate. A predicate requires its arguments to be of a specific sort. </p> <p>If there is a sort <code>hour</code>, whose individuals are  integers in the range 0-23, there can be one predicate <code>current_hour</code>, and another one <code>alarm_hour</code>, of the sort <code>hour</code>. The first one is a part of the description of the current time, the sencond one i a part of the description of the current alarm time.</p> <p>Predicates in TDM typically take a single argument of a specified sort (i.e. they have arity 1). Predicates that do not take an argument (arity 0), have sort <code>Boolean</code>.</p> <p>Predicates can be features of other predicates. This is particularly useful for incremental search dialogue. For example, if each product belongs to a product category, one might want to search for products based on their category (among other things). To do this, the predicate for product category is defined as a feature of the predicate for products.</p>"},{"location":"dialog-domain-description-definition/ontology/elements/predicate/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/ontology/elements/predicate/#name-of-person-to-call","title":"Name of person to call","text":"<pre><code>&lt;predicate name=\"name_to_call\" sort=\"name\"&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/ontology/elements/predicate/#selected-product-predicate-with-a-feature-predicate-for-product-category","title":"Selected product predicate, with a feature predicate for product category","text":"<pre><code>&lt;predicate name=\"selected_product\" sort=\"product\"/&gt;\n\n&lt;predicate name=\"selected_category\" sort=\"category\" feature_of=\"selected_product\"/&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/ontology/elements/sort/","title":"Sort","text":""},{"location":"dialog-domain-description-definition/ontology/elements/sort/#definition","title":"Definition","text":"<pre><code>&lt;sort name=\"s\"/&gt;\n</code></pre> <p>The <code>sort</code> element describes a kind of thing that one can talk about. One can also think of it as a datatype declaration. All individuals are of a sort, and all predicates take arguments (individuals) of a specific sort.</p> Attribute Type Description name string Required. The name of the sort. dynamic boolean Optional. If set to <code>\"True\"</code>, new individuals of the sort can be added during runtime."},{"location":"dialog-domain-description-definition/ontology/elements/sort/#parents","title":"Parents","text":"<ul> <li>&lt;ontology&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/ontology/elements/sort/#children","title":"Children","text":"<p>None.</p>"},{"location":"dialog-domain-description-definition/ontology/elements/sort/#behaviour","title":"Behaviour","text":"<p>Sorts can be dynamic or static. For dynamic sorts,  new individuals of the sort can be added during runtime.</p> <p>Sorts can be user-defined or pre-defined. Only user-defined sorts need to be declared in the ontology.</p> <p>Pre-defined sorts in TDM are:</p> <ul> <li><code>Boolean</code>: <code>True</code> or <code>False</code></li> <li><code>Integer</code></li> <li><code>Real</code>: Real numbers represented as floats</li> <li><code>String</code>: Strings of characters.This is primarily used for literal answers dictated by the user, e.g. messages or names.</li> <li><code>Image</code>: String representing a URL of an image</li> <li><code>Webview</code>: String representing the URL of a webview</li> <li><code>Domain</code>:  The name of an other domain. This allows one to talk explicitly about domains, and can be thus used for meta dialogues, e.g. switching between domains.</li> </ul>"},{"location":"dialog-domain-description-definition/ontology/elements/sort/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/ontology/elements/sort/#sort-for-telephone-number-type","title":"Sort for telephone number type","text":"<pre><code>  &lt;sort name=\"number_type\"/&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/ontology/elements/sort/#sort-for-album-title-in-music-playing-app","title":"Sort for album title in music playing app","text":"<pre><code>  &lt;sort name=\"album_name\" dynamic=\"True\"/&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/service_interface/service_interface/","title":"Service Interface","text":""},{"location":"dialog-domain-description-definition/service_interface/service_interface/#definition","title":"Definition","text":"<p>The Service Interface (<code>service_interface.xml</code>) forwards an &lt;action&gt;, &lt;query&gt; or &lt;validator&gt;,  to a frontend service, http_service.</p>"},{"location":"dialog-domain-description-definition/service_interface/children/failure_reasons/","title":"Failure Reasons","text":""},{"location":"dialog-domain-description-definition/service_interface/children/failure_reasons/#definition","title":"Definition","text":"<pre><code>&lt;failure_reasons&gt;\n  &lt;failure_reason name=\"failure_reason_name\"/&gt;\n&lt;/failure_reasons&gt;\n</code></pre> <p>Specifies the reasons for an &lt;action&gt; to return a failure.</p> Attribute Type Description name string Required. The name of the failure reason. The names are written using lowercase separated by underscores, e.g. 'temperature_too_high'."},{"location":"dialog-domain-description-definition/service_interface/children/failure_reasons/#children","title":"Children","text":"<ul> <li>&lt;failure_reason&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/service_interface/children/failure_reasons/#behaviour","title":"Behaviour","text":"<p>The &lt;failure_reasons&gt; element in the service interface contains all the possible reasons for the &lt;target&gt; service inside an &lt;action&gt; to return a <code>fail</code> status in its response. </p> <p>Each of the reasons must be passed in a &lt;failure_reason&gt; child. For each &lt;failure_reason&gt;, the response from the target service must also contain a reason that matches the name of the &lt;failure_reason&gt;.</p> <p>It is possible for an &lt;action&gt; to not contain any &lt;failure_reason&gt;, in which case the &lt;action&gt; is expected to always return a <code>\"status\": \"success\"</code>.</p> <p>The <code>\"status\": \"fail\"</code> (and the &lt;failure_reason&gt;) is meant for action failures expected by the DDD developer. Such a failure could be, for instance, an action receiving a parameter with an invalid value (see the example below). This will trigger the system to report to the user why the action has failed. The failure utterance will need to be defined in the grammar.</p>"},{"location":"dialog-domain-description-definition/service_interface/children/failure_reasons/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/service_interface/children/failure_reasons/#set-temperature-with-a-failure-reason","title":"Set temperature with a failure reason","text":"<p>If the action in the target http_service receives a value for the parameter <code>degrees</code> above a specific threshold (e.g. \"27 degrees\"), the http_service sends back a response with <code>\"status\": \"fail\"</code> and the <code>\"reason\": \"temperature_too_high\"</code>.</p> <pre><code>&lt;action name=\"SetTemperature\"&gt;\n  &lt;parameters&gt;\n    &lt;parameter predicate=\"degrees\" format=\"value\"/&gt;\n  &lt;/parameters&gt;\n  &lt;failure_reasons&gt;\n    &lt;failure_reason name=\"temperature_too_high\"/&gt;\n  &lt;/failure_reasons&gt;\n  &lt;target&gt;\n    &lt;http endpoint=\"http://climate-http-service/set_temperature\"/&gt;\n  &lt;/target&gt;\n&lt;/action&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/service_interface/children/parameters/","title":"Parameters","text":""},{"location":"dialog-domain-description-definition/service_interface/children/parameters/#definition","title":"Definition","text":"<pre><code>  &lt;parameters&gt;\n    &lt;parameter predicate=\"predicate_name\" format=\"format\"/&gt;\n  &lt;/parameters&gt;\n</code></pre> <p>Specifies the parameters to be used as arguments by the target service.</p> Attribute Type Description predicate string Required. The name of the predicate that is used as a parameter. Should match the name of the corresponding predicate declared in the Ontology. Predicate names are written using lowercase separated by underscores, e.g. 'current_temperature'. format string Required. Specifies the field in the request from which the parameter should be taken. Available options: <ul><li>value</li><li>grammar_entry</li></ul>"},{"location":"dialog-domain-description-definition/service_interface/children/parameters/#children","title":"Children","text":"<ul> <li>&lt;parameter&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/service_interface/children/parameters/#behaviour","title":"Behaviour","text":"<p>The &lt;parameters&gt; element in the service interface contains all the parameters sent as arguments to the &lt;target&gt; service.</p> <p>Each of the parameters used by the specified target must be passed in a &lt;parameter&gt; child.</p>"},{"location":"dialog-domain-description-definition/service_interface/children/parameters/#format-attribute","title":"Format attribute","text":"<p>The <code>format</code> attribute specifies if the parameter passed to the target service has to be taken from the 'value' or 'grammar_entry' field of the request. </p>"},{"location":"dialog-domain-description-definition/service_interface/children/parameters/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/service_interface/children/parameters/#forward-a-call-to-a-frontend-with-a-selected-contact-and-phone","title":"Forward a Call to a frontend with a selected contact and phone","text":"<pre><code>&lt;action name=\"Call\"&gt;\n  &lt;parameters&gt;\n    &lt;parameter predicate=\"selected_contact\" format=\"value\"/&gt;\n    &lt;parameter predicate=\"selected_phone\" format=\"grammar_entry\"/&gt;\n  &lt;/parameters&gt;\n  &lt;failure_reasons/&gt;\n  &lt;target&gt;\n    &lt;frontend/&gt;\n  &lt;/target&gt;\n&lt;/action&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/service_interface/children/target/","title":"Target","text":""},{"location":"dialog-domain-description-definition/service_interface/children/target/#definition","title":"Definition","text":"<p><pre><code>  &lt;target&gt;\n    &lt;http endpoint=\"http://http-service/function_name\"/&gt;\n  &lt;/target&gt;\n</code></pre> <pre><code>  &lt;target&gt;\n    &lt;frontend/&gt;\n  &lt;/target&gt;\n</code></pre> <pre><code>  &lt;target&gt;\n    &lt;device_module device=\"NameDevice\"/&gt;\n  &lt;/target&gt;\n</code></pre></p> <p>Specifies the target service.</p>"},{"location":"dialog-domain-description-definition/service_interface/children/target/#_1","title":"Attribute Type Description     endpoint string Required. The url of the http_service endpoint followed by the name of the function it should run in that endpoint, e.g. 'http://climate-http-service/set_temperature'.","text":""},{"location":"dialog-domain-description-definition/service_interface/children/target/#_2","title":"Attribute Type Description     device string Required. The name of the device module to run.","text":""},{"location":"dialog-domain-description-definition/service_interface/children/target/#children","title":"Children","text":"<ul> <li>&lt;http&gt;</li> <li>&lt;frontend&gt;</li> <li>&lt;device_module&gt;</li> </ul>"},{"location":"dialog-domain-description-definition/service_interface/children/target/#behaviour","title":"Behaviour","text":"<p>The &lt;target&gt; element in the service interface specifies the target service that will handle its parent &lt;action&gt;, &lt;query&gt;, &lt;validator&gt; or &lt;entity_recognizer&gt;.</p>"},{"location":"dialog-domain-description-definition/service_interface/children/target/#_3","title":"<p>Points the parent element to a function of an http_service served on a Flask instance. The DDD sends a request to the http_service, performs the function in it and returns a response.</p>","text":""},{"location":"dialog-domain-description-definition/service_interface/children/target/#_4","title":"<p>Points the parent &lt;action&gt; to an integrated frontend service such as Twilio or Alexa. This allows for performing actions like forwarding a call using a frontend service.</p>","text":""},{"location":"dialog-domain-description-definition/service_interface/children/target/#_5","title":"<p>Points the parent element to a device module. This will run a class inside the device module which must have the same name as the parent &lt;action&gt;, &lt;query&gt;, etc.</p>","text":""},{"location":"dialog-domain-description-definition/service_interface/children/target/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/service_interface/children/target/#set-the-temperature-to-a-specific-value-using-an-http_service","title":"Set the temperature to a specific value using an http_service <pre><code>&lt;action name=\"SetTemperature\"&gt;\n  &lt;parameters&gt;\n    &lt;parameter predicate=\"degrees\" format=\"value\"/&gt;\n  &lt;/parameters&gt;\n  &lt;failure_reasons&gt;\n    &lt;failure_reason name=\"temperature_too_high\"/&gt;\n  &lt;/failure_reasons&gt;\n  &lt;target&gt;\n    &lt;http endpoint=\"http://climate-http-service/set_temperature\"/&gt;\n  &lt;/target&gt;\n&lt;/action&gt;\n</code></pre>","text":""},{"location":"dialog-domain-description-definition/service_interface/children/target/#forward-a-call-action-to-a-frontend-service","title":"Forward a Call action to a frontend service <pre><code>&lt;action name=\"Call\"&gt;\n  &lt;parameters&gt;\n    &lt;parameter predicate=\"phone_number\" format=\"grammar_entry\"/&gt;\n  &lt;/parameters&gt;\n  &lt;failure_reasons/&gt;\n  &lt;target&gt;\n    &lt;frontend/&gt;\n  &lt;/target&gt;\n&lt;/action&gt;\n</code></pre>","text":""},{"location":"dialog-domain-description-definition/service_interface/children/target/#query-a-device-module-about-the-current-temperature-in-a-location","title":"Query a device module about the current temperature in a location <pre><code>&lt;query name=\"current_temperature\"&gt;\n  &lt;parameters&gt;\n    &lt;parameter predicate=\"location\" format=\"grammar_entry\"/&gt;\n  &lt;/parameters&gt;\n  &lt;target&gt;\n    &lt;device_module device=\"ClimateDevice\"/&gt;\n  &lt;/target&gt;\n&lt;/query&gt;\n</code></pre>","text":""},{"location":"dialog-domain-description-definition/service_interface/elements/action/","title":"Action","text":""},{"location":"dialog-domain-description-definition/service_interface/elements/action/#definition","title":"Definition","text":"<pre><code>&lt;action name=\"ActionName\"&gt;\n</code></pre> <p>Performs an action in http_service, device module or frontend service.</p> Attribute Type Description name string Required. The name of the action. Action names are written according to the PascalCase convention, e.g. 'SetTemperature'."},{"location":"dialog-domain-description-definition/service_interface/elements/action/#children","title":"Children","text":"<ul> <li>&lt;parameters&gt;<ul> <li>&lt;parameter&gt;</li> </ul> </li> <li>&lt;failure_reasons&gt;<ul> <li>&lt;failure_reason&gt;</li> </ul> </li> <li>&lt;target&gt;<ul> <li>&lt;http&gt;</li> <li>&lt;frontend&gt;</li> </ul> </li> </ul>"},{"location":"dialog-domain-description-definition/service_interface/elements/action/#behaviour","title":"Behaviour","text":"<p>The &lt;action&gt; element in the service interface connects the corresponding &lt;invoke_service_action&gt; element in the domain to a specific service action inside &lt;target&gt;. The target service must be either an http_service or frontend service, which would return either <code>success</code> or <code>fail</code> status inside an action response.</p> <p>Each of the parameters used by the specified &lt;target&gt; must be passed under &lt;parameters&gt;.</p> <p>If the &lt;action&gt; contains a &lt;failure_reason&gt;, the target service must be able to return a <code>fail</code> status with the reason name in the response. Check the documentation of this child element for more information.</p>"},{"location":"dialog-domain-description-definition/service_interface/elements/action/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/service_interface/elements/action/#set-temperature","title":"Set temperature","text":"<pre><code>&lt;action name=\"SetTemperature\"&gt;\n  &lt;parameters&gt;\n    &lt;parameter predicate=\"degrees\" format=\"value\"/&gt;\n  &lt;/parameters&gt;\n  &lt;failure_reasons&gt;\n    &lt;failure_reason name=\"temperature_too_high\"/&gt;\n  &lt;/failure_reasons&gt;\n  &lt;target&gt;\n    &lt;http endpoint=\"http://climate-http-service/set_temperature\"/&gt;\n  &lt;/target&gt;\n&lt;/action&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/service_interface/elements/action/#forward-a-call","title":"Forward a Call","text":"<pre><code>&lt;action name=\"Call\"&gt;\n  &lt;parameters&gt;\n    &lt;parameter predicate=\"phone_number\" format=\"grammar_entry\"/&gt;\n  &lt;/parameters&gt;\n  &lt;failure_reasons/&gt;\n  &lt;target&gt;\n    &lt;frontend/&gt;\n  &lt;/target&gt;\n&lt;/action&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/service_interface/elements/query/","title":"Query","text":""},{"location":"dialog-domain-description-definition/service_interface/elements/query/#definition","title":"Definition","text":"<pre><code>&lt;query name=\"query_name\"&gt;\n</code></pre> <p>Requests information from an http_service.</p> Attribute Type Description name string Required. The name of the predicate that is requesting the information. Should match the name of the corresponding predicate of the invoke_service_query in the domain. Query names are written using lowercase separated by underscores, e.g. 'current_temperature'."},{"location":"dialog-domain-description-definition/service_interface/elements/query/#children","title":"Children","text":"<ul> <li>&lt;parameters&gt;<ul> <li>&lt;parameter&gt;</li> </ul> </li> <li>&lt;target&gt;<ul> <li>&lt;http&gt;</li> </ul> </li> </ul>"},{"location":"dialog-domain-description-definition/service_interface/elements/query/#behaviour","title":"Behaviour","text":"<p>The &lt;query&gt; element in the service interface connects the corresponding &lt;invoke_service_query&gt; element in the domain to a specific service query inside &lt;target&gt;. The target service must be  http_service which returns a query response.</p> <p>Each of the parameters used by the specified &lt;target&gt; must be passed under &lt;parameters&gt;.</p>"},{"location":"dialog-domain-description-definition/service_interface/elements/query/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/service_interface/elements/query/#query-a-http-service-about-the-current-temperature-in-a-location","title":"Query a http service about the current temperature in a location","text":"<pre><code>&lt;query name=\"current_temperature\"&gt;\n  &lt;parameters&gt;\n    &lt;parameter predicate=\"location\" format=\"grammar_entry\"/&gt;\n  &lt;/parameters&gt;\n  &lt;target&gt;\n    &lt;http endpoint=\"http://climate-http-service/current_temperature\"/&gt;\n  &lt;/target&gt;\n&lt;/query&gt;\n</code></pre>"},{"location":"dialog-domain-description-definition/service_interface/elements/validator/","title":"Validator","text":""},{"location":"dialog-domain-description-definition/service_interface/elements/validator/#definition","title":"Definition","text":"<pre><code>&lt;validator name=\"ValidatorName\"&gt;\n</code></pre> <p>Checks the validity of some predicate in an http_service.</p> Attribute Type Description name string Required. The name of the validator class. Names are written according to the PascalCase convention, e.g. 'CityRecognizer'."},{"location":"dialog-domain-description-definition/service_interface/elements/validator/#children","title":"Children","text":"<ul> <li>&lt;parameters&gt;<ul> <li>&lt;parameter&gt;</li> </ul> </li> <li>&lt;target&gt;<ul> <li>&lt;http&gt;</li> </ul> </li> </ul>"},{"location":"dialog-domain-description-definition/service_interface/elements/validator/#behaviour","title":"Behaviour","text":"<p>The &lt;validator&gt; element in the service interface checks the validity of a parameter using the specified module in &lt;target&gt;. The target service must be an http_service, which would return either <code>true</code> or <code>false</code> as the value for <code>\"is_valid\"</code> inside a validator response.</p> <p>If the target module returns a <code>\"is_valid\": false</code>, that will trigger the system to reject the user utterance, and explain to the user why the parameter was rejected.</p>"},{"location":"dialog-domain-description-definition/service_interface/elements/validator/#examples","title":"Examples","text":""},{"location":"dialog-domain-description-definition/service_interface/elements/validator/#check-in-an-http_service-if-the-value-and-grammar-entry-for-the-destination-city-are-valid","title":"Check in an http_service if the value and grammar entry for the destination city are valid","text":"<pre><code>  &lt;validator name=\"CityValidity\"&gt;\n    &lt;parameters&gt;\n      &lt;parameter predicate=\"dest_city\" format=\"value\"/&gt;\n      &lt;parameter predicate=\"dest_city\" format=\"grammar_entry\"/&gt;\n    &lt;/parameters&gt;\n    &lt;target&gt;\n      &lt;http endpoint=\"http://climate-http-service:10100/city_validity\"/&gt;\n    &lt;/target&gt;\n  &lt;/validator&gt;\n</code></pre>"},{"location":"for-dialog-designers/","title":"Introduction","text":"<p>The task of the dialog designer is to define and design the dialog domain and the flow of the conversations in that domain, which will result in building a domain-specific dialog system.</p> <p>Thanks to the principle of separation of concerns that underpins TDM, where knowledge about the domain (e.g., a phone book domain or a navigation domain) is separated from general knowledge about dialog, dialog designers can focus on defining domain-specific knowledge, such as information about concepts.</p> <p>Designers can also focus on what words should be used to talk about these concepts, although specific languages are contained in grammars that are themselves separated from both domain and dialog knowledge in order to simplify expansion to even more languages.</p> <p>General dialog capabilities such as:</p> <ul> <li>ensuring that users can say anything at anytime</li> <li>the handling of questions and answers</li> <li>providing feedback</li> <li>grounding</li> <li>topic switching</li> <li>incremental search</li> </ul> <p>are all built into TDM and do not need to be provided by dialog designers. This makes it easier to build dialog systems since general dialog strategies need not be reinvented each time a new system is built. It allows the dialog designer to focus on domain-specific design.</p>"},{"location":"for-dialog-designers/#dialog-domain-descriptions","title":"Dialog Domain Descriptions","text":"<p>In TDM a domain-specific application is implemented in the form of a Dialog Domain Description (DDD). A DDD is a declarative description of a particular dialog domain.</p> <p>Firstly, it contains an ontology specifying all the things (actions, predicates and individuals) that we want to be able to talk about.</p> <p>Secondly, a domain contains dialog plans representing the desired flow of the dialog.</p> <p>Thirdly, a grammar defines the words and expressions that the user and system can use in talking about the domain.</p> <p>Lastly, through a service interface we can connect the information in the dialog to the real world and vice versa.</p>"},{"location":"for-dialog-designers/examples/","title":"Examples","text":"<p>Below are examples for you to imitate. Find one that matches your desired functionality and start stealing ideas.</p> <p>Remember to work test driven, adding one test at a time, then making it work, according to the tutorial.</p>"},{"location":"for-dialog-designers/examples/#basic-action","title":"Basic action","text":"<p>This example is featured in the tutorial.</p> <p>Let your user do an action, using an <code>entity recognizer</code> for its <code>findout</code>. In this case, call a contact where the contact name is the recognized entity.</p> <pre><code>U&gt; Call John\nS&gt; Calling John.\n</code></pre> <p>This is an example of the basic action, answer and feedback concepts in TDM. It shows what is needed in order to perform an <code>action</code> that you implement yourself in the python <code>service interface</code>. In addition, it uses an <code>entity recognizer</code> to recognize contacts during run time.</p> <p>The source code is available on Github.</p>"},{"location":"for-dialog-designers/examples/#basic-query","title":"Basic query","text":"<p>Let your user ask a question. While similar to the basic action example, a query lets the system speak an answer to a question rather than performing an action. In this case, it answers what phone number a contact has.</p> <pre><code>U&gt; What is John's number?\nS&gt; John's number is 0701234567.\n</code></pre> <p>This is an example of the basic query and answer concepts in TDM. It shows what is needed in order to ask a <code>query</code> that is answered by the system. You implement the answer logic yourself in the python <code>service interface</code>.</p> <p>The source code is available on Github.</p>"},{"location":"for-dialog-designers/examples/#parameter-validation","title":"Parameter validation","text":"<p>Should some actions or questions be unavailable, disallowed or prohibited for your user? Parameter validation makes it easy to decide at run-time. This example is based on the basic action example, disallowing phone calls to contacts with no phone number.</p> <pre><code>U&gt; Call Andy\nS&gt; Andy has no phone number.\n</code></pre> <p>When a service is queried for parameters to actions and queries, the parameter is validated against all matching validators. If invalid, a specific grammar entry is used to provide system feedback and the answer is neglected.</p> <p>The source code is available on Github.</p>"},{"location":"for-dialog-designers/examples/#incremental-search","title":"Incremental search","text":"<p>Is your user looking for a single item in a set of many? Make sure your application asks just the perfect amount of questions to find one and only one match. In this case, contacts to call are searched with first and last names.</p> <pre><code>U&gt; Call John\nS&gt; What's his last name?\nU&gt; Johnson\nS&gt; Calling John Johnson at 0702446698.\n</code></pre> <p>Incremental search utilizes predicate features, which are declared in the ontology of the DDD. When a service is queried for individuals of the predicate, the features need to match. By asking the user to specify more features, the search can be narrowed down to finally match a single individual.</p> <p>The source code is available on Github.</p>"},{"location":"for-dialog-designers/examples/#android","title":"Android","text":"<p>Is your Android device placing the calls for your users? Forward your actions to the Android frontend and do the job there.</p> <pre><code>U&gt; Call John\nS&gt; Calling John.\n</code></pre> <p>This example combines the examples of action, query, parameter validation and entity recognition into one DDD and forwards the 'Call' action to the frontend. It can be used together with the android-example, an Android app to showcase how your frontend hears, speaks and thinks.</p> <p>The source code is available on Github.</p>"},{"location":"for-dialog-designers/rasa_nlu/","title":"Using Rasa NLU","text":"<p>For better language coverage of your DDDs, you may want to enable the machine-learning based Rasa NLU.</p> <p>This guide is written for version <code>0.14.6</code> of Rasa NLU.</p> <p>Before getting started, make sure to use hosted a Rasa NLU with the necessary dependencies installed. For instance, if you plan on using a Spacy pipeline, ensure that it has the appropriate language models and Spacy itself installed.</p> <p>For more information, read up on the Rasa NLU documentation. We recommend running it in Docker.</p>"},{"location":"for-dialog-designers/rasa_nlu/#generate-training-data","title":"Generate training data","text":"<p>In order to use Rasa NLU with TDM, we need to train the model. The Tala SDK can be used to generate training data for your DDD: <code>tala generate rasa my-ddd eng &gt; training_data.yml</code>.</p>"},{"location":"for-dialog-designers/rasa_nlu/#configure-the-pipeline","title":"Configure the pipeline","text":"<p>The generated training data comes with the <code>spacy_sklearn</code> pipeline by default. At the head of the training data we find:</p> <pre><code>language: \"en\"\n\npipeline: \"spacy_sklearn\"\n\ndata: |\n...\n</code></pre> <p>Here, the pre-configured <code>spacy_sklearn</code> pipeline will be used, but there are others to choose from too.</p> <p>It's also possible to configure the pipeline oneself, by listing the components explicitly. For instance, this is the <code>spacy_sklearn</code> pipeline: <pre><code>pipeline:\n- name: \"SpacyNLP\"\n- name: \"SpacyTokenizer\"\n- name: \"RegexFeaturizer\"\n- name: \"SpacyFeaturizer\"\n- name: \"CRFEntityExtractor\"\n- name: \"EntitySynonymMapper\"\n- name: \"SklearnIntentClassifier\"\n</code></pre></p>"},{"location":"for-dialog-designers/rasa_nlu/#add-pre-trained-named-entity-recognizers-ners","title":"Add pre-trained named entity recognizers (NERs)","text":"<p>Rasa NLU supports pre-trained NERs to be part of the pipeline, for instance the NERs from Duckling and Spacy which can be used together with TDM.</p>"},{"location":"for-dialog-designers/rasa_nlu/#duckling","title":"Duckling","text":"<p>In this version of TDM, the following Duckling entities are supported:</p> <ul> <li><code>number</code>: maps to the <code>integer</code> sort.</li> <li><code>time</code>: maps to the <code>datetime</code> sort.</li> </ul> <p>To enable Duckling, make sure it's available to the Rasa server and add its component to an explicit pipeline:</p> <pre><code>- name: \"DucklingHTTPExtractor\"\n  url: \"http://duckling:8000\"\n</code></pre> <p>Here, Duckling is available to the Rasa server at <code>http://duckling:8000</code>. The <code>spacy_sklearn</code> pipeline with the addition of Duckling then becomes:</p> <pre><code>pipeline:\n- name: \"SpacyNLP\"\n- name: \"SpacyTokenizer\"\n- name: \"RegexFeaturizer\"\n- name: \"SpacyFeaturizer\"\n- name: \"CRFEntityExtractor\"\n- name: \"EntitySynonymMapper\"\n- name: \"SklearnIntentClassifier\"\n- name: \"DucklingHTTPExtractor\"\n  url: \"http://duckling:8000\"\n</code></pre>"},{"location":"for-dialog-designers/rasa_nlu/#spacy","title":"Spacy","text":"<p>In this version of TDM, the following Spacy entity types are supported:</p> <ul> <li><code>PERSON</code> and <code>PER</code>: map to the <code>person_name</code> sort.</li> </ul> <p>To enable Spacy, make sure it's available to the Rasa server and use a pipeline that contains <code>SpacyEntityExtractor</code>, e.g.</p> <pre><code>pipeline:\n- name: \"SpacyNLP\"\n- name: \"SpacyTokenizer\"\n- name: \"RegexFeaturizer\"\n- name: \"SpacyFeaturizer\"\n- name: \"CRFEntityExtractor\"\n- name: \"EntitySynonymMapper\"\n- name: \"SklearnIntentClassifier\"\n- name: \"SpacyEntityExtractor\"\n</code></pre>"},{"location":"for-dialog-designers/rasa_nlu/#train-the-model","title":"Train the model","text":"<p>Once the training data and pipeline are configured, train your model according to the Rasa NLU HTTP API.</p> <p>For instance with:</p> <pre><code>curl -XPOST -H 'Content-Type: application/x-yml' 'http://my-rasa-nlu.my-cloud.com:5000/train?project=my-ddd&amp;model=my-model' --data-binary @training_data.yml\n</code></pre> <p>In this case, the URL, <code>project</code> and <code>model</code> also need to be specified in the DDD config in the next step.</p>"},{"location":"for-dialog-designers/rasa_nlu/#configure-the-ddd","title":"Configure the DDD","text":"<p>Make sure to configure Rasa NLU in the DDD config, for instance at <code>my_ddd/ddd.config.json</code>, by adding language specific <code>rasa_nlu</code> objects. For instance, for English:</p> <pre><code>{\n    \"rasa_nlu\": {\n        \"eng\": {\n            \"url\": \"http://my-rasa-nlu.my-cloud.com:5000/parse\",\n            \"config\": {\n                \"project\": \"my-ddd\",\n                \"model\": \"my-model\"\n            }\n        }\n    }\n}\n</code></pre> <p>The <code>rasa_nlu</code> object contains the following fields:</p> <ul> <li><code>url</code>: A string URL, pointing to the <code>/parse</code> endpoint of a Rasa NLU server.</li> <li><code>config</code>: An object sent in the JSON payload when TDM posts it to the <code>url</code>. It can contain for instance <code>project</code> and <code>model</code>, as specified by the Rasa NLU HTTP API. TDM also adds the field <code>\"q\": \"&lt;user utterance&gt;\"</code>.</li> </ul> <p>If Rasa NLU should not be used for a particular language, remove the language altogether:</p> <pre><code>{\n    \"rasa_nlu\": {}\n}\n</code></pre>"},{"location":"for-dialog-designers/tutorial/","title":"Tutorial","text":"<p>This tutorial covers the steps needed to design a basic dialog domain description (DDD).</p>"},{"location":"for-dialog-designers/tutorial/#step-1-create-the-boilerplate","title":"Step 1. Create the boilerplate","text":"<p>First we need to create the DDD boilerplate.</p> <pre><code>mkdir ddd_root; cd ddd_root\ntdm create-ddd basic_action\n</code></pre> <p>Before your DDD can be used, it needs to be built.</p> <pre><code>tdm build\n</code></pre> <p>To make sure your DDD and all dependencies are working as intended, let's run interaction tests.</p> <pre><code>tdm test eng\n</code></pre> <pre><code>Ran 1 test in 0.386s\n\nOK\n</code></pre> <p>The test reports OK. We're ready to start adding dialogue to our DDD.</p>"},{"location":"for-dialog-designers/tutorial/#step-2-interaction-test","title":"Step 2. Interaction test","text":"<p>Since we're working test driven, let's add an interaction test first.</p> <p>Interaction tests verifiy the dialogue, providing user utterances and specifying the expected system responses.</p> <p>Modify <code>basic_action/test/interaction_tests_eng.txt</code>, add a test for the new dialogue that we want to support. We proceed one step at a time, starting with a very simple dialogue.</p> <pre><code>--- call\nS&gt; What would you like to do?\nU&gt; call\nS&gt; Who do you want to call?\n</code></pre> <p>Let's run the tests again to verify that they fail. (We don't need to rebuild after only modifying tests.)</p> <pre><code>tdm test eng\n</code></pre> <p>TDM will complain that it does not understand instead the user.</p> <pre><code>On line 7 of basic_action/test/interaction_tests_eng.txt,\nexpected:\n  S&gt; Who do you want to call?\n\nbut got:\n  S&gt; I heard you say call. I don't understand. So, What would you like to do?\n</code></pre> <p>This happens because there's no notion of calling in the DDD.</p>"},{"location":"for-dialog-designers/tutorial/#step-3-ontology","title":"Step 3. Ontology","text":"<p>The ontology declares what users can do and talk about, much like header files. In order to call someone we need to add the notion of calling, and the notion of people, to the ontology.</p> <p>Our boilerplate ontology is basically empty, in <code>basic_action/ontology.xml</code>.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;ontology name=\"BasicActionOntology\"&gt;\n&lt;/ontology&gt;\n</code></pre> <p>We extend it with an action to make calls:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;ontology name=\"BasicActionOntology\"&gt;\n  &lt;action name=\"call\"/&gt;\n&lt;/ontology&gt;\n</code></pre> <p>Let's build and run the tests again to see if we missed something.</p> <pre><code>tdm build\n</code></pre> <p>We now receive a warning.</p> <pre><code>Generating models for DDD 'basic_action'.\n[eng] Cleaning build directory 'build/eng'...Done.\n[eng] Generating grammar.\n\nMissing grammar entry: How do speakers talk about the action 'call'? Possible contents of the &lt;action&gt; element:\n\n  &lt;verb-phrase&gt;\n  &lt;noun-phrase&gt;\n  &lt;one-of&gt;\n[eng] Finished generating grammar.\nFinished generating models for DDD 'basic_action'.\nTraining models for DDD 'basic_action'.\n[eng] Asserting that language grammar is lower case...Done.\n[eng] Compiling generated grammar.\n[eng] Finished compiling generated grammar.\n[eng] No ASR specified, will not build language model.\n[eng] Copying ASR language modules from '/private/tmp/ddd_root/basic_action/grammar/build/eng' to ddd directory...Done.\n[eng] Not using word list correction, will not generate word list.\n</code></pre> <p>Apparently, ontology entries require their corresponding grammar entries.</p>"},{"location":"for-dialog-designers/tutorial/#step-4-grammar","title":"Step 4. Grammar","text":"<p>The grammar defines what our users and system can say. Our previous build attempt told us to add an entry for the <code>call</code> action. Let's extend <code>basic_action/grammar/grammar_eng.xml</code> with the <code>call</code> action.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;grammar&gt;\n  &lt;action name=\"call\"&gt;\n    &lt;verb-phrase&gt;\n      &lt;verb ref=\"call\"/&gt;\n    &lt;/verb-phrase&gt;\n  &lt;/action&gt;\n\n  &lt;lexicon&gt;\n    &lt;verb id=\"call\"&gt;\n      &lt;infinitive&gt;call&lt;/infinitive&gt;\n    &lt;/verb&gt;\n  &lt;/lexicon&gt;\n&lt;/grammar&gt;\n</code></pre> <p>This grammar definition describes that the action <code>call</code> can be referenced with a verb phrase containing the verb <code>call</code>. It also contains a lexicon describing the grammar of <code>call</code> in English. We only need to specifiy the infinitive form for the verb; the other forms, such as imperative, are derived automatically.</p> <p>Let's build and test.</p> <pre><code>tdm build\ntdm test eng\n</code></pre> <pre><code>On line 7 of basic_action/test/interaction_tests_eng.txt,\nexpected:\n  S&gt; Who do you want to call?\n\nbut got:\n  S&gt; The function is not implemented.\n</code></pre> <p>TDM replies! It means we did something right but apparently we need to implement the functionality as well. We need to add a plan for calling.</p>"},{"location":"for-dialog-designers/tutorial/#step-5-plan","title":"Step 5. Plan","text":"<p>A plan is a description of the steps required by the system in order to fulfill a goal. For example, in order to make a phone call, the system first needs to find out who to call. (Typically, a goal is something that is expressed by the user in dialog, but it can also be activated by an event.)</p> <p>Although plans are sequences of instructions, designing a dialog plan is different from writing a software program, since plans are interpreted much less strictly than a typical programming language. Instead, it is more appropriate to see plans as behavioural scripts: simplified descriptions that guide the system in executing a commonly performed routine. The \"brain\" - in TDM's case the dialog move engine - uses the plan as a stereotypical or ideal scenario, rather than as literal instructions to be executed blindly. For example, if the system, in following a plan for making phone calls, asks the user who to call, and the user follows up by asking about the weather, TDM doesn't see this as an exception or failure of the phone-calling plan; instead, it activates a weather plan (if it has one), and is open for resuming the phone-calling activity at a later point.</p> <p>Seeing plans as behavioural scripts rather than programs can be helpful in the design process. As a dialog developer, you are not supposed to try to imagine all the possible paths that a conversation can take, and to write rules or logic for all those paths. Instead, general dialog capabilities such as asking control questions in the case of uncertainty or switching between topics are provided by the dialog engine (the \"brain\").</p> <p>Zooming in to the specific details, let's first check the boilerplate, in <code>basic_action/domain.xml</code>.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;domain name=\"BasicActionDomain\" is_super_domain=\"true\"&gt;\n  &lt;goal type=\"perform\" action=\"top\"&gt;\n    &lt;plan&gt;\n      &lt;forget_all/&gt;\n      &lt;findout type=\"goal\"/&gt;\n    &lt;/plan&gt;\n  &lt;/goal&gt;\n&lt;/domain&gt;\n</code></pre> <p>We get the top goal for free. This is the only goal on TDM's agenda at startup. It will make TDM ask us which goal we want to achieve. Remember the corresponding default interaction test.</p> <pre><code>--- main menu\nS&gt; What would you like to do?\n</code></pre> <p>Anyway, let's add a new goal and plan, corresponding to our <code>call</code> action. Extend the domain.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;domain name=\"BasicActionDomain\" is_super_domain=\"true\"&gt;\n  &lt;goal type=\"perform\" action=\"top\"&gt;\n    &lt;plan&gt;\n      &lt;forget_all/&gt;\n      &lt;findout type=\"goal\"/&gt;\n    &lt;/plan&gt;\n  &lt;/goal&gt;\n  &lt;goal type=\"perform\" action=\"call\"&gt;\n    &lt;plan&gt;\n      &lt;findout type=\"wh_question\" predicate=\"selected_contact\"/&gt;\n      &lt;invoke_service_action name=\"Call\" postconfirm=\"true\"/&gt;\n    &lt;/plan&gt;\n  &lt;/goal&gt;\n&lt;/domain&gt;\n</code></pre> <p>In <code>ontology.xml</code>, we also need to add the <code>selected_contact</code> predicate and its sort:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;ontology name=\"BasicActionOntology\"&gt;\n  &lt;action name=\"call\"/&gt;\n  &lt;sort name=\"contact\" dynamic=\"true\"/&gt;\n  &lt;predicate name=\"selected_contact\" sort=\"contact\"/&gt;\n&lt;/ontology&gt;\n</code></pre> <p>A dynamic sort means its individuals are decided during run time, through the service interface.</p> <p>Now build the DDD.</p> <pre><code>tdm build\n</code></pre> <pre><code>Generating models for DDD 'basic_action'.\n[eng] Cleaning build directory 'build/eng'...Done.\n[eng] Generating grammar.\n\nMissing grammar entry: How does the system ask about 'selected_contact'?\n\nExample:\n\n  &lt;question speaker=\"system\" predicate=\"selected_contact\" type=\"wh_question\"&gt;\n    &lt;utterance&gt;what is selected contact&lt;/utterance&gt;\n  &lt;/question&gt;\n\n\n[eng] Finished generating grammar.\nFinished generating models for DDD 'basic_action'.\nTraining models for DDD 'basic_action'.\n[eng] Asserting that language grammar is lower case...Done.\n[eng] Compiling generated grammar.\n[eng] Finished compiling generated grammar.\n[eng] No ASR specified, will not build language model.\n[eng] Copying ASR language modules from '/private/tmp/ddd_root/basic_action/grammar/build/eng' to ddd directory...Done.\n[eng] Not using word list correction, will not generate word list.\n</code></pre> <p>We got a new warning about a missing grammar entry. When referencing a predicate in a plan, we apparently need to specify its grammar entry. Since we're using a findout, the grammar entry is to define how TDM should speak the corresponding <code>question</code>. Let's extend <code>basic_action/grammar/grammar_eng.xml</code> with the following:</p> <pre><code>  &lt;question speaker=\"system\" predicate=\"selected_contact\" type=\"wh_question\"&gt;\n    &lt;utterance&gt;who do you want to call&lt;/utterance&gt;\n  &lt;/question&gt;\n</code></pre> <p>Build and test.</p> <pre><code>tdm build\ntdm test eng\n</code></pre> <pre><code>Ran 2 tests in 0.363s\n\nOK\n</code></pre> <p>Everything works as expected.</p>"},{"location":"for-dialog-designers/tutorial/#step-6-service-interface","title":"Step 6. Service interface","text":"<p>In the next step, we want the user to be able to reply to the question about who to call. We thus extend <code>basic_action/test/interaction_tests_eng.txt</code> accordingly:</p> <pre><code>--- call\nS&gt; What would you like to do?\nU&gt; call\nS&gt; Who do you want to call?\nU&gt; John\nS&gt; Calling John.\n</code></pre> <p>Test:</p> <pre><code>tdm test eng\n</code></pre> <pre><code>On line 9 of basic_action/test/interaction_tests_eng.txt,\nexpected:\n  S&gt; Calling John.\n\nbut got:\n  S&gt; I heard you say John. I don't understand. So, Who do you want to call?\n</code></pre> <p>As can be seen, the system doesn't understand John. We need to add an entity recognizer to our service interface. It needs to recognize entities of our <code>contact</code> sort. Our boilerplate service interface is basically empty, in <code>basic_action/service_interface.xml</code>, so let's just add it.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;service_interface&gt;\n    &lt;entity_recognizer name=\"BasicActionRecognizer\"&gt;\n        &lt;target&gt;\n            &lt;http endpoint=\"http://127.0.0.1:10102/contact_recognizer\"/&gt;\n        &lt;/target&gt;\n    &lt;/entity_recognizer&gt;\n&lt;/service_interface&gt;\n</code></pre> <p>Here, we use an HTTP target with an end-point that runs an HTTP service. An HTTP service can be hosted anywhere where TDM can reach it. In this tutorial, we assume that the service is hosted locally, i.e. on the same machine as TDM (127.0.0.1), but this is not required. Generally, the developer can choose any web development framework as long as it is within the constraints of the HTTP service API protocol.</p> <p>The entity recognizer is responsible for finding all dynamic entities in utterances. Its accuracy affects the behaviour of the dialogue system. Since the search is conducted during runtime, particular care should be taken to ensure that the method is accurate, robust and has sufficient performance. See the API documentation for details about request and response formats for entity recognizers.</p> <p>In this case, we are providing you with a ready-to-use HTTP service, which includes an entity recognizer. It uses Flask web framework and jinja2 templates in plain python.</p> <p>As the service is hosted locally in this case, we recommend to save it in the DDD folder <code>basic_action</code>. Then, spawn it with Flask:</p> <pre><code>export FLASK_APP=basic_action/http_service_example.py\nflask run --port=10102\n</code></pre> <p>And then, build and test.</p> <pre><code>tdm build\ntdm test eng\n</code></pre> <pre><code>UnexpectedActionException: Expected one of the known actions [] but got 'Call'\n</code></pre> <p>Great, TDM appears to understand John. It wants to execute the <code>Call</code> action using our service interface, but could not find it. Let's add it to <code>basic_action/service_interface.xml</code>.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;service_interface&gt;\n    &lt;action name=\"Call\"&gt;\n        &lt;parameters&gt;\n            &lt;parameter predicate=\"selected_contact\" format=\"value\"/&gt;\n        &lt;/parameters&gt;\n        &lt;failure_reasons/&gt;\n        &lt;target&gt;\n            &lt;http endpoint=\"http://127.0.0.1:10102/call\"/&gt;\n        &lt;/target&gt;\n    &lt;/action&gt;\n    &lt;entity_recognizer name=\"BasicActionRecognizer\"&gt;\n        &lt;target&gt;\n            &lt;http endpoint=\"http://127.0.0.1:10102/contact_recognizer\"/&gt;\n        &lt;/target&gt;\n    &lt;/entity_recognizer&gt;\n&lt;/service_interface&gt;\n</code></pre> <p>To implement the 'call' action, see the API documentation for details about request and response formats for actions. However, you can also find and use the 'call' action that has been already implemented in the example HTTP service.</p> <p>Build again.</p> <pre><code>tdm build\n</code></pre> <pre><code>Generating models for DDD 'basic_action'.\n[eng] Cleaning build directory 'build/eng'...Done.\n[eng] Generating grammar.\n\nMissing grammar entry: How does the system report that the service action 'Call' ended? Example:\n\n  &lt;report action=\"Call\" status=\"ended\"&gt;\n    &lt;utterance&gt;performed Call&lt;/utterance&gt;\n  &lt;/report&gt;\n\n\n[eng] Finished generating grammar.\nFinished generating models for DDD 'basic_action'.\nTraining models for DDD 'basic_action'.\n[eng] Asserting that language grammar is lower case...Done.\n[eng] Compiling generated grammar.\n[eng] Finished compiling generated grammar.\n[eng] No ASR specified, will not build language model.\n[eng] Copying ASR language modules from '/private/tmp/ddd_root/basic_action/grammar/build/eng' to ddd directory...Done.\n[eng] Not using word list correction, will not generate word list.\n</code></pre> <p>As can be seen, we need to add a grammar entry for the service action <code>Call</code>. This is required because we said so in the plan. Remember <code>postconfirm=\"true\"</code> in the <code>invoke_service_action</code> entry of the plan?</p> <p>Let's add a <code>report</code> grammar entry in <code>basic_action/grammar/grammar_eng.xml</code>. We can reference the <code>selected_contact</code> predicate since its part of the <code>findout</code> entries of the plan.</p> <pre><code>  &lt;report action=\"Call\" status=\"ended\"&gt;\n    &lt;utterance&gt;calling &lt;individual predicate=\"selected_contact\"/&gt;&lt;/utterance&gt;\n  &lt;/report&gt;\n</code></pre> <p>Build and test.</p> <pre><code>tdm build\ntdm test eng\n</code></pre> <pre><code>Ran 2 tests in 0.363s\n\nOK\n</code></pre> <p>Success!</p>"},{"location":"for-dialog-designers/tutorial/#step-7-one-shot-utterances","title":"Step 7. One-shot utterances","text":"<p>The DDD so far handles very simple dialogues where the user enters one piece of information at a time. In order to support one-shot utterances such as \"call John\" containing several pieces of information (in this case an action and an answer regarding who to call), we need to extend the grammar. First we add a failing interaction test in <code>basic_action/test/interaction_tests_eng.txt</code>:</p> <pre><code>--- one-shot utterance\nU&gt; call John\nS&gt; Calling John.\n</code></pre> <p>Run the tests to verify that the new one fails.</p> <pre><code>tdm test eng\n</code></pre> <pre><code>On line 13 of basic_action/test/interaction_tests_eng.txt,\nexpected:\n  S&gt; Calling John.\n\nbut got:\n  S&gt; I heard you say call John. I don't understand. So, What would you like to do?\n</code></pre> <p>We now add the following lines to <code>basic_action/grammar/grammar_eng.xml</code>:</p> <pre><code>  &lt;request action=\"call\"&gt;\n    &lt;utterance&gt;call &lt;individual sort=\"contact\"/&gt;&lt;/utterance&gt;\n  &lt;/request&gt;\n</code></pre> <p>The element <code>&lt;request&gt;</code> is used when defining things that the user can say to request that an action is to be performed. In contrast to <code>&lt;action&gt;</code>, <code>&lt;request&gt;</code> is user-specific and deals with whole utterances, including potential references to individuals. The element <code>&lt;individual&gt;</code> acts as a slot, showing that a certain place in the utterance refers to an individual.</p> <p>Now build and test.</p> <pre><code>tdm build\ntdm test eng\n</code></pre> <pre><code>Ran 3 tests in 0.523s\n\nOK\n</code></pre>"},{"location":"for-dialog-designers/tutorial/#step-8-adding-a-language","title":"Step 8. Adding a language","text":"<p>If you want to add support for a new language, the following steps are needed. First you need to modify the file <code>backend.config.json</code>. In the field <code>supported_languages</code>, add <code>\"fre\"</code> for French and/or <code>\"dut\"</code> for Dutch (separated by commas). Assuming we want to add support for French, the file contents are changed to</p> <pre><code>{\n    \"supported_languages\": [\n        \"eng\",\n        \"fre\"\n    ]\n}\n</code></pre> <p>Second, we need to create interaction tests for the new language. For French, we add the file <code>basic_action/test/interaction_tests_fre.txt</code> with translated contents:</p> <pre><code>--- main menu\nS&gt; Que voulez-vous faire?\n\n--- call\nS&gt; Que voulez-vous faire?\nU&gt; appellez\nS&gt; Qui voulez-vous appeler?\nU&gt; Andr\u00e9\nS&gt; J'appelle Andr\u00e9.\n\n--- one-shot utterance\nU&gt; appellez Andr\u00e9\nS&gt; J'appelle Andr\u00e9.\n</code></pre> <p>Make sure to save the interaction tests with UTF-8 encoding without byte-order mark (BOM) when using non-ASCII characters.</p> <p>Check our HTTP service to see that name of the contacts are already there translated in French (and even Dutch):</p> <pre><code>CONTACTS_FRENCH = {\n    \"Jean\": JOHN,\n    u\"\u00c9lise\": LISA,\n    \"Marie\": MARY,\n    u\"Andr\u00e9\": ANDY,\n}\n\nCONTACTS_DUTCH = {\n    \"Jan\": JOHN,\n    \"Lisa\": LISA,\n    \"Maria\": MARY,\n    \"Andreas\": ANDY,\n}\n</code></pre> <p>Finally, we need to create a grammar file for the new language. For French, we add the file <code>basic_action/grammar/grammar_fre.xml</code> with the following contents:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;grammar&gt;\n  &lt;action name=\"call\"&gt;\n    &lt;verb-phrase&gt;\n      &lt;verb ref=\"call\"/&gt;\n    &lt;/verb-phrase&gt;\n  &lt;/action&gt;\n\n  &lt;request action=\"call\"&gt;\n    &lt;utterance&gt;appellez &lt;individual sort=\"contact\"/&gt;&lt;/utterance&gt;\n  &lt;/request&gt;\n\n  &lt;lexicon&gt;\n    &lt;verb id=\"call\"&gt;\n      &lt;infinitive&gt;appeller&lt;/infinitive&gt;\n    &lt;/verb&gt;\n  &lt;/lexicon&gt;\n\n  &lt;question speaker=\"system\" predicate=\"selected_contact\" type=\"wh_question\"&gt;\n    &lt;utterance&gt;qui voulez-vous appeler&lt;/utterance&gt;\n  &lt;/question&gt;\n\n  &lt;report action=\"Call\" status=\"ended\"&gt;\n    &lt;utterance&gt;j'appelle &lt;individual predicate=\"selected_contact\"/&gt;&lt;/utterance&gt;\n  &lt;/report&gt;\n&lt;/grammar&gt;\n</code></pre> <p>Build and test. Note the changed language parameter for interaction testing.</p> <pre><code>tdm build\ntdm test fre\n</code></pre> <pre><code>Ran 3 tests in 0.509s\n\nOK\n</code></pre>"},{"location":"for-dialog-designers/tutorial/#step-9-how-to-continue","title":"Step 9. How to continue","text":"<p>This tutorial has illustrated how to implement the basic action example. The source code is available on Github.</p> <p>In order to continue, go to the examples section to find an example similar to your desired functionality. Steal the best ideas from there, adjusting them for yor domain. Remember to work test driven, adding a test first, then making it work.</p>"}]}